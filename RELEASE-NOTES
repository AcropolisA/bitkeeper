============================================================================
Release notes for BitKeeper version 6.0-pre2 (released XXX, 2013)

bk set
    Change the default behavior to perform set operations on the
    product changeset file.  Added a --standalone / -S option to
    limit the operation to the current component.

============================================================================
Release notes for BitKeeper version 6.0-pre1 (released XXX, 2013)

    This is a pre-release of changes that are destined to be included in
    the 6.0 release of BitKeeper.  

    The primary focus of the 6.0 effort was performance improvements.

New repository format for performance
    BK6 has a new file format designed for performance.  We're still
    working on it -- bk clone needs more work, as does pull -- but as
    is shown below, we've made significant improvements and would like
    some customer feedback.

    The new repository format cannot be read by bk-5.x releases
    of BitKeeper (but see below).  It is intended for future bk-6.x
    releases to be able to read and write repositories created by this
    pre-release, but further on-disk changes are likely to be included
    in later releases.

Compatibility
    New file formats are a cause for concern but we've done the extra
    work so you may try it without forcing everyone to upgrade. BK6 can
    pull/push the new format from/to bk5's format.

    To enable the the new, faster format:
  
	bk clone --upgrade bk5-repo bk6-repo
  
    To downgrade to be compatible with bk5 (or bk4 if it is a non-nested
    repo):

	bk clone --downgrade bk6-repo bk5-repo

    To allow clones/pulls/pushes from bk4 & bk5, serve the repositories
    with a bk6 bkd:

    	cd bk6-repo
	bk pull bk://bk6-server/bk5-repo
	bk push bk://bk6-server/bk5-repo
 
Performance improvements:
    In the examples below a non-nested test repository contained 55,000
    files with 282,000 changesets on an NFS server.  Both the server
    and client caches were dropped (made cold) before each operation.

    Note that none of the performance improvements depend on the use of
    a file system notifier.  We considered and rejected such an approach
    because it is neither practical nor reliable on a network file system.

  - The new binary file format allows significantly faster access to
    repository metadata:

        bk5 changes -r+	 2.8 seconds
        bk6 changes -r+	 0.4 seconds
  
  - Fastscan feature: certain operations will remember where they were
    run so that later operations can run more quickly and with less I/O.
    The caveat is that

	bk edit foo		# works
	chmod +w foo		# fails, won't be noticed as a change
    and
	create new_file
	bk new new_file		# works

    but without the "bk new" the file will not be seen as part of the
    repository history.

  - Changed files.  Fastscan remembers where you locked a file (bk edit)
    (bk edit) or where it became pending (bk ci).  Using this information
    speeds up searching for modified files:

	bk5 -cU diffs: 27.9 seconds
	bk6 -cU diffs:  1.3 seconds

    The checkout mode must be checkout:get or checkout:none to enable 
    this performance gain.
  
  - Commit performance fixes.  Commit uses the remembered information
    to avoid scanning the whole tree searching for pending files:

	bk5 commit: 38.4 seconds
	bk6 commit:  2.6 seconds

    Part of that performance gain is the fastscan and part of it is the
    new binary file format which is more efficient.

  - citool performance fixes.  A bk citool on a large repository with
    many extra (untracked) files and/or many files with stored comments
    (i.e., after a large bk collapse) was unresponsive while it was
    scanning the file system.  citool is now both faster and responsive
    during any scan or long-running operation.

    If users are careful to use bk edit to lock files and bk new to add
    new files to the history, then citool can use the fastscan feature
    to find modified/pending files very quickly:

	bk5 citool:	       15.4 seconds bk6 citool --no-extras:
	1.0 seconds

    Even when citool is told to scan for extras in a nested repo, it will
    appear to run faster because it uses the fastscan cache to find the
    modified/pending files first, then scans the rest of the repository
    for extras.

  - citool ignore handling.  Ignoring files in BK/nested is onerous 
    because each component has its own ignore file (so things continue
    to work when you detach and/or port).  We made the ignore button
    pop up a dialog that lets you choose what it is you want to ignore
    instead of simply ignoring the selected file.

  - pull performance fixes.  Pull will get further improvements, but as
    it stands it does less I/O, uses less CPU, and the binary file format
    helps as well.

	bk5 pull: 37.3 seconds
	bk6 pull:  5.2 seconds

  - revtool -> csettool.  If you use revtool to look at a file history
    and you want to pop up csettool to see the changeset, under the covers
    BK is doing a bk r2c on the rev in the file.  That has to open up the
    changeset file (and in nested it also has to look at the product's
    changeset file).  The binary file format makes this much faster:

	bk5 r2c: 4.5 second
	bk6 r2c: 0.5 seconds

    which in turn makes the GUIs more responsive and useful for debugging.

  - Cold-cache NFS fixes for BK/nested.
    In the past, we gathered up information about each component when we
    did nested operations.  BK6 is more careful to gather that information
    only as needed, so if an operation looks at a subset of the components,
    only that subset is probed at startup.  An example of where that helps
    is the 

	bk6 -cU diffs

    that ran ~20x faster in BK6.  

Changes in bk commands

  bk annotate
     -c<date> is now bk annotate -c<date_range>; the old usage is no
     longer supported (but see the docs for how to work around it).
     -R[<range>] now has default annotations (-aur).  To get previous
     behavior, use -anone.

  bk changes
     Fixed bugs with include/exclude patterns that matched components'
     ChangetSet files.

     The -i/-x options now act as selectors, printing only changesets
     that match a given pattern, but printing all information about
     the changeset (use --filter for the old behavior; --filter is
     undocumented because we feel it is unlikely anyone wanted the
     old behavior).

     -<number> can limit output to only that number of items.

  bk citool
     Keep a copy of the X11 selection buffer between file changes in
     citool.  Without this fix, selecting something in X11 and then
     changing files would delete the X selection and a paste event
     to another file would fail.

     Add --no-extras to skip scanning for new files not under revision
     control.  This requires that you use 'bk new' to add new files, but
     can be much faster in nested repositories if the new BK repository
     format is used.

  bk clone
     Add the --upgrade and --downgrade options to enable performance
     or compatibility.

  bk cp
     Will now refuse to copy BAM files without a -f (before this could
     create broken repositories).

  bk diffs
     Add --stats to output a diffstat-like summary of changes.

     Fix paths in bk diffs so that you can do
       bk -Uc diffs -up > SAVED
       bk -Uc unedit
       bk -P patch -p1 -g1 < SAVED
     and it works, even in nested.

  bk help config-etc
     Add a new POLY option to support using multiple portals in a
     product line.

  bk log
     -<number> can limit output to only that number of items.

  bk r2c
     Add range support. Now you can do
       bk r2c -r<low>..<high> <file>
     and get back a list of ChangeSet revisions separated
     by commas. E.g., "1.5,1.4,1.3"

  bk rset
     Add --elide to 'bk rset -rREV1..REV2' to skip files with no
     actual content changes.

  bk prs
     The default prs output has been changed in the case where BK_HOST
     has been set.  The original DSUMMARY (which is part of the default
     prs output) used user@host/realhost. Now it outputs user@host.

  bk pull
     In a nested repository when a new component needs to be populated,
     it can now come from any saved location for that component instead
     of only the source URL.

  bk unrm
     The unrm command has been rewritten to fix several problems in the
     old version.
     - can restore a file that has been deleted in the
       deleted directory (even if a merge occurred in the
       deleted directory)
     - can restore triggers
     - can handle files containing spaces

Other changes

   - MD5KEYs for any rev other than 1.0 have changed; they are now
     stable across any transformation that does not change history
     (so attach, detach, port, newroot are all stable but csetprune and
     partition will change the keys).

     To remain compatible with bk5, any bk5-generated key will work and
     find the same revision when handed to bk6.  However, bk6-generated
     keys will not work when handed to bk5.

   - vc-bk.el updates and bug fixes
     Add a working revert function (C-x v u). Previously it could
     do the wrong thing with keywords, if any.
      
     C-x v L now runs "bk changes".
      
     Honor vc-log-show-limit by passing the limit variable to the -%d
     option in bk changes and bk log.

     See `bk bin`/contrib/vc-bk.el

   - Multiple portals.  When porting changes between components in
     different products, BitMover recommends having one portal per
     product to act as the sole destination in porting the changes into a
     product.  For some workflows, that is too restrictive.  See 'bk help
     config-etc' in the POLY section for how to enable multiple portals.
