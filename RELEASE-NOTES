Release notes for BitKeeper beta XX

bk changes
    XXX The -a changes need to be explained here.
    In bold letters, post the changes needed to be done to scripts
    which will insure working with 4.x and 5.x (and 3.x):
    include -a anywhere -k, -L or -R is used.

===============================================================================
Release notes for BitKeeper beta 6

Big overhaul of progress bars used in clone, undo, push, pull,
renumber, takepatch, check and more.  Please watch those operations
and let us know if it is too much or too little or just right.

This version of bk stores deleted files in subdirectories under
BitKeeper/deleted to avoid problems with filesystems that have
problems with large numbers of files in a single directory.  An
example filename is like this:
	BitKeeper/deleted/07/slib.c~f3733b2c327712e5
	2 hex digits, the basename of the 1.1 delta, and the random
	bits for this file

While not required, if you are experiencing performance problems in
your deleted directory you can try this:
    bk -rBitKeeper/deleted rm -f
    bk commit -y'mv deleted files'

Tell users about new versions of BitKeeper when they quit out
of the GUIs or when they run 'bk help'. In the former case, a
"bk prompt" is launched, and in the latter case the upgrade info
is inserted into the help text.

The conditions for prompting are as follows:
    - There is a new bk out (duh!).
    - The current bk is older than the new bk.
    - The new bk has been out for at least a month and the
      current bk has been installed for at least a month.
    - We haven't prompted in at least a month.

This version integrates bk-4.6b which has a bugfix for 2010-04-30-001

bk alias
    Add locking to avoid collision

bk attach
    Only works in portals (and checks they are still fully populated).

bk check
    check if the tip cset has a pathname conflict where two different
    rootkeys are stored at the same pathname.

bk mv/mvdir
    Prevent component renames

bk portal
    Portals are fully populated before becoming portals.
    You can't remove comps from a portal (bk here rm), nor run undo.
    The intention of a portal is to limit information entering a
    product to happen once.  That way, a given component cset can be
    traced to one product cset.  To support this, portals are fully
    populated and can only move forward.

bk get/edit
    Make get -S incompatible with -M/-i/-x/-r options.
    Edit -S / get -e -S now will no longer complain about files already
    checked out.

bk partition
    Incompatible with previous beta and intending to be stable.
    New default behavior - prune out deleted and gone, and only
    have sfiles reside in the most recent component (if a file
    in its life moved between components).

bk undo
    No undo in a portal.  See bk portal above.

===============================================================================
Release notes for BitKeeper beta 5

This is a bugfix and partition performance release.

bk partition
    Add a -j<parallel-processes> option to help partition run faster.
    If the user has GNU make installed, then partition can create
    components in parallel.  This helps when using a multi core processor.

bk prompt (GUI version)
    Fix a window geometry problem.

bk commit - fix how pending comments are accumulated, which in certain
cases after using attach, would be wrong.

MS Windows - when working in a repository where the SCCS directories
have been hidden in the .bk directory, mark the .bk directory as hidden,
in the same way that SCCS directories were marked hidden in an existing
bk repository.

===============================================================================
Release notes for BitKeeper beta 4

bk bam server <NEWURL>
    This now works in a nested repository.

bk checksum ChangeSet
    Performance is enhanced.  Verifying checksum integrity
    for all csets in a ChangeSet file requires many passes over the
    data.  Checksums are now calculated more efficiently.
    This will help bk partition.

bk csetprune
    Performance is enhanced.  Running csetprune can remove
    csets from the history, leading to re-structuring of the graph.
    Previous, that was done in a straight forward, but inefficient
    manner, which was fine since csetprune wasn't used often.  With
    partition, csetprune performance is critical, and the graph
    restructuring computation is now more efficient.

bk fix -c
    This now works in a nested repository.

bk needscheck [-v]
    Returns true if the repository is configured for partial_check and
    would run a full check.

bk partition
    Besides running faster (see bk checksum and bk csetprune),
    partition now transforms the gone file.  Previous versions required
    pruning out missing files.  This version still allows pruning,
    but doesn't require it.

Other changes

bk-4.6 was released, and those changes have been integrated into this
release.

progress bars
    The push, pull, clone, and undo commands have been reworked
    to have progress bars instead of listing out files being worked on.
    The previous behavior is still available by using the -v option.

triggers
    The exit codes from post-commit triggers are ignored.

===============================================================================
Release notes for BitKeeper beta 3

Performance groundwork in clones, pushes and pulls.  We are working
on more which builds on the changes in this release.

bk version
    Work on a remote repository: bk version <url>

bk repocheck
    a shorthand for running check in a standalone or nested collection.
    Easier to remember than bk -Ar check -vac

bk id
    New option '-5' - return the repo rootkey as an md5key.

bk citool
    Significant changes for use in a nested collection.
    Give it a try, please, and let us know what you think.

===============================================================================
Release notes for BitKeeper beta 2

Minor bugfixes and polish.  Do fewer stats of the file system.

===============================================================================

Release notes for BitKeeper beta

This is a preview of a major release of BitKeeper

BK-Nested - supports organizing a collection of repositories.
This support scaling by linking many repositories together but
not requiring all repositories be present.

SCCS directories are no longer stored each directory in the repository.

Command level changes:

bk changes
    extended dspecs, search path, etc
    (also prs & log)

bk clean
    The clean code is now smarter about handling files that were
    edited without being locked properly.

bk clone -l
    The hardlink clone code now behaves much more like the normal
    clone in subtle ways.  For example differences in triggers are
    gone, and files are listed instead of directories.

bk takepatch
    Addressed a performance issue on large pulls over NFS or in other
    cases where we have a slow local filesystem.  BitKeeper now does
    significantly less disk IO.

bk pull
    pull -u now spawns changes -L if the pull fails.

bk push
    Now support 'bk push -rREV URL' to only push a subset of the local
    repository to a remote location

---------------
Misc fixes

- Allow the nosync config option to also prevent calls to fsync when
  SCCS files are written.

- Fixed some bugs related to compression over a ssh transport.
  Avoid multiple compression passes.

- Windows now flush modified data on the disk after a resolve has
  completely applying new changes.  This matches the unix behavior.
  This flush can be disabled with the nosync config option.

- Fix a long standing bug in the file urls.  We don't support
  non-absolute path file URLs, all file://whatever means whatever is
  treated as /whatever.  But that should have been file:///whatever.
  Oops.  We do support relative paths, such as ../project, but not in
  a file:// form.
  Now the code accepts either file://whatever or file:///whatever, but
  only generates the last form.

- BitKeeper now always uses unique names in the BitKeeper/deleted
  directory and avoids lots of rename conflicts in some cases.

- BitKeeper will now refuse to run a different version of bk as a
  subprocess.  We have had cases where users have forgotten to restart
  their bkd's after upgrade BitKeeper and this cases bugs.  BitKeeper
  will now notice this and error until the bkd is restarted.

Environment variables that are used to control BitKeeper's behavior
can not longer be set to an empty string.  So for example:
  BK_NO_TRIGGERS="" bk push
won't work.  Use BK_NO_TRIGGERS=1 instead.
