.so ../bk-macros
.TH "bk bkscc" "\*[BKVER]" %E% "\*(BC" "\*(UM"
.SH NAME
bk bkscc \- BitKeeper and SCC API
.SH DESCRIPTION
.LP
The bkscc.dll is a dynamic library which allows \*[BK] to integrate with
any IDE which supports the Microsoft SCC API interface.
In this document we will assume the IDE is Microsoft Visual C++ (VC++).
After bkscc.dll is installed VC++ will discover the library automatically
by looking it up in the registry.
VC++ will automatically add a "source control" entry under the "project"
menu.
Many of the \*[BK] functions can be accessed via the new menu entry.
.LP
Experienced \*[BK] users will notice there are some conflicts between
\*[BK] terminology and VC++ terminology.
What the SCC API calls a "project" is not the same as a \*[BK] repository.
A typical SCC API Project usually contains one binary for example, a
".exe" or ".dll" file.
A typical \*[BK] repository may contain multiple ".exe" and ".dll" files.
.LP
A VC++ workspace is roughly equivalent to a \*[BK] repository.
.LP
A VC++ workspace file is roughly equivalent to a typical master (or
top-level) Makefile.
.LP
A VC++ project file is roughly equivalent to a mini Makefile sitting in
a sub-directory of a \*[BK] repository.
.LP
While it is possible to create a different mapping of VC++ concepts to
\*[BK] concepts, the above mapping is the cleanest and simplest.
Staying within the above model is strongly recommended.
.SH RECOMMENDED USAGE
.LP
As a consequence of the above model, the workspace file must be created first.
It must be placed at the \*[BK] root directory and
it must be the first file added to the repository. A typical usage
scenario is as follows:
.LI
Start up the VC++ GUI
.LI
Left  click on file->new->workspace
.LI
After the workspace file is created, right click on 
the workspace file icon and select "add to source control".
A \*[BK] setup screen to create a Master repository will pop-up. 
Fill in the form and left click the "create repository" button. 
This automatically creates a \*[BK] root directory as the 
parent directory of the workspace file.
.LI
At this point the \*[BK] repository is created.
You may start adding project(s) to the workspace, (Since the
VC++ workspace directory is the same as the \*[BK] root
directory, we can use the term \*[BK] root and workspace
interchangeably.)
.LI
Left click on file->new->project;
.B IMPORTANT: 
always select "add to current workspace",
when this menu is used.  This will create a sub-directory
under the \*[BK] root where all files associated with the project will go.
.LI
Follow the usual VC++ procedure to create the type of VC++ project
wanted.( e.g a win32 application)
.LI
Right click on the project file and select "add to source control"
.LI
Edit/compile/debug source code until ready to create a changeset.
To create a changeset: left click on project->source\ control->BitKeeper.
This will invoke bk citool.  Add checkin comments
and push the "commit" button to create a \*[BK] changeset.
.SH NOTES
.LP
Some IDEs do not set the current directory correctly,
consequently \*(BK is unable to find the repository which keeps it from
functioning properly.  To remedy this, it is necessary to set
the current directory to the \*(BK root directory explicitly.
The method to set the current directory depends on the IDE used.
.TP
.B CodeWright
.RS
.TP .3i
.B 1.
left click on Tools-> Version\ Control-> Maintenance-> Current\ Directory and
type in the root path of the \*(BK repository
.TP .3i
.B 2.
go to Tools->Version Control->Setup and do Open Project-> Existing
.RE
.SH BUGS
.LP
Closing a workspace file and opening a different one
without restarting VC++ will cause a warning message
about mixing multiple workspaces together. This is because VC++
does not inform the source code control provider of workspace
switching event.
.SH "SEE ALSO"
.SA citool
.SH CATEGORY
.B GUI-tools
