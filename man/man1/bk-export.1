.so ../bk-macros
.TH "bk export" 1 20%E% "\*(BC" "\*(UM"
.SH NAME 
bk export \- checks out clear-text version of all \*(BK files
.SH SYNOPSIS
.B bk export \-tpatch [\-hT] [\-d u|c]
.OPTreq \-r rev1,rev2
.br
.Bc bk export [\-tplain] [\-kTvw] [
.OPTreq \-i pat
.Bc ] [
.OPTreq \-x pat
.B ]
.OPTreq \-r rev
.Bc \ [
.ARGc from
.B ]
.ARG to
.SH DESCRIPTION
.LP
The
.B export
command generates a directory tree alongside the \*(BK
repository which contains checked-out copies of all the files under
\*(BK control.  It can also generate traditional
.RB ( diff
.BR \-Nur )
patches between any two revisions of the source tree.
By default, bk export only exports user files.  Files under
the BitKeeper directory are not exported.  This behavior can be
changed with the 
.B \-i
and 
.B \-x
options.
.LP
If you are trying the export a patch for a sub-directory, and
some of the files in that directory have been moved out of the
directory. You want to make sure the out-of-view file looks
like deleted file. This is done by replacing the 
.I |rev 
part of the out-of-view file to 
.IR |1.0 . 
You can do this using the following command:
.DS
.B bk rset \c
.RI -hr A,B \c
.B \ | \c
.I your_script \c
.B | bk gnupatch 
.DE
.SH OPTIONS
.if t .TP
.if n .TP 1i
.OPTreq \-d u|c
Set patch's diff style to unified or context diff.  If no style
specified, do regular diffs.
.tp
.B \-h
Disable patch header.
.tp
.OPTreq \-i pat
Export only pathnames matching 
.ARG pat
pattern (see below).
.tp 
.B \-k
Do not expand keywords (default is to expand keywords).
.tp
.OPTreq \-r rev
Export the tree as of revision 
.ARG rev .
.tp
.B \-T
Set gfile modification time to check-in time.
.tp
.OPTreq \-t type
Select export format via 
.ARG type :
.RS .4i
.tp
.B plain 
export file in plain text to a directory tree. 
.tp
.B patch 
export file in gnu patch format.
.RE
.tp
.B \-v
Be verbose.
.tp
.B \-w
Make files writable (default is read-only).
.tp
.OPTreq \-x pat
Export all pathnames not matching 
.ARG pat
pattern (see below).
.SH
INCLUDE/EXCLUDE PROCESSING
.LP
Include and/or exclude patterns may be used to control which
files are  exported.
There may be multiple include and/or exclude patterns.
The patterns are a file glob like that used by 
.B bk ignore.
Patterns are matched against the partial pathname from the root
of the repository.
If the partial pathname matches any of the exclude patterns then
the file is skipped.
If there are one or more include patterns but the partial
pathname does not match any of the include patterns then the
file is skipped.
Exclude processing takes precedence over include processing.
.LP
When exporting patches there can be ambiguity as to which name is used 
for include/exclude processing because some files may have been moved 
in the changes implied by the exported patch.
The include/exclude processing always applies to any of file names
contained in the changes implied by the patch.
For example, suppose you have a file that is currently deleted but
at the time of the patch was in \f(CWsrc/foo.c\fP.
If you told the system to export \f(CWsrc/*\fP then the file will
be in the set.
.SH SEE ALSO
.BR diff (1)
.br
.SA gnupatch 1
.SA rset 1
.SH CATEGORY
.B Compat
