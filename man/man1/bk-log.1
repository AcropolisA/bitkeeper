.so ../bk-macros
.TH "bk log" "\*[BKVER]" %E% "\*(BC" "\*(UM"
.SH NAME
bk log \- print file revision history and/or metadata
.SH SYNOPSIS
.if n .ll 7.49i
.B bk log
.[B] \-dDfS
.if t .ds d date
.if n .ds d d
.if t .ds r rev
.if n .ds r r
.[OPTreq] \-c \*d
.[OPTreq] \-C \*r
.[OPTopt] \-L url
.[OPTreq] \-r \*r
.if n .ll
.BKARGS
.SH DESCRIPTION
The
.B bk log
command is used to extract revision history and or metadata from a file or
set of files.  The default behavior is to print a summary of each revision
to each of the specified files.  There are options to restrict the set of
revisions to print, a very commonly used one is
.BR \-r+ ,
which restricts the set to the most recent revision.
.LP
With no options 
.B bk log
output defaults to giving information on all revisions
of all files in the present directory that are under \*(BK control.  
Output is given as follows: the name of the file and range of revisions
is followed by a detailed account of each revision.  Revision number, 
revision date and time, user who made that revision, what the relative
path from root of repository is to that file, the comments that go
with that revision, and documents if the file has been renamed.
.SH OPTIONS
.TP "\-\-begin\=<script>"
.OPTreq \- n
A numeric argument that limits the number of deltas printed per file.
.tp
.OPTreq \-\-begin\= script
The dspec v2 language (see that section below and the examples) is awk
like and has optional begin/end sections.
This option allows you to specify the body of a begin section (if the
file also has a begin section then both are run; order is
undefined).
It is typically used with an on disk dspec in a dspec file that has been 
written in a way to do one thing by default and another if a variable
is set to non-zero.
.tp
.OPTreq \-c date
Cut-off dates.  See range specifications (below) or 
.B bk help range
for details.
.tp
.OPTreq \-C rev
Make the range be all revs that are the same cset as
.ARG rev .
.tp
.OPTreq \-d spec
Override the default output format (see below).
.tp
.OPTreq \-\-dspecf\= file
Like
.B \-d
but read the dspec from a file.
.tp
.B \-D
Do not skip files in the
.B BitKeeper/deleted
directory.
.tp
.B \-f
Print the changes in forward (oldest to newest) order.  The default is backward.
.\" .tp
.\" .B \-M
.\" Do not include branch deltas which are not merged.
.tp
.OPTopt \-L url
Show all deltas unique to this repository relative to the (outgoing) parent or
.ARG url
if one was specified.
May not be combined with
.BR \-c 
or
.BR \-r .
.tp
.B \-\-lattice
Restrict the deltas to those on the lattice between the two range
endpoints.  Unlike a range, the lower bound is included in the output.
.tp
.B \-\-longest
Restrict the deltas to those on the longest line between the two range
endpoints.  Unlike a range, the lower bound is included in the output.
.tp
.B \-n
Add a newline to each printed record.
.tp
.OPTreq \-r rev
Specify a revision, or part of a range.
(Or key or changeset revision. See 
.B bk help terms
under \*(lqrev argument.\*(rq)
.tp
.B \-S
.tp
.B \-\-standalone
Use with -L in a nested component when you want the component to act like
a standalone repository.
.SS RANGE SPECIFICATIONS
.TP \fB\-c2006/07.\|.2006\fP
.B \-r+
prints the most recent delta
.tp
.B \-r1.3.\|.1.6
prints all deltas that are in 1.6's history but are not in 1.3's history.
.tp
.B \-c2006/07.\|.2006
prints all deltas from July 1 2006 to Dec 31 2006
.tp
.B \-c2006.\|.2006
prints all deltas from Jan 1 2006 to Dec 31 2006
.tp
.B \-c\-1d.\|.
prints all deltas made in the last 24 hours; similarly for
.IR s ,
.IR m ,
.IR h ,
.IR d ,
.IR M ,
and
.IR Y 
for seconds,minutes, hours, days, months, and years.
.SH DEFAULT OUTPUT FORMAT
The 
.BR "bk changes" ,
and
.BR "bk log" 
commands have a default output format which may be modified on a
per user or per repository basis.
The default formats are named as follows:
.TP "dspec-changes-vv "
dspec-changes
Specifies the format for bk changes [-v] output (without -vv).
.tp
dspec-changes-vv
Specifies the format for bk changes -vv output (verbose with diffs).
.tp
dspec-log
Specifies the format for bk log output.
.LP
There are other dspec-* files, if you want some fun look at dspec-*-json,
if you understand those you understand that dspecs are a little programming
language. 
The shipped files live in `bk bin`/dspec-*
.LP
These files can live in multiple places, this is the search order for
"dspec-changes", the first one found is used:
.RS
<repo>/BitKeeper/etc/dspec-changes
.br
<product>/BitKeeper/etc/dspec-changes (\*(BK/Nested only)
.br
`bk dotbk`/dspec-changes
.br
/etc/BitKeeper/etc/dspec-changes
.br
`bk bin`/dspec-changes
.RE
.SH MODIFYING THE OUTPUT FORMAT
There are many different pieces of information in a \*(BK file and
virtually all of them can be extracted using a non-default output
format.
.LP
To extract specific information, a \*(lqdspec\*(rq
(data specification) string is provided and where there are
keywords surrounded by colons the keywords are expanded much like
.BR printf (3).
This can lead to many useful one liners; want to see which file is
the most busy in a repository?
.DS
bk -U log -r+ -nd':DS: :GFILE' | sort -nr | head
.DE
If you are familiar with 
.BR awk (1)
the processing here is similar.  In awk, each line is a record, here each
delta is a record.  For each delta, you can provide a 
.B dspec
which says what it is you want to print from that delta.
Looking at the dspec-* files in the installation directory is recommended,
there are $begin/$end sections that mimic awk.
.LP
The
.I dspecs
can contain the following set of escaped characters which
will be replaced with the specified string:
.LP
.ta .75i
.nf
\\b	Backspace
\\f	Form feed
\\n	Newline
\\r	Carriage return
\\t	Tab
\\123	3 digit octal value (pad with leading zeros)
\\<c>	c for any other character "c"
.LP
.fi
.LP
In almost all cases, a trailing
newline is not provided by any of the keywords 
and one should be provided as needed.
The newline can be added in line or you can specify the
.B \-n
option which will add a newline after each delta is processed.
.LP
Multi-line keywords are normally printed as is, but you can
format each line separately using a
.B $each(\|) 
loop (see ITERATIVE OUTPUT below).
.SS CONDITIONAL OUTPUT
The 
.I dspec
can produce output conditionally.
The following prints the revisions of
.B foo.c
that were made by
.IR joe :
.DS
bk log -nd'$if(:USER:=joe){:REV:}' foo.c
.DE
.br
.ne 5
.SS CONDITIONAL STATEMENTS
.TP 
\fB$if(\fI\*<expr\*>\fB)\fB{\fI\*<anything\*>\fB}\fR
prints 
.ARG anything
if
.ARG expr
is true.  If
.ARG expr 
is a keyword, i.e.,
.V :MERGE: ,
then the keyword is examined and returns true if it has a value.
.ARG anything 
can contain keywords, i.e.,
.V :REV: .
.tp
\fB$unless(\fI\*<expr\*>\fB)\fB{\fI\*<anything\*>\fB}\fR
prints 
.ARG anything
unless
.ARG expr
is true.
.tp
.if n \fB$if(\fI\*<expr\*>\fB)\fB{\fI\*<stuff if true\*>\fB}$else{\fI\*<stuff if false\*>}\fR
both
.B $if
and
.B $unless
can have an optional
.B $else
clause that prints if the preceding clause was not printed.
.SS CONDITIONAL OPERATORS
.ad l
.TP "strings "
.B strings
.ARGc lhs
.B =\c
.ARG rhs
true if
.ARG lhs
is identical to 
.ARG rhs .  
.br
.ARGc lhs
.B !=\c
.ARG rhs
true if
.ARG lhs
is different than
.ARG rhs .
.br
.ARGc str
.B =~\c
.ARG glob
true if
.ARG str
matches
.ARG glob .
.br
.ARGc str
.B =~\c
.ARG /regexp/
true if
.ARG str
matches the regular expression;
/regexp/i does a case-insensitive match
and /glob/g does a glob match.
.br
.BR Note :
spaces immediately before and after the operator are ignored.
To match against such a leading or trailing space, escape it.
.tp
.B numbers
.ARGc lhs
.B \ \-eq\ \c
.ARG rhs
equality;
.br
.ARGc lhs
.B \ \-ge\ \c
.ARG rhs
equal or greater than;
.br
.ARGc lhs
.B \ \-gt\ \c
.ARG rhs
greater than;
.br
.ARGc lhs
.B \ \-le\ \c
.ARG rhs
equal or less than;
.br
.ARGc lhs
.B \ \-lt\ \c
.ARG rhs
less than.
.br
.BR Note :
spaces are
.B required
on both sides of the operator.
.SS COMPOUND EXPRESSIONS
As of \*[BK] release 4.1,
.I dspecs
support logical AND (A && B), logical OR (A || B),
and parenthesized subexpressions ((A && B) || (C && D)).
Note: spaces immediately before and after the operator are ignored.
To match against such a leading or trailing space, escape it.
.SS ITERATIVE OUTPUT
.ad b
Some keywords, such as comments or tags, may be multi-line.  To print a prefix
in front of each of these lines, the dspec is:
.DS
bk log -d'$each(:C:){C\ \ (:C:)\en}' foo.c
.DE
This iteration works for all keywords, but normally is only used
for keywords that can contain multiple lines like
.V ALL_TAGS ,
.V C ,
.V TAGGED ,
and
.V TAGS .
.LP
The
.B $first(\|)
builtin can be used to print only the first line of one of these
multi-line keywords.
Some development efforts tend to use the first line of commit comments
as a summary of the change; the rest are more details.
The dspec that ships with \*(BK for \f(CWbk changes\fP uses this feature
to implement \f(CWbk changes --short\fP.  
To print the first line of each comment in a changeset:
.DS
bk changes -nd'$first(:C:)'
.DE
.SS VARIABLES
When the
.BR "bk log"
command is run over multiple revisions of one or more files, the data
specification ("dspec") is evaluated once for each revision,
and it sometimes is useful to use dspec variables, denoted as '$0', '$1', up to '$9',
to remember values across revisions or files.
A variable is assigned a value with:
.DS
${0=<dspec>}
.DE
where <dspec> is a recursively evaluated data specification.
Once assigned, a variable retains its value for the remainder of the
command (or until reassigned).
Variables start out as empty strings (evaluate to zero in numeric context),
and when re-assigned the old value is discarded.
.SS DSPEC VERSION 2
This little printf like language outgrew itself, having if/then/else
and other control flow was too much on just one line.  
We came up with a version 2 language that allows you to have dspecs
that look like a programming language.  
All of the output from \*(BK commands is generated via the v2 language
in external files (see \f(CWdspec-*\fP in the bin directory).
All of the commands that take dspecs also can take a file containing
the dspec; that's how the \*(BK commands work, they just load those
files.
.LP
To switch into the new language a dspec has to begin like so:
.DS
# dspec-v2
.DE
The language is awk like, comments start with "#" and go to the end of
the line.
Whitespace is ignored unless it is inside double quotes, then it is
reproduced exactly.
Keywords are expanded inside of double quotes as are the escaped
characters mentioned above.
Control flow and begin/end blocks (all the $something) are unquoted.
.LP
Like awk, there are optional begin/end blocks:
.DS
$begin {
        "[\en"
}
$end {
        $if($0 -eq 1) {
                "\}\en"
        }
        "]\en"
}
.DE
Those are from \f(CWdspec-changes-json-v\fP which is the dspec that is used
for \f(CWbk changes -v --json\fP which (surprise!) produces json format output.
If you want to understand this language that is a good file to read.
.LP
Other than variables, which are expanded inside double quotes, none of 
the $word ($if/$else/$first/$each/etc) expand inside double quotes.
This can be surprising, you might think the \f(CWbk changes --short\fP dspec
is:
.DS
":MD5SUM: $first(:C:)\en"
.DE
but that does not work, this will:
.DS
":MD5SUM: " $first(:C:) "\en"
.DE
.LP
In many cases, all keywords will expand in begin/end blocks, those are 
run in the context of the first/last delta selected.
If a range is selected that has no matching deltas (think
.B bk changes -L
for example) then \fBnone\fP of the keywords will be expanded, the current
system expands keywords if and only if there is a valid delta in play.
.LP
A simple dspec-v2 is the \f(CWbk log\fp output format:
.DS
":DPN: :REV:\en"
"  :D_: :T::TZ: :USERHOST: +:LI: -:LD:\en"
$each(:C:) {            # comments
        "  (:C:)\en"
}
"\en"
$if (:TAGS:) {
        $each(:TAGS:) {
                "  TAG: (:TAGS:)\en"
        }
        "\en"
}
.DE
That says:
.br
line 1: print the path name and the revision
.br
line 2: indent the date/time/timezone user@host +lines added -lines deleted
.br
line 3-5: indent each line of the comments
.br
line 6: blank line
.br
line 7-11: if there are tags, print them with another blank line
.SS KEYWORDS
Some keywords are per repository and are marked with 
.B R
in the 
.B T
column below.
Some keywords are per file and are marked with
.B F
in the 
.B T
column below; other keywords are per delta and are marked with
.BR D .
Some keywords only make sense if they are changesets, they are 
marked with
.BR C .
Those keywords that can be either on a changeset or on a file
are marked with
.BR D .
.if t .sp .5
.if n .sp
.nf
.ta +14 +4 +20
.nr XX 0
.de xx
.br
.if \\n(XX<\\n% \{\
Name	T	What is printed
.if t .sp -.5
.if t \l'6.0i'
.if t .sp -.8
.if t \l'6.0i'
.if n \l'5.8i\&='
.nr XX \\n%
.\}
..
.\" TODO? A B BD BF CB FB HT=HOST J KF KV LK M MF MR ND Q UN Y
.\" NOTE:  If you change this list, make sure you make the corresponding
.\" changes to the list of help:// links at the end of this file.
.xx
:AGE:	D	D's age, i.e., seven hours, two weeks, etc.
.xx
:ALL_TAGS:	C	The tag[s] if this changeset has or ever had them
.xx
:ATTACHED_ID:	F	package id to be used for new deltas
.xx
:BAM:	F	true if the file is managed as a BAM file
.xx
:C:	D	D's comments
.xx
:CHANGESET:	F	true if ChangeSet file, false for user files
.xx
:COMMENTS:	D	comments portion of :PRS:
.xx
:COMPRESSION:	D	D's compression (gzip|none)
.xx
:CSETKEY:	D	delta key if D is at a changeset boundary
.xx
:CSETREV:	D	revision of first cset boundary after D
.xx
:D:	D	D's date as YYYY/MM/DD
.xx
:D_:	D	D's date as YYYY-MM-DD
.xx
:DANGLING:	D	D's rev if & only if D is a dangling delta
.xx
:DI:	D	D's includes/excludes as +I,I/-X,X (serials)
.xx
:DIFFS:	D	D's changes in the form of traditional diffs
.xx
:DIFFS_U:	D	D's changes in the form of unified diffs
.xx
:DIFFS_UP:	D	D's changes in the form of unified/procedural diffs
.xx
:DL:	D	lines inserted/deleted/unchanged in D
.xx
:DM:	D	month part of D's date (Jan..Dec)
.xx
:DOMAIN:	D	the domain part of the hostname of D
.xx
:DP:	D	the serial number of the parent of D
.xx
:DPN:	D	the pathname of g.file as of D
.xx
:DS:	D	the serial number of D
.xx
:DSUM:	D	D's 16 bit unsigned checksum (%05u)
.xx
:DSUMMARY:	D	first line of :PRS:
.xx
:DT:	D	D's type: (D|R|T) meaning (Data|Removed|Tag)
.xx
:Dd:	D	day part of D's date as DD
.xx
:Dm:	D	month part of D's date as MM
.xx
:Dn:	D	serial numbers of D's includes, if any
.xx
:Dt:	D	D's data as :DT::REV::D::T::USER::DS::DP:
.xx
:Dx:	D	serial numbers of D's excludes, if any
.xx
:Dy:	D	year part of D's date as YY or YYYY
.xx
:ENC:	F	current encoding scheme (ascii|uuencode|BAM)
.xx
:EVEN:	D	True on every other delta processed
.xx
:F:	F	basename of the \*(BK file
.xx
:FLAGS:	D	file flags as of D in words (HASH, YEAR4...)
.xx
:FSUM:	F	16 bit unsigned checksum of the s.file
.xx
:FUDGE:	D	time stamp fudge used make time monotonic
.xx
:FULLHOST:	D	same as :HOST: or :HOST:/:REALHOST:
.xx
:FULLUSER:	D	same as :USER: or :USER:/:REALUSER:
.xx
:G:	F	basename of the gfile
.xx
:GB:	D	file as of version D
.xx
:GCA:	D	find the graph GCA for D's parents
.xx
:GCA2:	D	find the set GCA for D's parents
.xx
:GFILE:	F	pathname of the gfile
.xx
:GREV:	F	for a file with conflicts, the GCA of the unmerged tips
.xx
:HASHCOUNT:	D	count of key/value pairs in D if & only if hash file
.xx
:HOST:	D	hostname where D was made; could be BK_HOST
.xx
:HTML_AGE:	D	age in a form suitable for web pages
.xx
:HTML_C:	D	comments in a form suitable for web pages
.xx
:ID:	D	the package id in effect when the delta was made
.xx
:IMPORTER:	D	name of the importer of D, if D was an emailed patch
.xx
:KEY:	D	\*[BK] key of D
.xx
:KID:	D	D's direct kid in D's branch
.xx
:KIDS:	D	all of D's direct kids in the graph
.xx
:L:	D	the second field in D's rev (R.L.B.S)
.xx
:LD:	D	lines deleted in D (%u)
.xx
:LI:	D	lines inserted in D (%u)
.xx
:LREV:	F	for a file with conflicts, the LOCAL unmerged tip
.xx
:LU:	D	lines unchanged in D (%u)
.xx
:Ld:	D	lines deleted in D (%05u)
.xx
:Li:	D	lines inserted in D (%05u)
.xx
:Lu:	D	lines unchanged in D (%05u)
.xx
:MD5KEY:	D	crypto based \*[BK] key of D
.xx
:MERGE:	D	D's rev if & only if D has a merge parent
.xx
:MGP:	D	D's merge parent's serial number
.xx
:MODE:	D	D's file modes as an octal (777)
.xx
:MPARENT:	D	D's merge parent's revision
.xx
:N:	D	Number of deltas, use instead of DS, DS may have gaps.
.xx
:NEXT:	D	next entry after D in delta table 
.xx
:ODD:	D	True on every other delta processed
.xx
:PACKAGE_ID:	R	per repository unique id (like bk id)
.xx
:PARENT:	D	D's parent's revision
.xx
:PREV:	D	previous entry before D in delta table
.xx
:PRODUCT_ID:	R	per repository unique id (like bk -P id)
.xx
:PRS:	D	old-style bk prs default output
.xx
:R:	D	the first field in D's rev (R.L.B.S)
.xx
:RANDOM:	F	random bits part of ROOTKEY
.xx
:REALHOST:	D	real host where D was made, regardless of BK_HOST
.xx
:REALUSER:	D	real programmer who made D, not assumed identity
.xx
:RENAME:	D	D's path if different from parent's path
.xx
:REPO_ID:	R	per repository unique id (like bk id -r)
.xx
:REPOTYPE:	R	repotype: product|component|standalone
.xx
:REV:	D	D's revision number
.xx
:RI:	D	revision numbers of D's includes/excludes 
.xx
:ROOTKEY:	F	key of the 1.0 delta, file's internal name
.xx
:RREV:	F	for a file with conflicts, the REMOTE unmerged tip
.xx
:RWXMODE:	D	D's file modes as ascii (-rwxrwxrwx)
.xx
:Rn:	D	revision numbers of D's includes 
.xx
:Rx:	D	revision numbers of D's excludes 
.xx
:S:	D	last field in D's rev (R.L.B.S)
.xx
:SFILE:	F	pathname of s.file
.xx
:SIBLINGS:	D	rev sibling's pointer in D
.xx
:SPN:	D	pathname of s.file as of D
.xx
:SYMLINK:	D	value of D's symlink target
.xx
:T:	D	time of D as HH:MM:SS
.xx
:TAGGED:	C	The tag[s] iff currently on this changeset
.xx
:TAGS:	C	Tag[s] if on, or were on, this changeset (with notes)
.xx
:TIME_T:	D	D's date as GMT time_t, TZ and Fudge adjusted
.xx
:TIP:	D	D's rev if D is at the tip (TOT)
.xx
:TZ:	D	offset from GMT as +/-HH:MM
.xx
:Th:	D	hour part of D's date as HH
.xx
:Tm:	D	minute part of D's date as MM
.xx
:Ts:	D	seconds part of D's date as SS
.xx
:USER:	D	programmer who made D; could be assumed identity
.xx
:UTC:	D	D's time stamp as YYYYMMDDHHMMSS in GMT
.xx
:UTC-FUDGE:	D	like UTC but without the date fudge
.xx
:VERSION:	F	file format version
.SH NOTES
.LP
Keywords marked with type C or D above can optionally be restricted to a
given revision as follows:
.DS
.B :KW|1.0:	# as of a literal revision
.B :KW|PARENT:	# as of the current rev's parent
.B :KW|MPARENT:	# as of the current rev's merge parent (if any)
.DE
For example:
.DS
bk log -hnd'$if(:DPN|PARENT: != :DPN:){rename :DPN|PARENT: => :DPN:}'
.DE
Things that can go in the second part include a specific revision (eg 1.0),
PARENT, and MPARENT.
.SH EXAMPLES
To extract a key, which is a stable name for a changeset:
.DS
bk changes -r1.234 -nd:MD5KEY:
.DE
To count up all the deltas in all user files:
.DS
bk -U log -nd:REV: | wc -l
.DE
List users who have made changes in a subdirectory in the last month:
.DS
bk -rSubDir log -c-1M.. -nd:USER: | sort -u
.DE
To see the number of merge changesets:
.DS
bk changes -nd'$if(:MERGE:){merge}' | wc -l
.DE
To see the number of merges in user files:
.DS
bk -U log -nd'$if(:MERGE:){merge}' | wc -l
.DE
Count up lines inserted by a particular user in all non-merge deltas:
.DS
bk -U log -nd'$if(:USER: = joe && !:MERGE:){:LI:}' |
awk '{ lines += $1 } END { print lines }'
.DE
The default
.I dspec
for the
.B bk changes
command is below.  This is an example of a dspec-v2 style of writing
dspecs, much more pleasant for complex reports.
.DS
# dspec-v2

# The default dspec used by 'bk changes' and 'bk changes -v'

":INDENT:"              # 2 spaces + 2 in component
":DPN:@:REV:"
${1=:USERHOST:}         # 1 == user || user@host
$if (:CHANGESET: && !:COMPONENT_V:) {
    ", :Dy:-:Dm:-:Dd: :T::TZ:, $1"
    ${0=$1}                          # 0 == user of last cset
} $else {
    $if($0 != $1){                   # print user if different
	", $1"
    }
}
$unless (:CHANGESET:) {
    " +:LI: -:LD:"                   # lines added/deleted
}
"\\n"

# bk changes --short is an alias for 
# bk changes --begin='${9=1}'
# so $9 is the switch that decides between short/long form
$if ($9 -eq 0) {                     # comments (long form)
    $each(:C:) {
        ":INDENT:  (:C:)\\n"
    }
} $else {                            # comments (short form)
    ":INDENT:  "
    $first(:C:)
    "\\n"
}
$each(:TAGS:) {
    "  TAG: (:TAGS:)\\n"
}
$if ($9 -eq 0) {                     # skip merge info for --short
    $if (:MERGE:) {                  # merge shows both parents
        ":INDENT:  MERGE: :MPARENT:\\n"
    }
}
"\\n"
.DE
.SH "SEE ALSO"
.SA range
.SH CATEGORY
.B File
.\" help://dspec
.\" help://prs
.\" help://:I:
.\" help://:P:
.\" NOTE:  If you change the KEYWORDS list above, be sure to make the
.\" corresponding changes to the following list.
.\" Don't sort the list, we aren't completely in sorted order
.\" BEGIN dspecs help links ## IMPORTANT: Do not edit or delete this line! ##
.\" help://:AGE:
.\" help://:ALL_TAGS:
.\" help://:ATTACHED_ID:
.\" help://:BAM:
.\" help://:C:
.\" help://:CHANGESET:
.\" help://:COMMENTS:
.\" help://:COMPRESSION:
.\" help://:CSETKEY:
.\" help://:CSETREV:
.\" help://:D:
.\" help://:D_:
.\" help://:DANGLING:
.\" help://:DI:
.\" help://:DIFFS:
.\" help://:DIFFS_U:
.\" help://:DIFFS_UP:
.\" help://:DL:
.\" help://:DM:
.\" help://:DOMAIN:
.\" help://:DP:
.\" help://:DPN:
.\" help://:DS:
.\" help://:DSUM:
.\" help://:DSUMMARY:
.\" help://:DT:
.\" help://:Dd:
.\" help://:Dm:
.\" help://:Dn:
.\" help://:Dt:
.\" help://:Dx:
.\" help://:Dy:
.\" help://:ENC:
.\" help://:EVEN:
.\" help://:F:
.\" help://:FLAGS:
.\" help://:FSUM:
.\" help://:FUDGE:
.\" help://:FULLHOST:
.\" help://:FULLUSER:
.\" help://:G:
.\" help://:GB:
.\" help://:GCA:
.\" help://:GCA2:
.\" help://:GFILE:
.\" help://:GREV:
.\" help://:HASHCOUNT:
.\" help://:HOST:
.\" help://:HTML_AGE:
.\" help://:HTML_C:
.\" help://:ID:
.\" help://:IMPORTER:
.\" help://:KEY:
.\" help://:KID:
.\" help://:KIDS:
.\" help://:L:
.\" help://:LD:
.\" help://:LI:
.\" help://:LREV:
.\" help://:LU:
.\" help://:Ld:
.\" help://:Li:
.\" help://:Lu:
.\" help://:MD5KEY:
.\" help://:MERGE:
.\" help://:MGP:
.\" help://:MODE:
.\" help://:MPARENT:
.\" help://:N:
.\" help://:NEXT:
.\" help://:ODD:
.\" help://:PACKAGE_ID:
.\" help://:PARENT:
.\" help://:PREV:
.\" help://:PRODUCT_ID:
.\" help://:PRS:
.\" help://:R:
.\" help://:RANDOM:
.\" help://:REALHOST:
.\" help://:REALUSER:
.\" help://:RENAME:
.\" help://:REPO_ID:
.\" help://:REPOTYPE:
.\" help://:REV:
.\" help://:RI:
.\" help://:ROOTKEY:
.\" help://:RREV:
.\" help://:RWXMODE:
.\" help://:Rn:
.\" help://:Rx:
.\" help://:S:
.\" help://:SFILE:
.\" help://:SIBLINGS:
.\" help://:SPN:
.\" help://:SYMLINK:
.\" help://:T:
.\" help://:TAGGED:
.\" help://:TAGS:
.\" help://:TIME_T:
.\" help://:TIP:
.\" help://:TZ:
.\" help://:Th:
.\" help://:Tm:
.\" help://:Ts:
.\" help://:USER:
.\" help://:UTC:
.\" help://:UTC-FUDGE:
.\" help://:VERSION:
.\" END dspecs help links ## IMPORTANT: Do not edit or delete this line! ##
.\" XXX - break the dspec stuff into it's own man page and reference it
.\" XXX - verify that the examples are all correct, I think $each may be wrong
