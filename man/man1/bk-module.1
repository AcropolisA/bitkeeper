.so ../bk-macros
.TH "bk module" "\*[BKVER]" %E% "\*(BC" "\*(UM"
.SH NAME
bk module \- manage aliases for a list of components
.SH SYNOPSIS
.B bk module add|rm|list
.[B] -C
.[OPTreq] -M module
.[B] component ...
.br
.SS ADDING COMPONENTS TO A MODULE
.B bk module add
.[B] \-C
.OPTreq -M module
.B component 
.[B] component ...
.br
.SS REMOVING COMPONENT[S] FROM A MODULE
.B bk module rm
.[B] \-C
.OPTreq -M module
.B component 
.[B] component ...
.br
.SS REMOVING A MODULE
.B bk module rm
.[B] \-C
.OPTreq -M module
.br
.SS LIST ALL MODULE NAMES
.B bk module list
.SH DESCRIPTION
The 
.B bk module
command is used to create, modify, remove, or list modules.
A module is a symbolic name that resolves to one or more components (aka
sub-repositories in a product).
.SP
Module names are similar to C identifiers and must match this regular
expression:
.\" This is a lot more restrictive than we need to be
.\" but I figure we can loosen it easier than we can tighten it.
.DS
[A-Za-z][A-Za-z0-9_+-=]*
.DE
Each name expands to one or more components which were specified as follows:
.\"
.\" Capturing some IRC discussion:
.\" Modules and a repo that is in the top dir of the product create an
.\" ambiguity.  Add symbolic names for root keys and the ambiguity can 
.\" get worse because you could have
.\" symbolic name: foo -> some rootkey 
.\" module: foo -> a b c
.\" dir: foo -> some other root key
.\" So we need a way to make it clear what we mean.
.\" The precedence is as above, symbolic name, module, dir, and here is how
.\" we will disambiguate:
.\" -M./foo means the dir
.\" -M'$foo' means the module
.\" -Mfoo means the symbolic name
.\" All of that assumes we have symbolic names, which we don't yet, so we only
.\" have the two cases and -M./foo makes it clear from day one.
.\"
.TP "./gcc/* "
.B .
Reserved name that means only the product.
.tp
.B ./gcc
A relative path from the root of the product to the root of a component
means that component and only that component.
.tp
.B ./gcc/*
Another relative path form, with globbing support,
that gets all components below 
.BR gcc .
.tp
.B gcc
When the component name is a module name, it means look the name up in
the modules database and expand it.
Note that 
.B gcc 
means a module database entry and
.B ./gcc
means a path in the file system; they are not the same thing.
The former may expand to gcc, gdb, nm, etc., the latter expands to the
component at that location.
.LP
Each of the names found will be recursively expanded and may take any
of the forms described here.
For example, 
.B GCC
might point to the compiler and the assembler, and 
.B DEV
might point to 
.B GCC
and the debugger.
.LP
When adding a component to a module, if the module does not exist
it is automatically created in the modules file.
When removing a component from a module, if there are no other components
left in the module it is automatically deleted from the modules file.
.LP
When adding a component to a module the component must exist:
if it is a directory then the directory must exist,
if it is a module name then the module must exist in the modules file,
if it is a path name then the path must exist and be a component.
.SH OPTIONS
.TP \*<component\*>
.B \-C
Normally, modifying the modules file results in a changeset committing that
change.
This option suppresses the commit.
Use this option when you wish to combine the module event with other
changes to the product.
.tp
.OPTreq \-M module
Used to specify the name of the module in the module database to add, remove,
or modify.
.tp
.ARG component
Used to specify a component to add or remove.
.ARG component
may be any of the forms described above.
Multiple components may be specified for one invocation by repeating this
option.
.SH EXAMPLES
To create a module that points at some existing components:
.DS
$ bk module add -Mcompiler cmd/gcc cmd/as cmd/ld cmd/nm 
.DE
To create a higher level module that includes the debugger:
.DS
$ bk module add -Mdev-tools cmd/gdb compiler
.DE
List all modules:
.DS
$ bk module list
compiler
dev-tools
.DE
To remove a component from a module
.DS
$ bk module rm -Mcompiler cmd/nm
.DE
.SH NOTES
The modules database is a flat text file stored in
.IR BitKeeper/etc/modules .
Any components that are specified on the command line are stored internally
as their rootkeys and rootkeys may be used as the name of a component.
.SH "SEE ALSO"
.SA Howto-Product
.SA glob
.SA id
.SH CATEGORY
.B Product
.SH AVAILABILITY
This command is an optional feature of \*[BK]
and must be enabled in your license.
To see if your license has this enabled, run 
.DS
bk lease renew
bk lease show
.DE
If the options field has "product" or "product-line" listed then your
license has this feature enabled.
If not, contact BitMover sales.
.\" help://modules
