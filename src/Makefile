# Makefile for BitKeeper.
# @(#) %K%

# You can set this to anywhere you like and do a "make production" and you'll
# have an installed BitKeeper.
BINDIR	= /usr/libexec/bitkeeper

# UNIX/WIN32 (gcc/vc++) makefile portability macros
# These default values are for unix
SYS	=unix
BK=	bk 
CC_OUT	=-o $@
LD_OUT	=-o $@
LD	=cc
CC_FAST	=-O2
CC_DEBUG=-g
CC_FAST_DEBUG=-g -O
CC_NOFRAME=-fomit-frame-pointer
CC_WALL=-Wall -Wno-parentheses -Wno-char-subscripts
INSTALL=install
XTRA=
#UWTLIB is used on win32 only - passed in from build.sh
UWTLIB	=
UWT_H	=
WIN_TMP	=*.idb *.pdb *.ilk *.exe *~bkp
BINS	= $(BK)

# Override Solaris make.rules
.SCCS_GET:
	bk get -q $@

# This list is generated by building the tree and do a "find -name '*.o'",
# splitting it into generic, zlib, and mdbm parts.  Keep it sorted.
OBJ	= abort.o adler32.o admin.o annotate.o \
	  bkpowered.o dir_gif.o file_gif.o \
	  bkd.o bkd_cd.o bkd_client.o bkd_clone.o bkd_cmdtab.o \
	  bkd_http.o bkd_misc.o bkd_pull.o \
	  bkd_push.o bkd_pwd.o bkd_rootkey.o bkd_status.o \
	  bkd_version.o bk.o bkusers.o changes.o check.o chksum.o \
	  clean.o clone.o comments.o commit.o compress.o \
	  cset.o cset_inex.o delta.o diffs.o dirname.o export.o fdiff.o \
	  filecopy.o find.o fix.o g2sccs.o \
	  gca.o get.o gethelp.o gethost.o getopt.o \
	  gettemp.o getuser.o glob.o gnupatch.o graft.o grep.o \
	  help.o host.o isascii.o \
	  key2rev.o keysort.o lib_tcp.o libcommit.o libdiff.o librange.o \
	  libsfiles.o libusers.o lines.o localtm.o locking.o \
	  lod.o log.o logging.o merge.o mkdir.o mklock.o mmap.o \
	  mtime.o names.o newrev.o parent.o pending.o popen.o \
	  port/executable.o port/findprog.o port/fullname.o \
	  port/gethomedir.o port/gethost.o port/getinput.o \
	  port/mail.o port/platforminit.o \
	  port/randomBits.o port/samepath.o port/sccs_root.o \
	  port/spawn.o port/getnull.o port/http_proxy.o port/service.o \
	  prs.o pull.o purify.o push.o pwd.o r2c.o \
	  range.o rcs.o rcsparse.o rcs2sccs.o receive.o rechksum.o renumber.o \
	  lock.o resolve.o resolve_contents.o resolve_create.o \
	  resolve_flags.o resolve_generic.o resolve_modes.o \
	  resolve_renames.o resolve_filetypes.o rmdel.o rset.o \
	  sane.o sccs_mv.o sccscat.o sccslog.o sccsmv.o sccsrm.o \
	  send.o sendbug.o setup.o \
	  sfiles.o sfind.o sfio.o sinfo.o slib.o \
	  status.o stripdel.o takepatch.o undo.o undos.o \
	  unique.o unedit.o unlink.o unlock.o unwrap.o user.o utils.o \
	  version.o what.o zgets.o zone.o license.o trigger.o

MDBMOBJ	= mdbm/mdbm.o mdbm/hash.o mdbm/debug.o mdbm/byte_order.o
ZLIBOBJ	= zlib/adler32.o zlib/compress.o zlib/crc32.o zlib/deflate.o \
	  zlib/gzio.o zlib/infblock.o zlib/infcodes.o zlib/inffast.o \
	  zlib/inflate.o zlib/inftrees.o zlib/infutil.o zlib/trees.o \
	  zlib/uncompr.o zlib/zutil.o
SCRIPTS	= bk.script import resync uuwrap unuuwrap pmerge \
	  histtool citool _citool helptool difftool csettool fmtool fm3tool \
	  renametool setuptool gzip_uuwrap ungzip_uuwrap
LOCALSCR= testfast build crank
PSCR	= t/doit
UWTOBJ	= win32/uwtlib/wapi_intf.o win32/uwtlib/wcrt_intf.o
LIBS	= libsccs.a zlib/libz.a mdbm/libmdbm.a $(UWTLIB)
LINKS	= ci co edit unget
DATA	= bitkeeper.config bkmsg.txt bkhelp.txt bklogo.gif
LINKTO	= fm fmtool fm3 fm3tool
BINLINKS= bk admin get delta unget rmdel prs
# Note: $(XTRA) must be listed after "gnu"
ALL	= $(LIBS) $(BINS) $(SCRIPTS) $(LOCALSCR) $(PSCR) $(DATA) gnu $(XTRA)

# FASTPURIFY does not do overrun/underrun checking at each alloc/free
CFLAGS	= $(CC_FAST_DEBUG) $(CC_WALL) \
	  -DPURIFY -DPURIFY_FILES -DPURIFY_MDBM -DFASTPURIFY
CPPFLAGS= -Izlib -Imdbm
# For extra libraries required by the system, e.g. libnsl.
XLIBS	=
LINK_LIB= $(XLIBS) $(LSCCS) $(LMDBM) $(LZLIB)
LSCCS	= -L. -lsccs
LMDBM	= -Lmdbm -lmdbm
LZLIB	= -Lzlib -lz
# Override this if you don't have it.
RANLIB	= ranlib
SRCS	= $(OBJ:.o=.c) $(MDBMOBJ:.o=.c) $(ZLIBOBJ:.o=.c) 
HDRS	= bkd.h lib_tcp.h mmap.h logging.h purify.h range.h resolve.h sccs.h \
	  system.h $(SYS).h mdbm/common.h mdbm/mdbm.h mdbm/tune.h zgets.h \
	  zlib/deflate.h zlib/infblock.h zlib/infcodes.h zlib/inffast.h \
	  zlib/inffixed.h zlib/inftrees.h zlib/infutil.h zlib/trees.h \
	  zlib/zconf.h zlib/zlib.h zlib/zutil.h
SCRSRCS	= testfast.perl bk.sh import.sh clone.sh \
	  gui/histtool.tcl gui/citool.tcl gui/difftool.tcl \
	  gui/vitool.tcl gui/fmtool.tcl gui/fm3tool.tcl \
	  gui/helptool.tcl uuwrap.sh gui/setuptool.tcl \
	  gui/_citool.tcl gui/progress.tcl gui/search.tcl \
	  unuuwrap.sh port/unix_platform.sh port/unix_platform.tcl \
	  port/unix_platform.perl pmerge.perl gui/csettool.tcl \
	  port/win32_platform.perl port/win32_platform.tcl \
	  port/win32_platform.sh gui/renametool.tcl \
	  gzip_uuwrap.sh ungzip_uuwrap.sh resync.sh substvars.sh
MISC	= bkmsg.doc bitkeeper.config t/doit.sh

default:
	-if [ `uname -s` = "CYGWIN_NT-4.0" ];\
	then PAGER=less; \
	else PAGER=more; \
	fi; \
	bk get -qp HEADER LICENSE BUILD.txt | $${PAGER}

all: $(ALL)

FREQ=50
purify-mem:
	$(MAKE) CFLAGS="-g $O -DPURIFY -DPURIFY_FREQ=$(FREQ)" all
purify+files:
	$(MAKE) CFLAGS="-g $O -DPURIFY -DPURIFY_FILES -DPURIFY_FREQ=$(FREQ)" all
purify+mdbm:
	$(MAKE) CFLAGS="-g $O -DPURIFY -DPURIFY_MDBM -DPURIFY_FREQ=$(FREQ)" all
purify:
	$(MAKE) CFLAGS="-g $O -DPURIFY -DPURIFY_FILES -DPURIFY_MDBM -DPURIFY_FREQ=$(FREQ)" all
PURIFY:
	$(MAKE) CFLAGS="-g $O -DPURIFY -DPURIFY_FILES -DPURIFY_MDBM -DPURIFY_FREQ=1" all
gprof:
	$(MAKE) CFLAGS="-g -pg -O2" LDFLAGS=-pg all
# Debugging...
d:
	$(MAKE) CFLAGS="-g -DDEBUG" all
dp debug:
	$(MAKE) CFLAGS="-g -DPURIFY -DDEBUG" all
dp2 debug2:
	$(MAKE) CFLAGS="-g -DPURIFY -DDEBUG2" all

# -Wno-parentheses shuts up "suggest parentheses around assignment ...".
# Unfortunately it also turns off dangling else warnings.
# -Wno-char-subscripts shuts up "subscript has type char", which comes
# up all the time with broken <ctype.h> implementations.  (To be turned
# back on for 1.1 or so.)
Wall:
	$(MAKE) CFLAGS="-g -DWALL -DLINT -Wall -Wno-parentheses -Wno-char-subscripts -DPURIFY" all

# production builds
p:
	$(MAKE) CFLAGS="$(CC_FAST) $(CC_NOFRAME) $(CF)" all
ndebug:
	$(MAKE) CFLAGS="$(CC_FAST) -DNDEBUG $(CC_NOFRAME)" all
stats:
	$(MAKE) CFLAGS="$(CC_FAST) -DPURIFY_STATS $(CC_NOFRAME)" all
g:
	$(MAKE) CFLAGS="$(CC_DEBUG)" all
gO:
	$(MAKE) CFLAGS="$(CC_FAST_DEBUG)" all

production_all:
	$(MAKE) production_g prefix=$(BINDIR)/g
	$(MAKE) production_debug prefix=$(BINDIR)/debug
	$(MAKE) production_purify prefix=$(BINDIR)/purify
	$(MAKE) production

production: rebuild p $(INSTALL)
production_g: rebuild gO $(INSTALL)
production_debug: rebuild debug $(INSTALL)
production_ndebug: rebuild ndebug $(INSTALL)
production_purify: rebuild purify $(INSTALL)
production_image: rebuild p image

# Cleanup targets.
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Read the checkin comments on this delta before changing this.
clean-obj: FORCE
	-@rm -f bk.o shell.o cscope.out $(OBJ) $(MDBMOBJ) $(ZLIBOBJ) 
	-@rm -f bk.ver substvars gnu/config.cache config.h config.log config.sub
	-@rm -f $(LIBS) shell.c bkdsubstr bkmsg.txt bkhelp.txt a.out core $(WIN_TMP)
	-@cd gnu && $(MAKE) clean-obj
	-@cd win32 && $(MAKE) clean-obj

clean-bin: FORCE
	-@rm -f $(BINS) $(SCRIPTS) $(LOCALSCR) $(PSCR) $(LINKS) MANIFEST
	-@cd gnu && $(MAKE) clean 
	-@cd win32 && $(MAKE) clean
	cd t && rm -f doit

clean clobber distclean: rebuild FORCE
	-@bk -r clean
	-@rm -f tags TAGS

rebuild:
	-@rm -f bk.o shell.o cscope.out $(OBJ) $(MDBMOBJ) $(ZLIBOBJ) 
	-@rm -f bk.ver substvars gnu/config.cache config.h config.log config.sub
	-@rm -f $(LIBS) shell.c bkdsubstr bkhelp.txt bkmsg.txt a.out core $(WIN_TMP)
	-@rm -f $(BINS) $(SCRIPTS) $(LOCALSCR) $(PSCR) $(LINKS) MANIFEST
	-@cd gnu && $(MAKE) clean clean-obj
	-@cd win32 && $(MAKE) clean clean-obj
	cd t && rm -f doit

srcs src: FORCE
	-bk get -s $(HDRS) $(SRCS) $(SCRSRCS) $(MISC)

wc: $(HDRS) $(SRCS) $(SCRSRCS) $(MISC)
	wc -l $(SRCS) $(HDRS) $(SCRSRCS) $(MISC)

get-e: FORCE
	-@bk get -es `echo $(HDRS) $(SRCS) $(SCRSRCS) $(MISC) | fmt -1 | sort -u`
	$(MAKE) tags

log: FORCE
	-if [ `uname -s` = "CYGWIN_NT-4.0" ];\
	then PAGER=less; \
	else PAGER=more; \
	fi; \
	bk sccslog $(SRCS) $(HDRS) | $${PAGER}

tags: FORCE
	@for i in $(SRCS) $(HDRS) $(SCRSRCS) $(MISC); \
	do	if [ ! -f $$i ]; then bk get -s $$i; fi; \
	done
	@ctags --file-tags=yes --c-types=d+f+s+t $(SRCS) $(HDRS)
	@echo ctags completed


TAGS: srcs
	@for i in $(SRCS) $(HDRS) $(SCRSRCS) $(MISC); \
	do	if [ ! -f $$i ]; then bk get -s $$i; fi; \
	done
	@etags $(SRCS) $(HDRS)
	@echo etags completed

ssh sshtest:
	$(MAKE) realtest

test tests rsh rshtest:
	PREFER_RSH=YES $(MAKE) realtest

realtest: $(ALL) t/doit
	-./bk get -q t/SCCS/s.t.* t/setup t/x.chk_env
	cd t && ./doit

t/doit: t/doit.sh substvars
	./substvars t/doit.sh > t/doit
	chmod +x t/doit

FORCE:

gnu: $(BK) FORCE
	@if uname -s | grep _NT; \
	then cd gnu && $(MAKE) BINDIR=$(BINDIR) DIFF_BINS= DIRS=patch ;\
	else cd gnu && $(MAKE) BINDIR=$(BINDIR) ;\
	fi

win32: FORCE
	cd win32 && $(MAKE) BINDIR=$(BINDIR)
win32/uwtlib/libuwt.a: FORCE
	cd win32/uwtlib && make 
zlib/libz.a: $(ZLIBOBJ)
	$(AR) cr zlib/libz.a $(ZLIBOBJ)
	-$(RANLIB) zlib/libz.a
mdbm/libmdbm.a: $(MDBMOBJ)
	$(AR) cr mdbm/libmdbm.a $(MDBMOBJ)
	-$(RANLIB) mdbm/libmdbm.a
libsccs.a: $(OBJ) shell.o
	$(AR) cr libsccs.a $(OBJ) shell.o
	-$(RANLIB) libsccs.a
$(BK): bk.o $(LIBS)
	$(LD) $(LDFLAGS) $(LD_OUT) bk.o $(LINK_LIB)

testfast: testfast.perl
	rm -f testfast
	cp testfast.perl testfast
	chmod +x testfast

bk.script: bk.sh port/$(SYS)_platform.sh substvars
	./substvars port/$(SYS)_platform.sh bk.sh > bk.script
	chmod +x bk.script 

bkmsg.txt: bkmsg.doc bk.ver Makefile
	sed "s/@version@/`cat bk.ver`/" bkmsg.doc | \
	sed "s?@builder@?`./bk getuser`@`./bk gethost`?" | \
	sed "s/@built_date@/`date`/" > bkmsg.txt

bkhelp.txt: ../man/man2help/helptxt
	cp ../man/man2help/helptxt bkhelp.txt

../man/man2help/helptxt:
	cd ../man/man2help && make helptxt

# XXX Must be changed when ChangeSet moves to BitKeeper/etc.
# It is structured like this so that rebuilding prs doesn't
# force bk.ver (and thus the bk script) to be regenerated.
bk.ver: ../SCCS/s.ChangeSet utils/os utils/gnu-os
	( echo \
	  `./bk prs -hr+ -d'$$if(:SYMBOL:){:SYMBOL: }:UTC:' ../ChangeSet;` \
	  for \
	  `sh ./utils/os` \
	) >bk.v
	mv -f bk.v bk.ver

# Because we need the execute bit on
utils/os utils/gnu-os: $(BK)
	@if [ ! -x utils/os ]; then ./bk get utils/os; fi
	@if [ ! -x utils/gnu-os ]; then ./bk get utils/gnu-os; fi

substvars: substvars.sh
	rm -f substvars
	cp substvars.sh substvars
	chmod +x substvars

uuwrap: uuwrap.sh
	rm -f uuwrap
	cp uuwrap.sh uuwrap
	chmod +x uuwrap

unuuwrap: unuuwrap.sh
	rm -f unuuwrap
	cp unuuwrap.sh unuuwrap
	chmod +x unuuwrap

gzip_uuwrap: gzip_uuwrap.sh
	rm -f gzip_uuwrap
	cp gzip_uuwrap.sh gzip_uuwrap
	chmod +x gzip_uuwrap

ungzip_uuwrap: ungzip_uuwrap.sh
	rm -f ungzip_uuwrap
	cp ungzip_uuwrap.sh ungzip_uuwrap
	chmod +x ungzip_uuwrap

import: import.sh port/$(SYS)_platform.sh substvars
	./substvars port/$(SYS)_platform.sh import.sh > import.T
	chmod +x import.T
	mv -f import.T import

pmerge: pmerge.perl port/$(SYS)_platform.perl
	cat pmerge.perl port/$(SYS)_platform.perl > pmerge
	chmod +x pmerge

resync: resync.sh
	rm -f resync
	cp resync.sh resync
	chmod +x resync
	chmod -w resync

bkdsubstr: bkd.h
	grep BKD_VERSION bkd.h | sed -e 's/.*"b/b/' -e 's/".*//' > _bkdvers
	echo "#!/bin/sh" > bkdsubstr
	echo "sed 's/@BKD_VERSION@/`cat _bkdvers`/'" >> bkdsubstr
	rm _bkdvers
	chmod +x bkdsubstr

histtool: gui/search.tcl gui/config.tcl gui/histtool.tcl gui/common.tcl \
    	port/$(SYS)_platform.tcl
	cat port/$(SYS)_platform.tcl gui/config.tcl gui/common.tcl \
	    gui/search.tcl gui/histtool.tcl > histtool

citool: gui/citool.tcl gui/common.tcl gui/progress.tcl port/$(SYS)_platform.tcl
	cat port/$(SYS)_platform.tcl gui/common.tcl gui/progress.tcl \
	    gui/citool.tcl > citool

_citool: gui/_citool.tcl gui/config.tcl gui/common.tcl port/$(SYS)_platform.tcl
	cat port/$(SYS)_platform.tcl gui/config.tcl gui/common.tcl \
	    gui/_citool.tcl > _citool

setuptool: gui/setuptool.tcl gui/config.tcl gui/common.tcl \
	port/$(SYS)_platform.tcl
	cat port/$(SYS)_platform.tcl gui/common.tcl gui/config.tcl \
	    gui/setuptool.tcl > setuptool

helptool: gui/helptool.tcl gui/config.tcl port/$(SYS)_platform.tcl \
	gui/common.tcl
	cat port/$(SYS)_platform.tcl gui/config.tcl gui/common.tcl \
	    gui/helptool.tcl > helptool

difftool: gui/search.tcl gui/config.tcl gui/difftool.tcl \
	port/$(SYS)_platform.tcl gui/common.tcl
	cat gui/search.tcl port/$(SYS)_platform.tcl gui/config.tcl \
	    gui/common.tcl gui/difftool.tcl > difftool

csettool: gui/csettool.tcl gui/config.tcl gui/common.tcl \
	port/$(SYS)_platform.tcl
	cat port/$(SYS)_platform.tcl gui/config.tcl gui/common.tcl \
	    gui/csettool.tcl > csettool

renametool: gui/renametool.tcl gui/config.tcl port/$(SYS)_platform.tcl \
	gui/common.tcl
	cat port/$(SYS)_platform.tcl gui/config.tcl gui/common.tcl \
	    gui/renametool.tcl > renametool

fmtool: gui/fmtool.tcl gui/config.tcl port/$(SYS)_platform.tcl \
	gui/common.tcl
	cat port/$(SYS)_platform.tcl gui/config.tcl gui/common.tcl \
	    gui/fmtool.tcl > fmtool

fm3tool: gui/fm3tool.tcl gui/config.tcl gui/common.tcl
	cat gui/config.tcl gui/common.tcl gui/fm3tool.tcl > fm3tool

# Touch this and die.  --lm
install: install-nolinks
	@if uname -s | grep _NT; \
	then	LN=cp; EXE=.exe; \
	else	LN=ln; EXE=; \
	fi; \
	for file in $(BINLINKS); \
	do	if [ $$file != bk ]; \
		then	rm -f $(BINDIR)/$$file$$EXE; \
			$$LN $(BINDIR)/bk$$EXE $(BINDIR)/$$file$$EXE; \
		fi; \
	done; \
	if [ -w /usr/bin ]; \
	then	for file in $(BINLINKS); \
		do	rm -f /usr/bin/$$file; \
			ln -s $(BINDIR)/$$file /usr/bin/$$file; \
		done; \
	fi; \

install-nolinks: all
	@test -d $(BINDIR) || mkdir -p $(BINDIR)
	@cp -f $(BINS) $(SCRIPTS) $(DATA) $(BINDIR)
	@-rm -rf $(BINDIR)/t/t.*
	@if [ ! -d $(BINDIR)/t ]; \
	then	mkdir $(BINDIR)/t; \
	fi
	@-./bk get -q t/SCCS/s.t.* t/setup t/x.chk_env
	@cp -f t/doit t/t.* t/setup t/x.chk_env $(BINDIR)/t
	@./bk chksum $(BINS) $(SCRIPTS) $(DATA) t/doit t/t.* t/setup \
		| sort > $(BINDIR)/MANIFEST
	@set `echo $(LINKTO)`; \
	while [ "X$$1" != X ]; \
	do	rm -f $(BINDIR)/$$1; \
		ln $(BINDIR)/$$2 $(BINDIR)/$$1; \
		shift; shift; \
	done
	@if uname -s | grep _NT; \
	then cd gnu && $(MAKE) install BINDIR=$(BINDIR) DIFF_BINS= DIRS=patch ;\
	else cd gnu && $(MAKE) install BINDIR=$(BINDIR) ;\
	fi
	@if uname -s | grep _NT; \
	then cd win32 && $(MAKE) BINDIR=$(BINDIR) install; \
	fi

image: all
	-rm -rf tmp/bitkeeper
	DIR=`pwd`/tmp/bitkeeper; set -e; \
	$(MAKE) install-nolinks BINDIR=$$DIR; \
	cd utils && $(MAKE) image BINDIR=$$DIR

# Rules for test builds.
HOSTS	= `chosts build`

crankit:
	@cwd=`pwd`; set -x; \
	for host in $(HOSTS); \
	do	time rsh $$host "cd $$cwd && $(CRANKCMD)" & \
	done; wait

crankturn: build crank
	$(MAKE) HOSTS="$(HOSTS)" CRANKCMD=./crank crankit

cranktest:
	$(MAKE) HOSTS="$(HOSTS)" CRANKCMD="bk regression" crankit

# It is OK if we fail to "rm buld" on win32.
# We can not "rm build " when we are running it.
build: build.sh
	-rm -f build
	-cp build.sh build
	-chmod +x build
	-chmod -w build

crank: crank.sh
	rm -f crank
	cp crank.sh crank
	chmod +x crank
	chmod -w crank

# The default .c.o rule is broken with some Makes.
.c.o:
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< $(CC_OUT)

depend: $(SRCS)
	$(CC) -MM -MG -D_DEPEND $(SRCS) > depends

H=system.h $(SYS).h mdbm/mdbm.h purify.h sccs.h logging.h mmap.h $(UWT_H)
B=bkd.h lib_tcp.h
M=mdbm/common.h mdbm/tune.h mdbm/mdbm.h
Z=zlib/zlib.h zlib/zconf.h

shell.o: substvars
	echo 'char *shell() { return ("@FEATURE_SH@"); }' | \
							./substvars > shell.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -c shell.c $(CC_OUT)

abort.o:	abort.c $(H) $(Z)
adler32.o:	adler32.c $(H) $(Z)
admin.o:	admin.c $(H)
annotate.o:	annotate.c $(H)
bk.o:		bk.c $(H)
bkd.o:		bkd.c $(B) $(H) $(Z)
bkd_cd.o:	bkd_cd.c $(B) $(H) $(Z)
bkd_client.o:	bkd_client.c $(B) $(H) $(Z)
bkd_clone.o:	bkd_clone.c $(B) $(H) $(Z)
bkd_cmdtab.o:	bkd_cmdtab.c $(B) $(H) $(Z)
bkd_misc.o:	bkd_misc.c $(B) $(H) $(Z)
bkd_pull.o:	bkd_pull.c $(B) $(H) $(Z)
bkd_push.o:	bkd_push.c $(B) $(H) $(Z)
bkd_pwd.o:	bkd_pwd.c $(B) $(H) $(Z)
bkd_rootkey.o:	bkd_rootkey.c $(B) $(H) $(Z)
bkd_status.o:	bkd_status.c $(B) $(H) $(Z)
bkd_version.o:	bkd_version.c $(B) $(H) $(Z)
bkusers.o:	bkusers.c $(H)
changes.o:	changes.c $(H)
check.o:	check.c $(H) range.h
chksum.o:	chksum.c
clean.o:	clean.c $(H)
clone.o:	clone.c $(B) $(H) $(Z)
comments.o:	comments.c $(H)
commit.o:	commit.c $(H)
compress.o:	compress.c $(B) $(H) $(Z)
cset.o:		cset.c $(H) range.h $(Z)
cset_inex.o:	cset_inex.c $(H) $(Z)
delta.o:	delta.c $(H)
diffs.o:	diffs.c $(H) range.h
dirname.o:	dirname.c
export.o:	export.c $(H)
fdiff.o:	fdiff.c $(H)
files.o:	files.c $(H)
filecopy.o:	filecopy.c $(H)
fix.o:		fix.c $(H)
fullname.o:	port/fullname.c $(H)
g2sccs.o:	g2sccs.c $(H)
gca.o:		gca.c $(H)
get.o:		get.c $(H)
gethelp.o:	gethelp.c $(H)
gethost.o:	gethost.c
gethost.o:	port/gethost.c $(H)
getinput.o:	port/getinput.c $(H)
getopt.o:	getopt.c $(H)
gettemp.o:	gettemp.c $(H)
getuser.o:	getuser.c
glob.o:		glob.c $(H)
graft.o:	graft.c $(H)
grep.o:		grep.c $(H)
help.o:		help.c $(H)
host.o:		host.c $(H)
isascii.o:	isascii.c
key2rev.o:	key2rev.c $(H)
keysort.o:	keysort.c $(H)
lib_tcp.o:	lib_tcp.c lib_tcp.h
libcommit.o:	libcommit.c $(H)
libdiff.o:	libdiff.c $(H)
librange.o:	librange.c $(H) range.h
libsfiles.o:	libsfiles.c $(H)
libusers.o:	libusers.c $(H) range.h
license.o:	license.c $(H)
lines.o:	lines.c $(H)
localtm.o:	localtm.c $(H)
lock.o:		lock.c $(H)
locking.o:	locking.c $(H)
log.o:		log.c $(H)
logging.o:	logging.c $(H)
lod.o:		lod.c $(H) range.h $(Z)
logaddr.o:	logaddr.c $(H)
merge.o:	merge.c $(H)
mkdir.o:	mkdir.c $(H)
mmap.o:		mmap.c $(H)
mtime.o:	mtime.c
names.o:	names.c $(H)
newrev.o:	newrev.c $(H)
parent.o:	parent.c $(H)
pending.o:	pending.c $(H)
popen.o:	popen.c $(H)
port/findprog.o:	port/findprog.c $(H) 
port/fullname.o:	port/fullname.c $(H)
port/gethost.o:	port/gethost.c $(H)
port/getinput.o:	port/getinput.c $(H)
port/platforminit.o:	port/platforminit.c $(H)
port/randomBits.o:	port/randomBits.c $(H)
port/samepath.o:	port/samepath.c $(H)
port/sccs_root.o:	port/sccs_root.c $(H)
port/spawn.o:	port/spawn.c $(H)
prs.o:		prs.c $(H) range.h
pull.o:		pull.c $(B) $(H) $(Z)
purify.o:	purify.c $(H)
push.o:		push.c $(B) $(H) $(Z)
r2c.o:		r2c.c $(H) range.h
randomBits.o:	port/randomBits.c $(H)
range.o:	range.c $(H) range.h
rcs.o:		rcs.c $(H)
rcsparse.o:	rcsparse.c $(H) rcs.h
rcs2sccs.o:	rcs2sccs.c $(H) rcs.h
receive.o:	receive.c $(H)
rechksum.o:	rechksum.c $(H)
renumber.o:	renumber.c $(H)
resolve.o:	resolve.c resolve.h $(H)
resolve_contents.o:	resolve_contents.c resolve.h $(H)
resolve_create.o:	resolve_create.c resolve.h $(H)
resolve_flags.o:	resolve_flags.c resolve.h $(H)
resolve_generic.o:	resolve_generic.c resolve.h $(H)
resolve_modes.o:	resolve_modes.c resolve.h $(H)
resolve_renames.o:	resolve_renames.c resolve.h $(H)
resolve_filetypes.o:	resolve_filetypes.c resolve.h $(H)
rmdel.o:	rmdel.c $(H)
samepath.o:	port/samepath.c $(H)
sane.o:		sane.c $(H)
sccs_mv.o:	sccs_mv.c $(H)
sccs_root.o:	port/sccs_root.c $(H)
sccscat.o:	sccscat.c $(H) range.h
sccslog.o:	sccslog.c $(H) range.h
sccsmv.o:	sccsmv.c $(H)
sccsrm.o:	sccsrm.c $(H)
send.o:		send.c $(H)
sendbug.o:	sendbug.c $(H)
setup.o:	setup.c $(H)
sfiles.o:	sfiles.c $(H)
sfio.o:		sfio.c $(H) $(Z)
sinfo.o:	sinfo.c $(H)
slib.o:		slib.c $(H) zgets.h
spawn.o:	port/spawn.c $(H)
status.o:	status.c $(H)
stripdel.o:	stripdel.c $(H) range.h
takepatch.o:	takepatch.c $(H) $(Z)
trigger.o:	trigger.c $(H)
undo.o:		undo.c $(H)
undos.o:	undos.c
unedit.o:	unedit.c $(H)
unique.o:	unique.c $(H)
unlink.o:	unlink.c $(H)
unlock.o:	unlock.c $(H)
unwrap.o:	unwrap.c $(H)
user.o:		user.c $(H)
utils.o:	utils.c $(B) $(H) $(Z)
version.o:	version.c
what.o:		what.c $(H)
zgets.o:	zgets.c $(Z) zgets.h
zone.o:		zone.c $(H)

mdbm/mdbm.o:	mdbm/mdbm.c $(M)
mdbm/hash.o:	mdbm/hash.c mdbm/mdbm.h
mdbm/debug.o:	mdbm/debug.c $(M)

Z2	=	zlib/deflate.h zlib/infblock.h zlib/infblock.h \
		zlib/infcodes.h zlib/infcodes.h zlib/inffast.h \
		zlib/inffixed.h zlib/inftrees.h zlib/inftrees.h \
		zlib/infutil.h zlib/infutil.h zlib/trees.h zlib/zconf.h \
		zlib/zconf.h zlib/zlib.h zlib/zutil.h zlib/zutil.h

zlib/adler32.o:		zlib/adler32.c $(Z2)
zlib/compress.o:	zlib/compress.c $(Z2)
zlib/crc32.o:		zlib/crc32.c $(Z2)
zlib/deflate.o:		zlib/deflate.c $(Z2)
zlib/gzio.o:		zlib/gzio.c $(Z2)
zlib/infblock.o:	zlib/infblock.c $(Z2)
zlib/infcodes.o:	zlib/infcodes.c $(Z2)
zlib/inffast.o:		zlib/inffast.c $(Z2)
zlib/inflate.o:		zlib/inflate.c $(Z2)
zlib/inftrees.o:	zlib/inftrees.c $(Z2)
zlib/infutil.o:		zlib/infutil.c $(Z2)
zlib/trees.o:		zlib/trees.c $(Z2)
zlib/uncompr.o:		zlib/uncompr.c $(Z2)
zlib/zutil.o:		zlib/zutil.c $(Z2)

