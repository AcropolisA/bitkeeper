# Makefile for BitKeeper.
# @(#) %K%

# You can set this to anywhere you like and do a "make production" and you'll
# have an installed BitKeeper.
BINDIR	= /usr/libexec/bitkeeper
BINS	= bk

# This list is generated by building the tree and do a "find -name '*.o'",
# splitting it into generic, zlib, and mdbm parts.  Keep it sorted.
OBJ	= adler32.o admin.o bkd.o bkd_cd.o bkd_client.o \
	  bkd_clone.o bkd_cmdtab.o bkd_misc.o bkd_pull.o \
	  bkd_push.o bkd_pwd.o bkd_rootkey.o bkd_status.o \
	  bkd_version.o bk.o bkusers.o check.o chksum.o \
	  clean.o clone.o comments.o commit.o compress.o \
	  cset.o delta.o diffs.o dirname.o export.o fdiff.o \
	  filecopy.o files.o finddirs.o fix.o g2sccs.o \
	  gca.o get.o gethelp.o gethost.o getlog.o getopt.o \
	  gettemp.o getuser.o glob.o help.o host.o isascii.o \
	  key2rev.o lib_tcp.o libcommit.o libdiff.o librange.o \
	  libsfiles.o libusers.o lines.o localtm.o locking.o \
	  lod.o logaddr.o logchangeset.o mkdir.o mmap.o \
	  mtime.o names.o newrev.o parent.o pending.o popen.o \
	  port/disksp.o port/findprog.o port/fullname.o \
	  port/gethost.o port/getinput.o port/platforminit.o \
	  port/randomBits.o port/samepath.o port/sccs_root.o \
	  port/spawn.o prs.o pull.o purify.o push.o r2c.o \
	  range.o rcs.o receive.o rechksum.o renumber.o \
	  repo.o resolve.o resolve_contents.o resolve_create.o \
	  resolve_flags.o resolve_generic.o resolve_modes.o \
	  resolve_renames.o resolve_filetypes.o rmdel.o \
	  sccs_mv.o sccscat.o sccslog.o sccsmv.o sccsrm.o \
	  send.o sendbug.o sendconfig.o setlog.o setup.o \
	  sfiles.o sfio.o sids.o sinfo.o slib.o smoosh.o \
	  status.o stripdel.o takepatch.o undo.o undos.o \
	  unique.o unedit.o unlock.o unwrap.o user.o utils.o \
	  version.o what.o zgets.o zone.o license.o

MDBMOBJ	= mdbm/mdbm.o mdbm/hash.o mdbm/debug.o
ZLIBOBJ	= zlib/adler32.o zlib/compress.o zlib/crc32.o zlib/deflate.o \
	  zlib/gzio.o zlib/infblock.o zlib/infcodes.o zlib/inffast.o \
	  zlib/inflate.o zlib/inftrees.o zlib/infutil.o zlib/trees.o \
	  zlib/uncompr.o zlib/zutil.o
SCRIPTS	= rcs2sccs bk.script import resync uuwrap unuuwrap pmerge \
	  sccstool citool helptool difftool csettool fm fm3 \
	  renametool mkdiffs lodset bkmerge gzip_uuwrap ungzip_uuwrap
LOCALSCR= testfast mkindex build crank
PSCR	= t/doit
LIBS	= libsccs.a zlib/libz.a mdbm/libmdbm.a
LINKS	= ci co edit unget
DATA	= bitkeeper.config bkhelp.txt
LINKTO	= fmtool fm fm3tool fm3
BINLINKS= bk admin get delta unget rmdel prs
ALL	= $(LIBS) $(BINS) $(SCRIPTS) $(LOCALSCR) $(PSCR) $(DATA) gnu

# FASTPURIFY does not do overrun/underrun checking at each alloc/free
CFLAGS	= -g -O -Wall -Wno-parentheses -Wno-char-subscripts \
	  -DPURIFY -DPURIFY_FILES -DPURIFY_MDBM -DFASTPURIFY
CPPFLAGS= -Izlib -Imdbm
# For extra libraries required by the system, e.g. libnsl.
XLIBS	=
LINK	= $(XLIBS) $(LSCCS) $(LMDBM) $(LZLIB)
LSCCS	= -L. -lsccs
LMDBM	= -Lmdbm -lmdbm
LZLIB	= -Lzlib -lz
# Override this if you don't have it.
RANLIB	= ranlib
SRCS	= $(OBJ:.o=.c) $(MDBMOBJ:.o=.c) $(ZLIBOBJ:.o=.c) 
HDRS	= bkd.h lib_tcp.h mmap.h purify.h range.h resolve.h sccs.h \
	  system.h unix.h mdbm/common.h mdbm/mdbm.h mdbm/tune.h zgets.h \
	  zlib/deflate.h zlib/infblock.h zlib/infcodes.h zlib/inffast.h \
	  zlib/inffixed.h zlib/inftrees.h zlib/infutil.h zlib/trees.h \
	  zlib/zconf.h zlib/zlib.h zlib/zutil.h
SCRSRCS	= rcs2sccs.perl testfast.perl bk.sh import.sh clone.sh \
	  resolve.perl gui/sccstool.tcl gui/citool.tcl gui/difftool.tcl \
	  gui/vitool.tcl gui/fm.tcl gui/fm3.tcl \
	  gui/helptool.tcl gui/mkindex.tcl oldresync.perl uuwrap.sh \
	  unuuwrap.sh port/unix_platform.sh port/unix_platform.tcl \
	  port/unix_platform.perl pmerge.perl gui/csettool.tcl \
	  port/win32_platform.perl port/win32_platform.tcl \
	  port/win32_platform.sh gui/renametool.tcl bkmerge.sh \
	  gzip_uuwrap.sh ungzip_uuwrap.sh resync.sh
MISC	= bkhelp.doc config.h.in configure substvars.in bitkeeper.config \
	  t/doit.sh

default:
	@bk get -s HEADER LICENSE BUILD
	@cat HEADER LICENSE BUILD | more

all: $(ALL)

purify-mem:
	$(MAKE) CFLAGS="-g $O -DPURIFY -DPURIFY_FREQ=50" all
purify+files:
	$(MAKE) CFLAGS="-g $O -DPURIFY -DPURIFY_FILES -DPURIFY_FREQ=50" all
purify+mdbm:
	$(MAKE) CFLAGS="-g $O -DPURIFY -DPURIFY_MDBM -DPURIFY_FREQ=50" all
purify:
	$(MAKE) CFLAGS="-g $O -DPURIFY -DPURIFY_FILES -DPURIFY_MDBM -DPURIFY_FREQ=50" all
gprof:
	$(MAKE) CFLAGS="-g -pg -O2" all
# Recent gcc only profiles libc if you do it this way.
# Note - profiling libc is incompatible with use of system zlib.
gproflib:
	$(MAKE) CFLAGS="-g -profile -O2" LZLIB="-Lzlib -lz" all

# Debugging...
d:
	$(MAKE) CFLAGS="-g -DDEBUG" all
dp debug:
	$(MAKE) CFLAGS="-g -DPURIFY -DDEBUG" all
dp2 debug2:
	$(MAKE) CFLAGS="-g -DPURIFY -DDEBUG2" all

# -Wno-parentheses shuts up "suggest parentheses around assignment ...".
# Unfortunately it also turns off dangling else warnings.
# -Wno-char-subscripts shuts up "subscript has type char", which comes
# up all the time with broken <ctype.h> implementations.  (To be turned
# back on for 1.1 or so.)
Wall:
	$(MAKE) CFLAGS="-g -DWALL -DLINT -Wall -Wno-parentheses -Wno-char-subscripts -DPURIFY" all

# production builds
p:
	$(MAKE) CFLAGS="-O2 -fomit-frame-pointer $(CF)" all
ndebug:
	$(MAKE) CFLAGS="-O2 -DNDEBUG -fomit-frame-pointer" all
stats:
	$(MAKE) CFLAGS="-O2 -DPURIFY_STATS -fomit-frame-pointer" all
g:
	$(MAKE) CFLAGS="-g" all
gO:
	$(MAKE) CFLAGS="-g -O" all

production_all:
	$(MAKE) production_g prefix=$(BINDIR)/g
	$(MAKE) production_debug prefix=$(BINDIR)/debug
	$(MAKE) production_purify prefix=$(BINDIR)/purify
	$(MAKE) production

production: rebuild p install
production_g: rebuild gO install
production_debug: rebuild debug install
production_ndebug: rebuild ndebug install
production_purify: rebuild purify install
production_image: rebuild p image

# Cleanup targets.
clean-obj: FORCE
	-/bin/rm -f $(OBJ) $(MDBMOBJ) $(ZLIBOBJ) 
	-/bin/rm -f $(LIBS) bkdsubstr bkhelp.txt a.out core
	-cd gnu && $(MAKE) clean-obj

clean-bin: FORCE
	-/bin/rm -f $(BINS) $(SCRIPTS) $(LOCALSCR) $(PSCR) $(LINKS) MANIFEST
	cd gnu && $(MAKE) clean

clean-cfg: FORCE
	-/bin/rm -f config.h stamp-h substvars config.status \
	    config.cache config.log bk.ver stamp-ver

clean-src: FORCE
	-bk -r . clean
	-/bin/rm -f tags TAGS

# This would be called "clean" but that's a command name.
cclean sccsclean nice: clean-obj clean-src

clobber distclean: clean-obj clean-bin clean-cfg clean-src

rebuild: clean-obj clean-bin

srcs src: FORCE
	-bk get -s $(HDRS) $(SRCS) $(SCRSRCS) $(MISC)

wc: $(HDRS) $(SRCS) $(SCRSRCS) $(MISC)
	wc -l $(SRCS) $(HDRS) $(SCRSRCS) $(MISC)

get-e: FORCE
	-@bk get -es `echo $(HDRS) $(SRCS) $(SCRSRCS) $(MISC) | fmt -1 | sort -u`
	$(MAKE) tags

log: FORCE
	bk sccslog $(SRCS) $(HDRS) | more

tags: FORCE
	@for i in $(SRCS) $(HDRS) $(SCRSRCS) $(MISC); \
	do	if [ ! -f $$i ]; then bk get -s $$i; fi; \
	done
	@ctags --file-tags=yes --c-types=d+f+s+t $(SRCS) $(HDRS)
	@echo ctags completed


TAGS: srcs
	@for i in $(SRCS) $(HDRS) $(SCRSRCS) $(MISC); \
	do	if [ ! -f $$i ]; then bk get -s $$i; fi; \
	done
	@etags $(SRCS) $(HDRS)
	@echo etags completed

ssh sshtest:
	$(MAKE) realtest

test tests rsh rshtest:
	PREFER_RSH=YES $(MAKE) realtest

realtest: $(ALL) t/doit
	-./bk get -q t/SCCS/s.t.* t/setup t/cleanup
	cd t && ./doit

t/doit: t/doit.sh substvars
	./substvars t/doit.sh >t/doit.T
	chmod +x t/doit.T
	mv t/doit.T t/doit

FORCE:

gnu: bk FORCE
	cd gnu && $(MAKE) BINDIR=$(BINDIR)

zlib/libz.a: $(ZLIBOBJ)
	$(AR) cr zlib/libz.a $(ZLIBOBJ)
	-$(RANLIB) zlib/libz.a
mdbm/libmdbm.a: $(MDBMOBJ)
	$(AR) cr mdbm/libmdbm.a $(MDBMOBJ)
	-$(RANLIB) mdbm/libmdbm.a
libsccs.a: $(OBJ)
	$(AR) cr libsccs.a $(OBJ)
	-$(RANLIB) libsccs.a
bk: $(OBJ) $(LIBS)
	$(CC) $(CFLAGS) $(LINK) -o bk

# Scripts.
rcs2sccs: rcs2sccs.perl substvars
	./substvars rcs2sccs.perl >rcs2sccs.T
	chmod +x rcs2sccs.T
	mv -f rcs2sccs.T rcs2sccs

testfast: testfast.perl substvars
	./substvars testfast.perl >testfast.T
	chmod +x testfast.T
	mv -f testfast.T testfast

bk.script: bk.sh port/unix_platform.sh substvars
	./substvars port/unix_platform.sh bk.sh > bk.script
	chmod +x bk.script 

bkhelp.txt: bkhelp.doc bk.ver
	sed "s/@version@/`cat bk.ver`/" bkhelp.doc | \
	sed "s?@builder@?`./bk getuser`@`./bk gethost`?" | \
	sed "s/@built_date@/`date`/" > bkhelp.txt

lodset: lodset.sh
	cp -f lodset.sh lodset
	chmod +x lodset

# XXX Must be changed when ChangeSet moves to BitKeeper/etc.
# It is structured like this so that rebuilding prs doesn't
# force bk.ver (and thus the bk script) to be regenerated.
bk.ver: stamp-ver
stamp-ver:: ../SCCS/s.ChangeSet utils/os utils/gnu-os
	( echo \
	  `./bk prs -hr+ -d'$$if(:SYMBOL:){:SYMBOL: }:UTC:' ../ChangeSet;` \
	  for \
	  `utils/os` \
	) >bk.v
	mv -f bk.v bk.ver
	touch stamp-ver
stamp-ver:: bk
	touch stamp-ver

# Because we need the execute bit on
utils/os utils/gnu-os: bk
	./bk get utils/os utils/gnu-os

uuwrap: uuwrap.sh substvars
	./substvars uuwrap.sh > uuwrap.T
	chmod +x uuwrap.T
	mv -f uuwrap.T uuwrap

unuuwrap: unuuwrap.sh substvars
	./substvars unuuwrap.sh > unuuwrap.T
	chmod +x unuuwrap.T
	mv -f unuuwrap.T unuuwrap

gzip_uuwrap: gzip_uuwrap.sh substvars
	./substvars gzip_uuwrap.sh > gzip_uuwrap.T
	chmod +x gzip_uuwrap.T
	mv -f gzip_uuwrap.T gzip_uuwrap

ungzip_uuwrap: ungzip_uuwrap.sh substvars
	./substvars ungzip_uuwrap.sh > ungzip_uuwrap.T
	chmod +x ungzip_uuwrap.T
	mv -f ungzip_uuwrap.T ungzip_uuwrap

import: import.sh port/unix_platform.sh substvars
	./substvars port/unix_platform.sh import.sh > import.T
	chmod +x import.T
	mv -f import.T import

pmerge: pmerge.perl port/unix_platform.perl substvars
	./substvars pmerge.perl port/unix_platform.perl > pmerge.T
	chmod +x pmerge.T
	mv -f pmerge.T pmerge

oldresolve: resolve.perl port/unix_platform.perl substvars
	./substvars resolve.perl port/unix_platform.perl > oldresolve.T
	chmod +x oldresolve.T
	mv -f oldresolve.T oldresolve

oldresync: oldresync.perl port/unix_platform.perl substvars
	./substvars oldresync.perl port/unix_platform.perl > oldresync.T
	chmod +x oldresync.T
	mv -f oldresync.T oldresync

mkdiffs: mkdiffs.perl port/unix_platform.perl substvars
	./substvars mkdiffs.perl port/unix_platform.perl > mkdiffs.T
	chmod +x mkdiffs.T
	mv -f mkdiffs.T mkdiffs

bkmerge: bkmerge.sh
	rm -f bkmerge
	cp bkmerge.sh bkmerge
	chmod +x bkmerge
	chmod -w bkmerge

resync: resync.sh
	rm -f resync
	cp resync.sh resync
	chmod +x resync
	chmod -w resync

bkdsubstr: bkd.h
	grep BKD_VERSION bkd.h | sed -e 's/.*"b/b/' -e 's/".*//' > _bkdvers
	echo "#!/bin/sh" > bkdsubstr
	echo "sed 's/@BKD_VERSION@/`cat _bkdvers`/'" >> bkdsubstr
	/bin/rm _bkdvers
	chmod +x bkdsubstr

bk_users: bk_users.perl aliases.perl port/unix_platform.perl substvars
	-rm -f bk_users
	./substvars bk_users.perl aliases.perl port/unix_platform.perl > bk_users
	chmod +x bk_users

sccstool: gui/sccstool.tcl gui/common.tcl port/unix_platform.tcl substvars
	./substvars port/unix_platform.tcl \
				gui/common.tcl gui/sccstool.tcl > sccstool.T
	chmod +x sccstool.T
	mv -f sccstool.T sccstool

citool: gui/citool.tcl gui/common.tcl port/unix_platform.tcl substvars
	./substvars port/unix_platform.tcl \
				gui/common.tcl gui/citool.tcl > citool.T
	chmod +x citool.T
	mv -f citool.T citool

helptool: gui/helptool.tcl port/unix_platform.tcl substvars
	./substvars port/unix_platform.tcl gui/helptool.tcl > helptool.T
	chmod +x helptool.T
	mv -f helptool.T helptool

vitool: gui/vitool.tcl substvars
	./substvars gui/vitool.tcl > vitool.T
	chmod +x vitool.T
	mv -f vitool.T vitool

difftool: gui/difftool.tcl port/unix_platform.tcl substvars
	./substvars port/unix_platform.tcl gui/difftool.tcl > difftool.T
	chmod +x difftool.T
	mv -f difftool.T difftool

csettool: gui/csettool.tcl gui/common.tcl port/unix_platform.tcl substvars
	./substvars port/unix_platform.tcl \
	    gui/common.tcl gui/csettool.tcl > csettool.T
	chmod +x csettool.T
	mv -f csettool.T csettool

renametool: gui/renametool.tcl port/unix_platform.tcl substvars
	./substvars port/unix_platform.tcl gui/renametool.tcl > renametool.T
	chmod +x renametool.T
	mv -f renametool.T renametool

fm: gui/fm.tcl port/unix_platform.tcl substvars
	./substvars port/unix_platform.tcl gui/fm.tcl > fm.T
	chmod +x fm.T
	mv -f fm.T fm

fm3: gui/fm3.tcl substvars
	./substvars gui/fm3.tcl >fm3.T
	chmod +x fm3.T
	mv -f fm3.T fm3

mkindex: gui/mkindex.tcl substvars
	./substvars gui/mkindex.tcl >mkindex.T
	chmod +x mkindex.T
	mv -f mkindex.T mkindex

# Autoconf magic.
# This is not the way this will work in the long run.
# Unfortunately, there is no portable way to avoid running config.status
# several times.

# ATT SCCS doesn't respect the stored file mode.
config.status: configure
	chmod +x configure
	./configure --quiet --no-create --bindir=$(BINDIR)

config.h: stamp-h
stamp-h: config.h.in config.status
	CONFIG_HEADERS=config.h CONFIG_FILES= ./config.status
	date > stamp-h

substvars: substvars.in config.status
	CONFIG_HEADERS= CONFIG_FILES=substvars ./config.status
	chmod +x substvars

# Touch this and die.  --lm
install: install-nolinks
	@-for file in $(BINLINKS); \
	do	if [ $$file != bk ]; \
		then	rm -f $(BINDIR)/$$file; \
			ln $(BINDIR)/bk $(BINDIR)/$$file; \
		fi; \
	done
	@-if [ -w /usr/bin ]; \
	then	for file in $(BINLINKS); \
		do	rm -f /usr/bin/$$file; \
			ln -s $(BINDIR)/$$file /usr/bin/$$file; \
		done; \
	fi
	@-if [ ! -d /var/bitkeeper ]; \
	then	mkdir /var/bitkeeper; chmod 777 /var/bitkeeper; \
	fi

install-nolinks: all
	@test -d $(BINDIR) || mkdir -p $(BINDIR)
	@cp -f $(BINS) $(SCRIPTS) $(DATA) $(BINDIR)
	@-rm -rf $(BINDIR)/t/t.*
	@if [ ! -d $(BINDIR)/t ]; \
	then	mkdir $(BINDIR)/t; \
	fi
	@-./bk get -q t/SCCS/s.t.* t/setup t/cleanup
	@cp -f t/doit t/t.* t/setup t/cleanup $(BINDIR)/t
	@./bk chksum $(BINS) $(SCRIPTS) $(DATA) t/doit t/t.* t/setup t/cleanup \
		| sort > $(BINDIR)/MANIFEST
	@set `echo $(LINKTO)`; \
	while [ "X$$1" != X ]; \
	do	rm -f $(BINDIR)/$$1; \
		ln $(BINDIR)/$$2 $(BINDIR)/$$1; \
		shift; shift; \
	done
	@cd gnu && $(MAKE) BINDIR=$(BINDIR) install

image: all
	-rm -rf tmp/bitkeeper
	DIR=`pwd`/tmp/bitkeeper; set -e; \
	$(MAKE) install-nolinks BINDIR=$$DIR; \
	cd utils && $(MAKE) image BINDIR=$$DIR

# Rules for test builds.
HOSTS	= `chosts build`

crankit:
	@cwd=`pwd`; set -x; \
	for host in $(HOSTS); \
	do	time rsh $$host "cd $$cwd && $(CRANKCMD)" & \
	done; wait

crankturn: build crank
	$(MAKE) HOSTS="$(HOSTS)" CRANKCMD=./crank crankit

cranktest:
	$(MAKE) HOSTS="$(HOSTS)" CRANKCMD="bk regression" crankit

build: build.sh
	/bin/rm -f build
	cp build.sh build
	chmod +x build
	chmod -w build

crank: crank.sh
	/bin/rm -f crank
	cp crank.sh crank
	chmod +x crank
	chmod -w crank

# The default .c.o rule is broken with some Makes.
.c.o:
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

depend: $(SRCS)
	$(CC) -MM -MG -D_DEPEND $(SRCS) > depends

H=system.h unix.h config.h mdbm/mdbm.h purify.h sccs.h mmap.h
B=bkd.h lib_tcp.h
M=mdbm/common.h mdbm/tune.h mdbm/mdbm.h
Z=zlib/zlib.h zlib/zconf.h

adler32.o:	adler32.c $(H) $(Z)
admin.o:	admin.c $(H)
bkd.o:		bkd.c $(B) $(H) $(Z)
bkd_cd.o:	bkd_cd.c $(B) $(H) $(Z)
bkd_client.o:	bkd_client.c $(B) $(H) $(Z)
bkd_clone.o:	bkd_clone.c $(B) $(H) $(Z)
bkd_cmdtab.o:	bkd_cmdtab.c $(B) $(H) $(Z)
bkd_misc.o:	bkd_misc.c $(B) $(H) $(Z)
bkd_pull.o:	bkd_pull.c $(B) $(H) $(Z)
bkd_push.o:	bkd_push.c $(B) $(H) $(Z)
bkd_pwd.o:	bkd_pwd.c $(B) $(H) $(Z)
bkd_rootkey.o:	bkd_rootkey.c $(B) $(H) $(Z)
bkd_status.o:	bkd_status.c $(B) $(H) $(Z)
bkd_version.o:	bkd_version.c $(B) $(H) $(Z)
bk.o:		bk.c $(H)
bkusers.o:	bkusers.c $(H)
check.o:	check.c $(H) range.h
chksum.o:	chksum.c
clean.o:	clean.c $(H)
clone.o:	clone.c $(B) $(H) $(Z)
comments.o:	comments.c $(H)
commit.o:	commit.c $(H)
compress.o:	compress.c $(B) $(H) $(Z)
cset.o:		cset.c $(H) range.h $(Z)
delta.o:	delta.c $(H)
diffs.o:	diffs.c $(H) range.h
dirname.o:	dirname.c config.h
export.o:	export.c $(H)
fdiff.o:	fdiff.c $(H)
filecopy.o:	filecopy.c $(H)
finddirs.o:	finddirs.c $(H)
fix.o:		fix.c $(H)
g2sccs.o:	g2sccs.c $(H)
gca.o:		gca.c $(H)
get.o:		get.c $(H)
gethelp.o:	gethelp.c $(H)
gethost.o:	gethost.c
getlog.o:	getlog.c $(H)
getopt.o:	getopt.c $(H)
gettemp.o:	gettemp.c $(H)
getuser.o:	getuser.c
glob.o:		glob.c $(H)
help.o:		help.c $(H)
host.o:		host.c $(H)
isascii.o:	isascii.c
key2rev.o:	key2rev.c $(H)
lib_tcp.o:	lib_tcp.c lib_tcp.h
libcommit.o:	libcommit.c $(H)
libdiff.o:	libdiff.c $(H)
librange.o:	librange.c $(H) range.h
libsfiles.o:	libsfiles.c $(H)
libusers.o:	libusers.c $(H) range.h
lines.o:	lines.c $(H)
localtm.o:	localtm.c $(H)
locking.o:	locking.c $(H)
lod.o:		lod.c $(H) range.h $(Z)
logaddr.o:	logaddr.c $(H)
logchangeset.o:	logchangeset.c $(H)
mkdir.o:	mkdir.c $(H)
mmap.o:		mmap.c $(H)
mtime.o:	mtime.c
names.o:	names.c $(H)
newrev.o:	newrev.c $(H)
parent.o:	parent.c $(H)
pending.o:	pending.c $(H)
popen.o:	popen.c $(H)
disksp.o:	port/disksp.c $(H)
findprog.o:	port/findprog.c $(H) 
fullname.o:	port/fullname.c $(H)
gethost.o:	port/gethost.c $(H)
getinput.o:	port/getinput.c $(H)
platforminit.o:	port/platforminit.c $(H)
randomBits.o:	port/randomBits.c $(H)
samepath.o:	port/samepath.c $(H)
sccs_root.o:	port/sccs_root.c $(H)
spawn.o:	port/spawn.c $(H)
prs.o:		prs.c $(H) range.h
pull.o:		pull.c $(B) $(H) $(Z)
purify.o:	purify.c $(H)
push.o:		push.c $(B) $(H) $(Z)
r2c.o:		r2c.c $(H) range.h
range.o:	range.c $(H) range.h
rcs.o:		rcs.c $(H)
receive.o:	receive.c $(H)
rechksum.o:	rechksum.c $(H)
renumber.o:	renumber.c $(H)
repo.o:		repo.c $(H)
resolve.o:	resolve.c resolve.h $(H)
resolve_contents.o:	resolve_contents.c resolve.h $(H)
resolve_create.o:	resolve_create.c resolve.h $(H)
resolve_flags.o:	resolve_flags.c resolve.h $(H)
resolve_generic.o:	resolve_generic.c resolve.h $(H)
resolve_modes.o:	resolve_modes.c resolve.h $(H)
resolve_renames.o:	resolve_renames.c resolve.h $(H)
rmdel.o:	rmdel.c $(H)
sccs_mv.o:	sccs_mv.c $(H)
sccscat.o:	sccscat.c $(H) range.h
sccslog.o:	sccslog.c $(H) range.h
sccsmv.o:	sccsmv.c $(H)
sccsrm.o:	sccsrm.c $(H)
send.o:		send.c $(H)
sendbug.o:	sendbug.c $(H)
sendconfig.o:	sendconfig.c $(H)
setlog.o:	setlog.c $(H)
setup.o:	setup.c $(H)
sfiles.o:	sfiles.c $(H)
sfio.o:		sfio.c $(H) $(Z)
sids.o:		sids.c $(H)
sinfo.o:	sinfo.c $(H)
slib.o:		slib.c $(H) zgets.h
smoosh.o:	smoosh.c $(H)
status.o:	status.c $(H)
stripdel.o:	stripdel.c $(H) range.h
takepatch.o:	takepatch.c $(H) $(Z)
undo.o:		undo.c $(H)
undos.o:	undos.c
unique.o:	unique.c $(H)
unwrap.o:	unwrap.c $(H)
user.o:		user.c $(H)
utils.o:	utils.c $(B) $(H) $(Z)
version.o:	version.c
what.o:		what.c $(H)
zgets.o:	zgets.c $(Z) zgets.h
zone.o:		zone.c $(H)

mdbm/mdbm.o:	mdbm/mdbm.c $(M)
mdbm/hash.o:	mdbm/hash.c mdbm/mdbm.h
mdbm/debug.o:	mdbm/debug.c $(M)

Z2	=	zlib/deflate.h zlib/infblock.h zlib/infblock.h \
		zlib/infcodes.h zlib/infcodes.h zlib/inffast.h \
		zlib/inffixed.h zlib/inftrees.h zlib/inftrees.h \
		zlib/infutil.h zlib/infutil.h zlib/trees.h zlib/zconf.h \
		zlib/zconf.h zlib/zlib.h zlib/zutil.h zlib/zutil.h

zlib/adler32.o:		zlib/adler32.c $(Z2)
zlib/compress.o:	zlib/compress.c $(Z2)
zlib/crc32.o:		zlib/crc32.c $(Z2)
zlib/deflate.o:		zlib/deflate.c $(Z2)
zlib/gzio.o:		zlib/gzio.c $(Z2)
zlib/infblock.o:	zlib/infblock.c $(Z2)
zlib/infcodes.o:	zlib/infcodes.c $(Z2)
zlib/inffast.o:		zlib/inffast.c $(Z2)
zlib/inflate.o:		zlib/inflate.c $(Z2)
zlib/inftrees.o:	zlib/inftrees.c $(Z2)
zlib/infutil.o:		zlib/infutil.c $(Z2)
zlib/trees.o:		zlib/trees.c $(Z2)
zlib/uncompr.o:		zlib/uncompr.c $(Z2)
zlib/zutil.o:		zlib/zutil.c $(Z2)
