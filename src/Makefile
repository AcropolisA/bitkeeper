# Makefile for BitKeeper.
# @(#) %K%

# You can set this to anywhere you like and do a "build production" and you'll
# have an installed BitKeeper.
BINDIR	= /usr/libexec/bitkeeper

# UNIX/WIN32 (gcc/vc++) makefile portability macros
# These default values are for unix
SYS	=unix
BK=	bk 
CC_OUT	=-o $@
LD_OUT	=-o $@
LD	=cc
G	=-g

# -Wno-parentheses shuts up "suggest parentheses around assignment ...".
#  Unfortunately it also turns off dangling else warnings.
# -Wno-char-subscripts shuts up "subscript has type char", which comes
#  up all the time with broken <ctype.h> implementations.  (To be turned
#  back on for 1.1 or so.)
#    WHS: Current versions of gcc (3.0?) supress warnings in system files 
#	  by default. Perhaps this can be reenabled?
# -Wno-format-y2k supresses complains about '%y' in strftime formats
# -Wstrict-prototypes    Don't allow non-ansi function declarations
# other options wanted:
#    -Wmissing-declarations Functions without a prototype
#    -Wnested-externs	    Prototypes declared in a function
#    -Wwrite-strings	    warn in string constant is passed to a char *
#    -W
#    -Wmissing-prototypes   Same as -Wmissing-declarations ??
#    -Wredundant-decls	    Declaring same function twice (system header probs)
WARNINGS=-Wall -Wno-parentheses -Wno-char-subscripts -Wno-format-y2k -Wstrict-prototypes
CC_DEBUG=$G $(WARNINGS)
CC_FAST_DEBUG=$G -O2 $(WARNINGS)
CC_FAST	=$(CC_FAST_DEBUG)
CC_WALL=$G -DLINT $(WARNINGS)
INSTALL=install
XTRA=
#UWTLIB is used on win32 only - passed in from build.sh
UWTLIB	=
UWT_H	=
WIN_TMP	=*.idb *.pdb *.ilk *.exe *~bkp
BINS	= $(BK)
RESOURCE=

# Override Solaris make.rules
.SCCS_GET:
	bk get -q $@

# This list is generated by building the tree and do a "find -name '*.o'",
# splitting it into generic, zlib, and mdbm parts.  Keep it sorted.
OBJ =	abort.o adler32.o admin.o annotate.o approve.o \
	arrow_gif.o back_gif.o bk.o bkd.o bkd_cd.o \
	bkd_changes.o bkd_client.o bkd_clone.o bkd_cmdtab.o bkd_http.o \
	bkd_misc.o bkd_pull.o bkd_push.o bkd_pwd.o \
	bkd_rclone.o bkd_rootkey.o bkd_status.o bkd_synckeys.o bkd_version.o \
	bkpowered.o bkusers.o bkver.o cat.o changes.o \
	check.o checksum.o clean.o cleanpath.o clone.o \
	comment.o comments.o commit.o compress.o converge.o \
	cp.o cset.o cset_inex.o csetprune.o csets.o cweave.o delta.o diffs.o \
	dir_gif.o dirname.o export.o fdiff.o file_gif.o \
	find.o findkey.o fix.o g2sccs.o gca.o get.o gethelp.o \
	gethost.o getopt.o gettemp.o getuser.o glob.o \
	gnupatch.o graft.o grep.o help.o host.o hostme.o http.o \
	isascii.o key2rev.o keysort.o kvfile.o level.o \
	lib_tcp.o libcommit.o libdiff.o librange.o \
	libsfiles.o libusers.o license.o lines.o \
	localtm.o lock.o locking.o lod.o logflags.o \
	logging.o mail.o merge.o mkdir.o mklock.o \
	mmap.o mtime.o multiuser.o names.o newrev.o \
	parent.o park.o \
	pending.o preference.o port/bkd_client.o port/bkd_server.o \
	port/check_gfile.o port/executable.o \
	port/filecopy.o port/fileinfo.o \
	port/findprog.o port/flushsocket.o \
	port/fullname.o port/gethomedir.o \
	port/gethost.o port/getinput.o port/getnull.o \
	port/getrealcwd.o port/getrealname.o port/globalroot.o port/gui.o \
	port/hostColonPath.o port/http_proxy.o \
	port/lock.o port/mail.o port/mnext.o \
	port/ns_sock_host2ip.o port/platforminit.o \
	port/popen.o port/randomBits.o \
	port/rlimit.o port/runable.o port/samepath.o \
	port/sccs_getuser.o port/sccs_lockfile.o \
	port/sccs_root.o port/sig.o port/socket2pipe.o \
	port/spawn.o prs.o pull.o purify.o push.o putenv.o pwd.o \
	r2c.o range.o rcheck.o rclone.o rcs.o rcs2sccs.o rcsparse.o \
	receive.o renumber.o resolve.o \
	resolve_binaries.o resolve_contents.o \
	resolve_create.o resolve_filetypes.o \
	resolve_flags.o resolve_generic.o resolve_modes.o \
	resolve_renames.o resolve_tags.o rmdel.o \
	root.o rset.o scompress.o sane.o sccs.o sccs_mv.o sccs2bk.o sccscat.o \
	sccslog.o sccsmv.o sccsrm.o send.o sendbug.o \
	set.o setup.o sfiles.o sfind.o sfio.o shrink.o sinfo.o \
	slib.o smerge.o status.o stripdel.o synckeys.o sys.o \
	tagmerge.o takepatch.o testdates.o trigger.o \
	unbk.o undo.o undos.o unedit.o \
	unique.o unlink.o unlock.o unpull.o unwrap.o \
	user.o utils.o uu.o version.o what.o xflags.o zgets.o \
	zone.o

MDBMOBJ	= mdbm/mdbm.o mdbm/hash.o mdbm/debug.o mdbm/byte_order.o
ZLIBOBJ	= zlib/adler32.o zlib/compress.o zlib/crc32.o zlib/deflate.o \
      zlib/gzio.o zlib/infblock.o zlib/infcodes.o zlib/inffast.o \
      zlib/inflate.o zlib/inftrees.o zlib/infutil.o zlib/trees.o \
      zlib/uncompr.o zlib/zutil.o
SCRIPTS	= bk.script import resync uuwrap unuuwrap pmerge \
      revtool citool helptool difftool csettool fmtool fm3tool msg \
      renametool setuptool gzip_uuwrap ungzip_uuwrap bugform
LOCALSCR= testfast build crank
PSCR	= t/doit
UWTOBJ	= win32/uwtlib/wapi_intf.o win32/uwtlib/wcrt_intf.o
LIBS	= libsccs.a zlib/libz.a mdbm/libmdbm.a $(UWTLIB)
LINKS	= ci co edit unget
DATA	= bitkeeper.config bkmsg.txt bkhelp.txt bklogo.gif \
	../doc/bk_refcard.ps ../doc/bk_refcard.pdf
LINKTO	= fm fmtool fm3 fm3tool
BINLINKS= bk admin get delta unget rmdel prs
# Note: $(XTRA) must be listed after "gnu"
ALL	= $(LIBS) $(BINS) $(SCRIPTS) $(LOCALSCR) $(PSCR) $(DATA) gnu $(XTRA)

# FASTPURIFY does not do overrun/underrun checking at each alloc/free
CFLAGS	= $(CC_FAST_DEBUG) $(CC_WALL) \
	  -DPURIFY -DPURIFY_FILES -DPURIFY_MDBM -DFASTPURIFY
CPPFLAGS= -Izlib -Imdbm
# For extra libraries required by the system, e.g. libnsl.
XLIBS	=
LINK_LIB= $(XLIBS) $(LSCCS) $(LMDBM) $(LZLIB)
LSCCS	= -L. -lsccs
LMDBM	= -Lmdbm -lmdbm
LZLIB	= -Lzlib -lz
# Override this if you don't have it.
RANLIB	= ranlib
SRCS	= $(OBJ:.o=.c) $(MDBMOBJ:.o=.c) $(ZLIBOBJ:.o=.c) 
HDRS	= $(SYS).h $(UWT_H) bkd.h lib_tcp.h logging.h mdbm/common.h \
	  mdbm/mdbm.h mdbm/tune.h mmap.h purify.h range.h rcs.h \
	  resolve.h sccs.h system.h zgets.h zlib/deflate.h \
	  zlib/infblock.h zlib/infcodes.h zlib/inffast.h \
	  zlib/inffixed.h zlib/inftrees.h zlib/infutil.h zlib/trees.h \
	  zlib/zconf.h zlib/zlib.h zlib/zutil.h

SCRSRCS	= testfast.perl bk.sh import.sh clone.sh \
	  gui/revtool.tcl gui/citool.tcl gui/difftool.tcl \
	  gui/vitool.tcl gui/fmtool.tcl gui/fm3tool.tcl \
	  gui/helptool.tcl uuwrap.sh gui/setuptool.tcl \
	  gui/progress.tcl gui/search.tcl gui/msg.tcl gui/bugform.tcl\
	  unuuwrap.sh port/unix_platform.sh port/unix_platform.tcl \
	  port/unix_platform.perl pmerge.perl gui/csettool.tcl \
	  port/win32_platform.perl port/win32_platform.tcl \
	  port/win32_platform.sh gui/renametool.tcl \
	  gzip_uuwrap.sh ungzip_uuwrap.sh resync.sh substvars.sh
MISC	= bkmsg.doc bitkeeper.config t/doit.sh

default:
	-if [ `uname -s` = "CYGWIN_NT-4.0" ];\
	then PAGER="less -E"; \
	else PAGER=more; \
	fi; \
	(bk cat HEADER; bk help bksrc; bk cat BUILD.txt) | $${PAGER}

all: $(ALL)

FREQ=50
purify-mem:
	$(MAKE) CFLAGS="$G $O -DPURIFY -DPURIFY_FREQ=$(FREQ)" all
purify+files:
	$(MAKE) CFLAGS="$G $O -DPURIFY -DPURIFY_FILES -DPURIFY_FREQ=$(FREQ)" all
purify+mdbm:
	$(MAKE) CFLAGS="$G $O -DPURIFY -DPURIFY_MDBM -DPURIFY_FREQ=$(FREQ)" all
purify:
	$(MAKE) CFLAGS="$G $O -DPURIFY -DPURIFY_FILES -DPURIFY_MDBM -DPURIFY_FREQ=$(FREQ)" all
PURIFY:
	$(MAKE) CFLAGS="$G $O -DPURIFY -DPURIFY_FILES -DPURIFY_MDBM -DPURIFY_FREQ=1" all
prof:
	$(MAKE) CFLAGS="$G -pg -O2" LDFLAGS=-pg all
gprof:
	$(MAKE) CFLAGS="$G -DPROFILE -pg -O2" LDFLAGS=-pg all
ggprof:
	$(MAKE) CFLAGS="$G -DPROFILE -pg" LDFLAGS=-pg all
# Debugging...
d:
	$(MAKE) CFLAGS="$G -DDEBUG" all
dp debug:
	$(MAKE) CFLAGS="$G -DPURIFY -DDEBUG" all
dp2 debug2:
	$(MAKE) CFLAGS="$G -DPURIFY -DDEBUG2" all

gWall Wall:
	$(MAKE) CFLAGS="$(CC_WALL)" all

# production builds
p:
	$(MAKE) CFLAGS="$(CC_FAST) $(CF)" all
ndebug:
	$(MAKE) CFLAGS="$(CC_FAST) -DNDEBUG $(CC_NOFRAME)" all
stats:
	$(MAKE) CFLAGS="$(CC_FAST) -DPURIFY_STATS $(CC_NOFRAME)" all
g:
	$(MAKE) CFLAGS="$(CC_DEBUG)" all
gO:
	$(MAKE) CFLAGS="$(CC_FAST_DEBUG)" all

production_all:
	$(MAKE) production_g prefix=$(BINDIR)/g
	$(MAKE) production_debug prefix=$(BINDIR)/debug
	$(MAKE) production_purify prefix=$(BINDIR)/purify
	$(MAKE) production

production: rebuild p $(INSTALL)
production_g: rebuild gO $(INSTALL)
production_debug: rebuild debug $(INSTALL)
production_ndebug: rebuild ndebug $(INSTALL)
production_purify: rebuild purify $(INSTALL)
production_image: rebuild p image

# Cleanup targets.
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Read the checkin comments on this delta before changing this.
clean-obj: FORCE
	-@rm -f bk bk.o shell.o cscope.out $(OBJ) $(MDBMOBJ) $(ZLIBOBJ) 
	-@rm -f bk.ver substvars gnu/config.cache config.h config.log config.sub
	-@rm -f $(LIBS) shell.c bkdsubstr bkmsg.txt bkhelp.txt a.out
	-@rm -f core $(WIN_TMP)
	-@cd gnu && $(MAKE) clean-obj
	-@cd win32 && $(MAKE) clean-obj
	-@cd doc && $(MAKE) clean-obj

clean-bin: FORCE
	-@rm -f $(BINS) $(SCRIPTS) $(LOCALSCR) $(PSCR) $(LINKS) MANIFEST
	-@cd gnu && $(MAKE) clean 
	-@cd win32 && $(MAKE) clean
	cd t && rm -f doit

clean clobber distclean: rebuild FORCE
	-@bk -r clean
	-@rm -f tags TAGS
	-@cd ../man/man2help && $(MAKE) clobber

rebuild:
	-@rm -f bk.o shell.o cscope.out $(OBJ) $(MDBMOBJ) $(ZLIBOBJ) 
	-@rm -f bk.ver substvars gnu/config.cache config.h config.log config.sub
	-@rm -f $(LIBS) shell.c bkdsubstr bkhelp.txt bkmsg.txt a.out
	-@rm -f core $(WIN_TMP)
	-@rm -f $(BINS) $(SCRIPTS) $(LOCALSCR) $(PSCR) $(LINKS) MANIFEST
	-@cd gnu && $(MAKE) clean clean-obj
	-@cd win32 && $(MAKE) clean clean-obj
	-@cd doc && $(MAKE) clean clean-obj
	cd t && rm -f doit

srcs src: FORCE
	-bk get -s $(HDRS) $(SRCS) $(SCRSRCS) $(MISC)

wc: $(HDRS) $(SRCS) $(SCRSRCS) $(MISC)
	wc -l $(SRCS) $(HDRS) $(SCRSRCS) $(MISC)

get-e: FORCE
	-@bk get -es `echo $(HDRS) $(SRCS) $(SCRSRCS) $(MISC) | fmt -1 | sort -u`
	$(MAKE) tags

log: FORCE
	-if [ `uname -s` = "CYGWIN_NT-4.0" ];\
	then PAGER=less; \
	else PAGER=more; \
	fi; \
	bk sccslog $(SRCS) $(HDRS) | $${PAGER}

tags: FORCE
	@for i in $(SRCS) $(HDRS) $(SCRSRCS) $(MISC); \
	do	if [ ! -f $$i ]; then bk get -s $$i; fi; \
	done
	@ctags --file-tags=yes --c-types=d+f+s+t $(SRCS) $(HDRS)
	@echo ctags completed


TAGS: srcs
	@for i in $(SRCS) $(HDRS) $(SCRSRCS) $(MISC); \
	do	if [ ! -f $$i ]; then bk get -s $$i; fi; \
	done
	@etags $(SRCS) $(HDRS)
	@echo etags completed

ssh sshtest:
	$(MAKE) realtest

test tests rsh rshtest:
	PREFER_RSH=YES $(MAKE) realtest

realtest: $(ALL) t/doit
	-./bk get -q t/SCCS/s.t.* t/setup t/x.chk_env
	cd t && ./doit

t/doit: t/doit.sh substvars
	./substvars t/doit.sh > t/doit
	chmod +x t/doit

FORCE:

gnu: $(BK) FORCE
	@bk get -sS gnu/Makefile
	@if uname -s | grep _NT; \
	then cd gnu && $(MAKE) BINDIR=$(BINDIR) DIFF_BINS= DIRS=patch ;\
	else cd gnu && $(MAKE) BINDIR=$(BINDIR) ;\
	fi

win32: FORCE
	cd win32 && $(MAKE) BINDIR=$(BINDIR)
win32/uwtlib/libuwt.a: FORCE
	cd win32/uwtlib && $(MAKE) 
zlib/libz.a: $(ZLIBOBJ)
	rm -f $@
	$(AR) cr zlib/libz.a $(ZLIBOBJ)
	-$(RANLIB) zlib/libz.a
mdbm/libmdbm.a: $(MDBMOBJ)
	rm -f $@
	$(AR) cr mdbm/libmdbm.a $(MDBMOBJ)
	-$(RANLIB) mdbm/libmdbm.a
libsccs.a: $(OBJ) shell.o
	rm -f $@
	$(AR) cr libsccs.a $(OBJ) shell.o
	-$(RANLIB) libsccs.a

# complie win32 resource file
bk.res: win32/data/bk.rc win32/data/bk.ico
	rc.exe -fo bk.res -r win32/data/bk.rc

$(BK): bk.o $(LIBS) $(RESOURCE)
	$(LD) $(LDFLAGS) $(LD_OUT) bk.o $(LINK_LIB) $(RESOURCE)

testfast: testfast.perl
	rm -f testfast
	cp testfast.perl testfast
	chmod +x testfast

bk.script: bk.sh port/$(SYS)_platform.sh substvars
	./substvars port/$(SYS)_platform.sh bk.sh > bk.script
	chmod +x bk.script 

bkmsg.txt: bkmsg.doc bk.ver Makefile
	sed "s/@version@/`cat bk.ver`/" bkmsg.doc | \
	sed "s?@builder@?`./bk getuser`@`./bk gethost` in `pwd`?" | \
	sed "s/@built_date@/`date`/" > bkmsg.txt

bkhelp.txt: build FRC
	@cd ../man/man2help && bk get -S Makefile && ../../src/build -u helptxt
	@cp ../man/man2help/helptxt bkhelp.txt

../doc/bk_refcard.pdf: build FRC
	@cd ../doc/ && $(MAKE) pdf

../doc/bk_refcard.ps: build FRC
	@cd ../doc/ && $(MAKE) ps

FRC:

# XXX Must be changed when ChangeSet moves to BitKeeper/etc.
# It is structured like this so that rebuilding prs doesn't
# force bk.ver (and thus the bk script) to be regenerated.
bk.ver: ../SCCS/s.ChangeSet utils/os utils/gnu-os
	( echo \
	  `./bk prs -hr+ -d'$$if(:SYMBOL:){:SYMBOL: }:UTC:\n' ../ChangeSet |\
	  sed 's/ approved//g';` \
	  for \
	  `sh ./utils/os` \
	) >bk.v
	mv -f bk.v bk.ver

bkver.c: ../SCCS/s.ChangeSet
	bk prs -hr+ -d'char *bk_vers = "$$if(:SYMBOL:){:SYMBOL:}$$unless(:SYMBOL:){:UTC:}";\nchar *bk_utc = ":UTC:";\nchar *bk_time = ":TIME_T:";\n' ../ChangeSet > bk.v
	mv -f bk.v bkver.c

# Because we need the execute bit on
utils/os utils/gnu-os: $(BK)
	@if [ ! -x utils/os ]; then ./bk get utils/os; fi
	@if [ ! -x utils/gnu-os ]; then ./bk get utils/gnu-os; fi

substvars: substvars.sh
	rm -f substvars
	cp substvars.sh substvars
	chmod +x substvars

uuwrap: uuwrap.sh
	rm -f uuwrap
	cp uuwrap.sh uuwrap
	chmod +x uuwrap

unuuwrap: unuuwrap.sh
	rm -f unuuwrap
	cp unuuwrap.sh unuuwrap
	chmod +x unuuwrap

gzip_uuwrap: gzip_uuwrap.sh
	rm -f gzip_uuwrap
	cp gzip_uuwrap.sh gzip_uuwrap
	chmod +x gzip_uuwrap

ungzip_uuwrap: ungzip_uuwrap.sh
	rm -f ungzip_uuwrap
	cp ungzip_uuwrap.sh ungzip_uuwrap
	chmod +x ungzip_uuwrap

import: import.sh port/$(SYS)_platform.sh substvars
	./substvars port/$(SYS)_platform.sh import.sh > import.T
	chmod +x import.T
	mv -f import.T import

pmerge: pmerge.perl port/$(SYS)_platform.perl
	cat pmerge.perl port/$(SYS)_platform.perl > pmerge
	chmod +x pmerge

resync: resync.sh
	rm -f resync
	cp resync.sh resync
	chmod +x resync
	chmod -w resync

bkdsubstr: bkd.h
	grep BKD_VERSION bkd.h | sed -e 's/.*"b/b/' -e 's/".*//' > _bkdvers
	echo "#!/bin/sh" > bkdsubstr
	echo "sed 's/@BKD_VERSION@/`cat _bkdvers`/'" >> bkdsubstr
	rm _bkdvers
	chmod +x bkdsubstr

revtool: gui/search.tcl gui/config.tcl gui/revtool.tcl gui/common.tcl \
	port/$(SYS)_platform.tcl
	cat port/$(SYS)_platform.tcl gui/config.tcl gui/common.tcl \
	    gui/search.tcl gui/revtool.tcl > revtool

citool: gui/citool.tcl gui/config.tcl gui/common.tcl gui/search.tcl \
	gui/progress.tcl port/$(SYS)_platform.tcl gui/ciedit.tcl
	cat port/$(SYS)_platform.tcl gui/config.tcl gui/common.tcl \
	    gui/progress.tcl gui/search.tcl gui/ciedit.tcl \
	    gui/citool.tcl > citool

setuptool: gui/setuptool.tcl gui/config.tcl gui/common.tcl \
	port/$(SYS)_platform.tcl
	cat port/$(SYS)_platform.tcl gui/common.tcl gui/config.tcl \
	    gui/setuptool.tcl > setuptool

helptool: gui/helptool.tcl gui/config.tcl port/$(SYS)_platform.tcl \
	gui/common.tcl
	cat port/$(SYS)_platform.tcl gui/config.tcl gui/common.tcl \
	    gui/helptool.tcl > helptool

difftool: gui/search.tcl gui/config.tcl gui/difftool.tcl \
	port/$(SYS)_platform.tcl gui/common.tcl gui/difflib.tcl
	cat gui/search.tcl port/$(SYS)_platform.tcl gui/config.tcl \
	    gui/common.tcl gui/difflib.tcl gui/difftool.tcl > difftool

bugform: gui/search.tcl gui/config.tcl gui/bugform.tcl \
	port/$(SYS)_platform.tcl gui/common.tcl gui/buglib.tcl
	cat gui/search.tcl port/$(SYS)_platform.tcl gui/config.tcl \
	    gui/common.tcl gui/buglib.tcl gui/bugform.tcl > bugform

csettool: gui/csettool.tcl gui/config.tcl gui/common.tcl \
	port/$(SYS)_platform.tcl gui/search.tcl gui/difflib.tcl
	cat gui/search.tcl port/$(SYS)_platform.tcl gui/config.tcl \
	    gui/common.tcl gui/difflib.tcl gui/csettool.tcl > csettool

renametool: gui/renametool.tcl gui/config.tcl port/$(SYS)_platform.tcl \
	gui/common.tcl
	cat port/$(SYS)_platform.tcl gui/config.tcl gui/common.tcl \
	    gui/renametool.tcl > renametool

fmtool: gui/fmtool.tcl gui/config.tcl port/$(SYS)_platform.tcl \
	gui/common.tcl gui/difflib.tcl
	cat port/$(SYS)_platform.tcl gui/config.tcl gui/common.tcl \
	    gui/difflib.tcl gui/fmtool.tcl > fmtool

fm3tool: gui/fm3tool.tcl gui/config.tcl gui/common.tcl port/$(SYS)_platform.tcl 
	cat port/$(SYS)_platform.tcl gui/config.tcl gui/common.tcl \
	    gui/fm3tool.tcl > fm3tool

msg: gui/msg.tcl
	cat gui/msg.tcl > msg

rpm:	bk.spec production
	rpm -bb bk.spec

pkg: install-nolinks epmhelper.sh
	rm -rf tmp/bitkeeper; \
	DIR=`pwd`/tmp/bitkeeper; set -e; \
	BINDIR=$$DIR ${MAKE} -e install-nolinks; \
	BINDIR=$$DIR $(MAKE) -e bklinks; \
	./epmhelper.sh -l -d $(BINDIR) -s $$DIR; \
	./epmhelper.sh -r -d $(BINDIR) -s $$DIR

# Touch this and die.  --lm
install: install-nolinks bklinks binlinks

bklinks:
	@if uname -s | grep _NT; \
	then	LN=cp; EXE=.exe; \
	else	LN=ln; EXE=; \
	fi; \
	for file in $(BINLINKS); \
	do	if [ $$file != bk ]; \
		then	rm -f $(BINDIR)/$$file$$EXE; \
			$$LN $(BINDIR)/bk$$EXE $(BINDIR)/$$file$$EXE; \
		fi; \
	done

binlinks:
	@if uname -s | grep _NT; \
	then	LN=cp; EXE=.exe; \
	else	LN=ln; EXE=; \
	fi; \
	if [ -w /usr/bin ]; \
	then	for file in $(BINLINKS); \
		do	rm -f /usr/bin/$$file; \
			ln -s $(BINDIR)/$$file /usr/bin/$$file; \
		done; \
	fi; \

install-nolinks: all
	@test -d $(BINDIR) || mkdir -p $(BINDIR)
	cp -f $(BINS) $(SCRIPTS) $(DATA) $(BINDIR)
	@-rm -rf $(BINDIR)/t/t.*
	@if [ ! -d $(BINDIR)/t ]; \
	then	mkdir $(BINDIR)/t; \
	fi
	@-./bk get -q t/SCCS/s.t.* t/setup t/x.chk_env
	@cp -f t/doit t/t.* t/setup t/x.chk_env $(BINDIR)/t
	@rm -f $(BINDIR)/MANIFEST
	@./bk checksum -s $(BINS) $(SCRIPTS) $(DATA) t/doit t/t.* t/setup \
		| sort > $(BINDIR)/MANIFEST
	@set `echo $(LINKTO)`; \
	while [ "X$$1" != X ]; \
	do	rm -f $(BINDIR)/$$1; \
		ln $(BINDIR)/$$2 $(BINDIR)/$$1; \
		shift; shift; \
	done
	@if uname -s | grep _NT; \
	then cd gnu && $(MAKE) install BINDIR=$(BINDIR) DIFF_BINS= DIRS=patch ;\
	else cd gnu && $(MAKE) install BINDIR=$(BINDIR) ;\
	fi
	@if uname -s | grep _NT; \
	then cd win32 && $(MAKE) BINDIR=$(BINDIR) install; \
	fi

# Win32 note: Wise install script does not respect the BINDIR env variable
# It picks up the image at C:/Program Files/BitKeeper
image: all
	@if uname -s | grep _NT; \
	then \
	${MAKE} -e install-nolinks; \
	cd utils && bk get -qS mkbk x86-win32.wse && ./mkbk; \
	else \
	rm -rf tmp/bitkeeper; \
	DIR=`pwd`/tmp/bitkeeper; set -e; \
	BINDIR=$$DIR ${MAKE} -e install-nolinks; \
	BINDIR=$$DIR $(MAKE) -e bklinks; \
	cd utils && BINDIR=$$DIR ${MAKE} -e image; \
	rm -rf tmp; \
	fi

# Rules for test builds.
HOSTS	= `chosts build`

crankit:
	@cwd=`pwd`; set -x; \
	for host in $(HOSTS); \
	do	time rsh $$host "cd $$cwd && $(CRANKCMD)" & \
	done; wait

crankturn: build crank
	$(MAKE) HOSTS="$(HOSTS)" CRANKCMD=./crank crankit

cranktry:
	$(MAKE) HOSTS="$(HOSTS)" CRANKCMD="./crank ./build p test" crankit

cranktest:
	$(MAKE) HOSTS="$(HOSTS)" CRANKCMD="bk regression" crankit

# It is OK if we fail to "rm buld" on win32.
# We can not "rm build " when we are running it.
build: build.sh
	-rm -f build
	-cp build.sh build
	-chmod +x build
	-chmod -w build

crank: crank.sh
	rm -f crank
	cp crank.sh crank
	chmod +x crank
	chmod -w crank

# The default .c.o rule is broken with some Makes.
.c.o:
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< $(CC_OUT)

depend: $(SRCS)
	$(CC) -MM -MG -D_DEPEND $(SRCS) > depends

$(OBJ): $(HDRS)

shell.o: substvars
	echo 'char *shell() { return ("@FEATURE_SH@"); }' | \
							./substvars > shell.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -c shell.c $(CC_OUT)
