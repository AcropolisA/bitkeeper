# Makefile for BitKeeper.
# @(#) %K%
HERE    := $(shell pwd)
REPO    := $(shell basename `bk root`)
URL     := $(shell echo bk://work/`bk root` | sed s,/home/bk/,,)
LOG	:= $(shell echo LOG-`bk getuser`)
OSTYPE  := $(shell bash -c 'echo $$OSTYPE')
ifeq "$(OSTYPE)" "cygwin"
	SYS=win32
	EXE=.exe
else
	SYS=unix
	EXE=
endif

# You can set this to anywhere you like and do a "build production" and you'll
# have an installed BitKeeper.
BINDIR	= /usr/libexec/bitkeeper

GET=	bk get -s
BK=	bk 
CC_OUT	=-o $@
LD_OUT	=-o $@
LD	=cc
G	=-g
TRIAL	=0
TCLWRAP	=./tclwrap

# -Wno-parentheses shuts up "suggest parentheses around assignment ...".
#  Unfortunately it also turns off dangling else warnings.
# -Wno-char-subscripts shuts up "subscript has type char", which comes
#  up all the time with broken <ctype.h> implementations.  (To be turned
#  back on for 1.1 or so.)
#    WHS: Current versions of gcc (3.0?) supress warnings in system files 
#	  by default. Perhaps this can be reenabled?
# -Wno-format-y2k supresses complains about '%y' in strftime formats
# -Wstrict-prototypes    Don't allow non-ansi function declarations
# other options wanted:
#    -Wmissing-declarations Functions without a prototype
#    -Wnested-externs	    Prototypes declared in a function
#    -Wwrite-strings	    warn in string constant is passed to a char *
#    -W
#    -Wmissing-prototypes   Same as -Wmissing-declarations ??
#    -Wredundant-decls	    Declaring same function twice (system header probs)
WARNINGS=-Wall -Wno-parentheses -Wno-char-subscripts -Wno-format-y2k -Wstrict-prototypes
CC_DEBUG=$G $(WARNINGS)
CC_FAST_DEBUG=$G -O2 $(WARNINGS)
CC_FAST	=$(CC_FAST_DEBUG)
CC_WALL=$G -DLINT $(WARNINGS)
INSTALL=install
XTRA=
#UWTLIB is used on win32 only - passed in from build.sh
UWTLIB	=
UWT_H	=
WIN_TMP	=*.idb *.pdb *.ilk *.exe *~bkp
BINS	= $(BK)
RESOURCE=
STRIP=strip

# This list is generated by building the tree and do a "find -name '*.o'",
# splitting it into generic, zlib, and mdbm parts.  Keep it sorted.
OBJ =	abort.o adler32.o admin.o annotate.o applyall.o \
	arrow_gif.o back_gif.o bk.o bkd.o bkd_cd.o \
	bkd_changes.o bkd_client.o bkd_clone.o bkd_cmdtab.o bkd_http.o \
	bkd_misc.o bkd_pull.o bkd_push.o bkd_pwd.o \
	bkd_rclone.o bkd_rootkey.o bkd_status.o bkd_synckeys.o bkd_version.o \
	bkpowered.o bkusers.o bkver.o cat.o changes.o \
	check.o checksum.o clean.o cleanpath.o clone.o \
	comment.o comments.o commit.o compress.o converge.o \
	cp.o crypto.o cset.o cset_inex.o csetprune.o csets.o cweave.o \
	dirs.o delta.o diffs.o diffsplit.o dir_gif.o dirname.o \
	export.o fdiff.o file_gif.o \
	find.o findkey.o fix.o fixlod.o \
	g2sccs.o gca.o get.o gethelp.o \
	gethost.o getopt.o gettemp.o getuser.o glob.o \
	gnupatch.o graft.o grep.o help.o host.o hostme.o http.o \
	isascii.o key2rev.o key2path.o kvfile.o \
	lease.o level.o \
	lib_tcp.o libcommit.o libdiff.o liblines.o librange.o \
	libsfiles.o libusers.o license.o lines.o \
	localtm.o lock.o locking.o lod.o logflags.o \
	logging.o mail.o merge.o mkdir.o mklock.o \
	mailsplit.o mmap.o mtime.o multiuser.o names.o \
	opark.o parent.o park.o \
	pending.o preference.o port/bkd_client.o port/bkd_server.o \
	port/check_gfile.o port/executable.o \
	port/filecopy.o port/fileinfo.o port/findpid.o \
	port/flushsocket.o \
	port/fullname.o port/gethomedir.o \
	port/gethost.o port/getinput.o port/getnull.o \
	port/getrealcwd.o port/getrealname.o port/globalroot.o port/gui.o \
	port/hostColonPath.o port/http_proxy.o \
	port/lock.o port/mail.o port/mnext.o \
	port/ns_sock_host2ip.o port/platforminit.o \
	port/randomBits.o \
	port/rlimit.o port/runable.o port/samepath.o \
	port/sccs_getuser.o port/sccs_lockfile.o \
	port/sccs_root.o port/sig.o port/socket2pipe.o \
	port/spawn.o port/system.o \
	port/tty.o \
	prs.o pull.o purify.o push.o putenv.o pwd.o \
	r2c.o range.o rcheck.o rclone.o rcs.o rcs2sccs.o rcsparse.o \
	receive.o renumber.o resolve.o \
	resolve_binaries.o resolve_contents.o \
	resolve_create.o resolve_filetypes.o \
	resolve_flags.o resolve_generic.o resolve_modes.o \
	resolve_renames.o resolve_tags.o rmdel.o \
	root.o rset.o scompress.o sane.o sccs.o sccs_mv.o sccs2bk.o sccscat.o \
	sccslog.o sccsmv.o sccsrm.o send.o sendbug.o \
	set.o setup.o sfiles.o sfind.o sfio.o shellcmd.o shrink.o sinfo.o \
	slib.o smerge.o sort.o status.o stripdel.o support.o synckeys.o sys.o \
	tagmerge.o takepatch.o testdates.o trigger.o \
	unbk.o undo.o undos.o unedit.o \
	unique.o unlink.o unlock.o unpull.o unwrap.o \
	user.o utils.o uu.o version.o what.o which.o xflags.o zgets.o \
	zone.o

MDBMOBJ	= mdbm/mdbm.o mdbm/hash.o mdbm/debug.o mdbm/byte_order.o
ZLIBOBJ	= zlib/adler32.o zlib/compress.o zlib/crc32.o zlib/deflate.o \
      zlib/gzio.o zlib/infblock.o zlib/infcodes.o zlib/inffast.o \
      zlib/inflate.o zlib/inftrees.o zlib/infutil.o zlib/trees.o \
      zlib/uncompr.o zlib/zutil.o
TOMCRYPTOBJ = tomcrypt/rsa.o tomcrypt/rsa_sys.o tomcrypt/mpi.o \
	tomcrypt/ampi.o tomcrypt/prime.o tomcrypt/mem.o tomcrypt/packet.o \
	tomcrypt/md5.o tomcrypt/ctr.o tomcrypt/aes.o tomcrypt/hash.o \
	tomcrypt/sprng.o tomcrypt/bits.o tomcrypt/crypt.o tomcrypt/base64.o \
	tomcrypt/yarrow.o tomcrypt/demos/test.o tomcrypt/hmac.o
SCRIPTS	= applypatch bk.script import resync \
	uuwrap unuuwrap gzip_uuwrap ungzip_uuwrap \
	b64wrap unb64wrap gzip_b64wrap ungzip_b64wrap \
	$(BINLINKS)
LOCALSCR= testfast build
PSCR	= t/doit
UWTOBJ	= win32/uwtlib/wapi_intf.o win32/uwtlib/wcrt_intf.o
LIBS	= libsccs.a zlib/libz.a mdbm/libmdbm.a tomcrypt/libtomcrypt.a $(UWTLIB)
LINKS	= ci co edit unget
DATA	= bitkeeper.config bkmsg.txt bkhelp.txt bklogo.gif \
	../doc/bk_refcard.ps ../doc/bk_refcard.pdf
LINKTO	= fm fmtool fm3 fm3tool
BINLINKS= admin$(EXE) get$(EXE) delta$(EXE) unget$(EXE) rmdel$(EXE) prs$(EXE)
# Note: $(XTRA) must be listed after "gnu"
ALL	= $(LIBS) $(BINS) GUI $(SCRIPTS) $(LOCALSCR) $(PSCR) $(DATA) \
	  gnu $(XTRA)

# FASTPURIFY does not do overrun/underrun checking at each alloc/free
CFLAGS	= $(CC_FAST_DEBUG) $(CC_WALL) \
	  -DPURIFY -DPURIFY_FILES -DPURIFY_MDBM -DFASTPURIFY
CPPFLAGS= -Izlib -Imdbm
# For extra libraries required by the system, e.g. libnsl.
XLIBS	=
LINK_LIB= $(XLIBS) $(LSCCS) $(LMDBM) $(LZLIB) $(LTOMCRYPT)
LSCCS	= -L. -lsccs
LMDBM	= -Lmdbm -lmdbm
LZLIB	= -Lzlib -lz
LTOMCRYPT = -Ltomcrypt -ltomcrypt
# Override this if you don't have it.
RANLIB	= ranlib
SRCS	= $(OBJ:.o=.c) $(MDBMOBJ:.o=.c) $(ZLIBOBJ:.o=.c) $(TOMCRYPTOBJ:.o=.c)
HDRS	= $(SYS).h $(UWT_H) bkd.h lib_tcp.h logging.h mdbm/common.h \
	  mdbm/mdbm.h mdbm/tune.h mmap.h purify.h range.h rcs.h \
	  liblines.h resolve.h sccs.h system.h \
	  tomcrypt/mpi-config.h tomcrypt/mpi.h tomcrypt/mycrypt_cfg.h \
	  tomcrypt/mpi-types.h tomcrypt/mycrypt.h \
	  zgets.h zlib/deflate.h \
	  zlib/infblock.h zlib/infcodes.h zlib/inffast.h \
	  zlib/inffixed.h zlib/inftrees.h zlib/infutil.h zlib/trees.h \
	  zlib/zconf.h zlib/zlib.h zlib/zutil.h

SCRSRCS	= testfast.perl bk.sh import.sh clone.sh \
	  uuwrap.sh unuuwrap.sh port/unix_platform.sh \
	  port/unix_platform.perl port/win32_platform.perl \
	  port/win32_platform.sh gzip_uuwrap.sh ungzip_uuwrap.sh \
	  resync.sh substvars.sh b64wrap.sh gzip_b64wrap.sh \
	  unb64wrap.sh ungzip_b64wrap.sh

MISC	= bkmsg.doc bitkeeper.config t/doit.sh

export	GET

default:
	bk cat BUILD.txt

all: $(ALL)

FREQ=50
purify-mem:
	$(MAKE) CFLAGS="$G $O -DPURIFY -DPURIFY_FREQ=$(FREQ)" all
purify+files:
	$(MAKE) CFLAGS="$G $O -DPURIFY -DPURIFY_FILES -DPURIFY_FREQ=$(FREQ)" all
purify+mdbm:
	$(MAKE) CFLAGS="$G $O -DPURIFY -DPURIFY_MDBM -DPURIFY_FREQ=$(FREQ)" all
purify:
	$(MAKE) CFLAGS="$G $O -DPURIFY -DPURIFY_FILES -DPURIFY_MDBM -DPURIFY_FREQ=$(FREQ)" all
PURIFY:
	$(MAKE) CFLAGS="$G $O -DPURIFY -DPURIFY_FILES -DPURIFY_MDBM -DPURIFY_FREQ=1" all
prof:
	$(MAKE) CFLAGS="$G -pg -O2" LDFLAGS=-pg all
gprof:
	$(MAKE) CFLAGS="$G -DPROFILE -pg -O2" LDFLAGS=-pg all
ggprof:
	$(MAKE) CFLAGS="$G -DPROFILE -pg" LDFLAGS=-pg all
# Debugging...
d:
	$(MAKE) CFLAGS="$G -DDEBUG" all
dp debug:
	$(MAKE) CFLAGS="$G -DPURIFY -DDEBUG" all
dp2 debug2:
	$(MAKE) CFLAGS="$G -DPURIFY -DDEBUG2" all

gWall Wall:
	$(MAKE) CFLAGS="$(CC_WALL)" all

# production builds
p:
	$(MAKE) CFLAGS="$(CC_FAST) $(CF)" all
trial:
	$(MAKE) TRIAL=1 CFLAGS="$(CC_FAST) $(CF)" all
ndebug:
	$(MAKE) CFLAGS="$(CC_FAST) -DNDEBUG $(CC_NOFRAME)" all
stats:
	$(MAKE) CFLAGS="$(CC_FAST) -DPURIFY_STATS $(CC_NOFRAME)" all
g:
	$(MAKE) CFLAGS="$(CC_DEBUG)" all
gO:
	$(MAKE) CFLAGS="$(CC_FAST_DEBUG)" all
gcov:
	$(MAKE) CFLAGS="$(CC_DEBUG) -fprofile-arcs -ftest-coverage" all

production_all:
	$(MAKE) production_g prefix=$(BINDIR)/g
	$(MAKE) production_debug prefix=$(BINDIR)/debug
	$(MAKE) production_purify prefix=$(BINDIR)/purify
	$(MAKE) production

production: rebuild p $(INSTALL)
production_g: rebuild gO $(INSTALL)
production_debug: rebuild debug $(INSTALL)
production_ndebug: rebuild ndebug $(INSTALL)
production_purify: rebuild purify $(INSTALL)
production_image: rebuild p image

# Cleanup targets.
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Read the checkin comments on this delta before changing this.
clean-obj: FORCE
	-@rm -f bk bk.o cscope.out $(OBJ) $(MDBMOBJ) $(ZLIBOBJ) \
		$(TOMCRYPTOBJ) $(SCRIPTS)
	-@rm -f bk.ver substvars gnu/config.cache config.h config.log config.sub
	-@rm -f $(LIBS) bkdsubstr bkmsg.txt bkhelp.txt a.out
	-@rm -f core $(WIN_TMP)
	-@cd ../doc && $(MAKE) clean-obj
	-@cd ../man && $(MAKE) clean
	-@cd gnu && $(MAKE) clean 
	-@cd gui && $(MAKE) clean 
	-@cd utils && $(MAKE) clean clean-obj
	-@cd win32 && $(MAKE) clean
	-@$(MAKE) clean-gcov

clean-gcov: FORCE
	-@rm -f *.bb *.bbg *.da *.gcov

clean-bin: FORCE
	-@rm -f $(BINS) $(SCRIPTS) $(LOCALSCR) $(PSCR) $(LINKS)
	-@cd ../doc && $(MAKE) clean-obj
	-@cd ../man && $(MAKE) clean
	-@cd gnu && $(MAKE) clean 
	-@cd gui && $(MAKE) clean 
	-@cd utils && $(MAKE) clean clean-obj
	-@cd win32 && $(MAKE) clean

clean clobber distclean: rebuild FORCE
	-@bk -r clean
	-@rm -f tags TAGS

rebuild:
	-@rm -f *.bb *.bbg *.da *.gcov bklink.[eo]??
	-@rm -f bk.o cscope.out $(OBJ) $(MDBMOBJ) $(ZLIBOBJ) \
		$(TOMCRYPTOBJ)
	-@rm -f bk.ver substvars gnu/config.cache config.h config.log config.sub
	-@rm -f $(LIBS) bkdsubstr bkhelp.txt bkmsg.txt a.out
	-@rm -f core bkver.c tclwrap tclwrap.o blowfish.o $(WIN_TMP)
	-@rm -f $(BINS) $(SCRIPTS) $(LOCALSCR) $(PSCR) $(LINKS)
	-@rm -rf tmp
	-@cd ../doc && $(MAKE) clean-obj
	-@cd ../man && $(MAKE) clean
	-@cd gnu && $(MAKE) clean 
	-@cd gui && $(MAKE) clean 
	-@cd utils && $(MAKE) clean clean-obj
	-@cd win32 && $(MAKE) clean

srcs src: FORCE
	-bk get -s $(HDRS) $(SRCS) $(SCRSRCS) $(MISC)

wc: $(HDRS) $(SRCS) $(SCRSRCS) $(MISC)
	wc -l $(SRCS) $(HDRS) $(SCRSRCS) $(MISC)

get-e: FORCE
	-@bk get -es `echo $(HDRS) $(SRCS) $(SCRSRCS) $(MISC) | fmt -1 | sort -u`
	$(MAKE) tags

tags: FORCE
	@for i in $(SRCS) $(HDRS) $(SCRSRCS) $(MISC); \
	do	if [ ! -f $$i ]; then bk get -s $$i; fi; \
	done
	@ctags --file-tags=yes --c-types=d+f+s+t $(SRCS) $(HDRS)
	@echo ctags completed


TAGS: srcs
	@for i in $(SRCS) $(HDRS) $(SCRSRCS) $(MISC); \
	do	if [ ! -f $$i ]; then bk get -s $$i; fi; \
	done
	@etags $(SRCS) $(HDRS)
	@echo etags completed

ssh sshtest:
	$(MAKE) realtest

test tests rsh rshtest:
	PREFER_RSH=YES $(MAKE) realtest

nonet nonet_test localtest:
	BK_NONET=YES PREFER_RSH=YES $(MAKE) realtest

realtest: $(ALL) t/doit
	-./bk get -q t/SCCS/s.t.* t/setup t/x.chk_env
	cd t && ./doit -i

t/doit: t/doit.sh substvars
	./substvars t/doit.sh > t/doit
	chmod +x t/doit

FORCE:

gnu: $(BK) FORCE
	@bk get -sS gnu/Makefile
	@if [ $(SYS) = win32 ]; \
	then cd gnu && cmd /c $(MAKE) BINDIR=$(BINDIR) DIFF_BINS= DIRS=patch ;\
	else cd gnu && $(MAKE) BINDIR=$(BINDIR) ;\
	fi

win32: FORCE
	cd win32 && $(MAKE) BINDIR=$(BINDIR)
win32/uwtlib/libuwt.a: FORCE
	cd win32/uwtlib && $(MAKE) 
zlib/libz.a: $(ZLIBOBJ)
	rm -f $@
	$(AR) cr zlib/libz.a $(ZLIBOBJ)
	-$(RANLIB) zlib/libz.a
mdbm/libmdbm.a: $(MDBMOBJ)
	rm -f $@
	$(AR) cr mdbm/libmdbm.a $(MDBMOBJ)
	-$(RANLIB) mdbm/libmdbm.a

tomcrypt/libtomcrypt.a: $(TOMCRYPTOBJ)
	$(RM) $@
	$(AR) cr $@ $(TOMCRYPTOBJ)
	-$(RANLIB) $@

libsccs.a: $(OBJ)
	rm -f $@
	$(AR) cr libsccs.a $(OBJ)
	-$(RANLIB) libsccs.a

# complie win32 resource file
bk.res: win32/data/bk.rc win32/data/bk.ico
	rc.exe -fo bk.res -r win32/data/bk.rc

bklink: bklink.c
	$(CC) bklink.c

$(BK): bk.o $(LIBS) $(RESOURCE)
	$(LD) $(LDFLAGS) $(LD_OUT) bk.o $(LINK_LIB) $(RESOURCE)
	if [ $(SYS) = win32 ]; \
	then	$(MAKE) bklink; \
		for file in $(BINLINKS); \
		do	rm -f $$file; \
			cp bklink.exe $$file; \
		done; \
	else \
		for file in $(BINLINKS); \
		do	rm -f $$file; \
			ln bk $$file; \
		done; \
	fi

testfast: testfast.perl
	rm -f testfast
	cp testfast.perl testfast
	chmod +x testfast

bk.script: bk.sh port/$(SYS)_platform.sh
	cat port/$(SYS)_platform.sh bk.sh > bk.script
	chmod +x bk.script 

bkmsg.txt: bkmsg.doc bk.ver Makefile
	sed "s/@version@/`cat bk.ver`/" bkmsg.doc | \
	sed "s?@builder@?`./bk getuser`@`./bk gethost -r` in `pwd`?" | \
	sed "s/@built_date@/`date`/" > bkmsg.txt

bkhelp.txt: build FRC
	@bk get -S ../man/man2help/Makefile
	@cd ../man/man2help && ../../src/build -u helptxt
	@cp ../man/man2help/helptxt bkhelp.txt

../doc/bk_refcard.pdf: build FRC
	@bk get -S ../doc/Makefile
	@cd ../doc/ && $(MAKE) pdf

../doc/bk_refcard.ps: build FRC
	@bk get -S ../doc/Makefile
	@cd ../doc/ && $(MAKE) ps

FRC:

# XXX Must be changed when ChangeSet moves to BitKeeper/etc.
# It is structured like this so that rebuilding prs doesn't
# force bk.ver (and thus the bk script) to be regenerated.
bk.ver: ../SCCS/s.ChangeSet utils/os utils/gnu-os
	( echo \
	  `./bk prs -hr+ -d'$$if(:SYMBOL:){:SYMBOL: }:UTC:\n' ../ChangeSet |\
	  sed 's/ approved//g';` \
	  for \
	  `sh ./utils/os` \
	) >bk.v
	mv -f bk.v bk.ver

# This must be rebuilt every time because it includes the build time
bkver.c: FRC
	bk prs -hr+ -d'char *bk_vers = "$$if(:SYMBOL:){:SYMBOL:}$$unless(:SYMBOL:){:UTC:}";\nchar *bk_utc = ":UTC:";\nchar *bk_time = ":TIME_T:";\n' ../ChangeSet > bk.v
	@if [ ! -x utils/os ]; then bk get utils/os; fi
	echo "char *bk_platform = \""`./utils/os`"\";" >> bk.v
	echo "unsigned build_timet = "`perl -e "print time"`";" >> bk.v
	echo "int test_release = "$(TRIAL)";" >> bk.v
	mv -f bk.v bkver.c

bkver.o: bkver.c

# Because we need the execute bit on
utils/os utils/gnu-os: $(BK)
	@if [ ! -x utils/os ]; then ./bk get utils/os; fi
	@if [ ! -x utils/gnu-os ]; then ./bk get utils/gnu-os; fi

substvars: substvars.sh
	rm -f substvars
	cp substvars.sh substvars
	chmod +x substvars

uuwrap: uuwrap.sh
	rm -f uuwrap
	cp uuwrap.sh uuwrap
	chmod +x uuwrap

unuuwrap: unuuwrap.sh
	rm -f unuuwrap
	cp unuuwrap.sh unuuwrap
	chmod +x unuuwrap

gzip_uuwrap: gzip_uuwrap.sh
	rm -f gzip_uuwrap
	cp gzip_uuwrap.sh gzip_uuwrap
	chmod +x gzip_uuwrap

ungzip_uuwrap: ungzip_uuwrap.sh
	rm -f ungzip_uuwrap
	cp ungzip_uuwrap.sh ungzip_uuwrap
	chmod +x ungzip_uuwrap

b64wrap: b64wrap.sh
	rm -f b64wrap
	cp b64wrap.sh b64wrap
	chmod +x b64wrap

unb64wrap: unb64wrap.sh
	rm -f unb64wrap
	cp unb64wrap.sh unb64wrap
	chmod +x unb64wrap

gzip_b64wrap: gzip_b64wrap.sh
	rm -f gzip_b64wrap
	cp gzip_b64wrap.sh gzip_b64wrap
	chmod +x gzip_b64wrap

ungzip_b64wrap: ungzip_b64wrap.sh
	rm -f ungzip_b64wrap
	cp ungzip_b64wrap.sh ungzip_b64wrap
	chmod +x ungzip_b64wrap

import: import.sh port/$(SYS)_platform.sh
	cat port/$(SYS)_platform.sh import.sh > import.T
	chmod +x import.T
	mv -f import.T import

applypatch: applypatch.sh 
	rm -f applypatch
	cp applypatch.sh applypatch
	chmod +x applypatch

resync: resync.sh
	rm -f resync
	cp resync.sh resync
	chmod +x resync
	chmod -w resync

bkdsubstr: bkd.h
	grep BKD_VERSION bkd.h | sed -e 's/.*"b/b/' -e 's/".*//' > _bkdvers
	echo "#!/bin/sh" > bkdsubstr
	echo "sed 's/@BKD_VERSION@/`cat _bkdvers`/'" >> bkdsubstr
	rm _bkdvers
	chmod +x bkdsubstr

# Quick and dirty target so we can make all the gui tools without the rest
GUI: FORCE
	@cd gui && make gui

gui-nowrap GUI-nowrap:
	@cd gui && make nowrap

install: install-nolinks binlinks

binlinks:
	if [ -w /usr/bin ]; \
	then	for file in $(BINLINKS); \
		do	rm -f /usr/bin/$$file; \
			ln -s $(BINDIR)/$$file /usr/bin/$$file; \
		done; \
	fi

install-nolinks: $(BINLINKS)
	@-if [ $(BINDIR) = "/usr/libexec/bitkeeper" ]; then \
		rm -rf /usr/libexec/bitkeeper 2>/dev/null; \
		test -d /usr/libexec/bitkeeper && \
		    mv /usr/libexec/bitkeeper /usr/libexec/BKJUNK$$$$; \
	fi
	@test -d $(BINDIR) || mkdir -p $(BINDIR)
	tar cf - $(BINS) $(SCRIPTS) | (cd $(BINDIR) && tar xf -)
	cp $(DATA) $(BINDIR)
	test -x gui/bin/bkgui || exit 1
	@rm -rf $(BINDIR)/gui
	mkdir $(BINDIR)/gui
	@cp -rp gui/bin gui/lib $(BINDIR)/gui
	@-rm -rf $(BINDIR)/t
	@set `echo $(LINKTO)`; \
	while [ "X$$1" != X ]; \
	do	rm -f $(BINDIR)/$$1; \
		ln $(BINDIR)/$$2 $(BINDIR)/$$1; \
		shift; shift; \
	done
	@if [ $(SYS) = win32 ]; \
	then cd gnu && $(MAKE) install BINDIR=$(BINDIR) DIFF_BINS= DIRS=patch ;\
	else (cd gnu && $(MAKE) install BINDIR=$(BINDIR)) ;\
	     bk get -S ../man/Makefile; \
	     cd ../man && $(MAKE) install BINDIR=$(BINDIR) ;\
	fi
	@if [ $(SYS) = win32 ]; \
	then cd win32 && $(MAKE) BINDIR=$(BINDIR) install; \
	fi
	-@find $(BINDIR) -type d -print | xargs chmod ug+w
	@true

trial_image trial-image:
	$(MAKE) -e trial _image

image:
	test -x $(BK) || $(MAKE) p || exit 1
	$(MAKE) -e _image

# Win32 note: Wise install script does not respect the BINDIR env variable
# It picks up the image at C:/Program Files/BitKeeper
_image:
	@if [ $(SYS) = win32 ]; \
	then	${MAKE} -e install-nolinks; \
		cd utils && bk get -qS mkbk x86-win32.wse && ./mkbk; \
	else \
		rm -rf tmp/bitkeeper; \
		DIR=`pwd`/tmp/bitkeeper; set -e; \
		BINDIR=$$DIR ${MAKE} -e install-nolinks; \
		for i in $(BINS); do $(STRIP) $$DIR/$$i; done; \
		cd utils && BINDIR=$$DIR ${MAKE} -e image; \
	fi

crankturn: crank.sh remote.sh
	REPO=$(REPO) URL=$(URL) REMOTE=remote.sh LOG=$(LOG) bash crank.sh

cranksave: crank.sh remote.sh
	REPO=$(REPO) URL=$(URL) REMOTE=remote.sh LOG=$(LOG) bash crank.sh save

crankstatus: crank.sh remote.sh
	REPO=$(REPO) URL=$(URL) REMOTE=remote.sh LOG=$(LOG) bash crank.sh status

# It is OK if we fail to "rm build" on win32.
# We can not "rm build" when we are running it.
build: build.sh
	-rm -f build
	-cp build.sh build
	-chmod +x build
	-chmod -w build

# The default .c.o rule is broken with some Makes.
.c.o:
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< $(CC_OUT)

depend: $(SRCS)
	$(CC) -MM -MG -D_DEPEND $(SRCS) > depends

$(OBJ): $(HDRS)

$(TOMCRYPTOBJ): tomcrypt/mpi-config.h tomcrypt/mpi-types.h tomcrypt/mpi.h \
		tomcrypt/mycrypt.h tomcrypt/mycrypt_cfg.h tomcrypt/aes_tab.c

tclwrap: blowfish.o tclwrap.o
	$(CC) $(CFLAGS) $(CPPFLAGS) -o $@ tclwrap.o blowfish.o

blowfish.o: blowfish.h
tclwrap.o: blowfish.h
