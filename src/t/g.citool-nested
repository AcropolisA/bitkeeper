# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Copyright (c) 2005 Larry McVoy

test -d "$HERE/home" || mkdir "$HERE/home"
export BK_TEST_HOME="$HERE/home"
OUT="$HERE/out"
RC="`bk dotbk`/ci.rc"

doFiles() {
	for f in file1 file2 file3 file4 file5 ; do
		echo "this is $f" > $f
		bk ci $Q -i -y'new file' $f || exit 1
	done
	bk commit $Q -y'initial checkin' || exit 1
}

echo $N Create some data ............................................$NL
nested project deep
cd "$HERE/project"
doFiles
cd "$HERE/project/gcc"
doFiles
cd "$HERE/project/gdb"
doFiles
cd "$HERE/project/gui/bin"
doFiles
cd "$HERE/project/gui/lib"
doFiles
cd "$HERE/project"
bk commit $Q -y'commit components' || exit 1
echo OK

echo $N change in product but no components shows up ................$NL
bk edit $Q file1
echo "# gratuitous change" >> file1
bk guitest citool > "$OUT" 2>&1 <<'EOF'
	test_buttonPress "Quit"
EOF
err=$?
test -s "$OUT" && { echo failed; cat "$OUT" ; exit 1 ; }
test $err -eq 99 && { echo "failed (exit $err)" ; exit 1 ; }
echo OK

echo $N change in a component creates a component cset file .........$NL
bk edit $Q gcc/file1
echo "foo" >> gcc/file1
bk guitest citool > "$OUT" 2>&1 <<'EOF'
	test_fileIsInList "gcc ChangeSet"
	test_buttonPress "Quit"
EOF
err=$?
test -s "$OUT" && { echo failed; cat "$OUT" ; exit 1 ; }
test $err -eq 99 && { echo "failed (exit $err)" ; exit 1 ; }
echo OK

echo $N change in a deep component creates a component cset file ....$NL
bk edit $Q gui/lib/file1
echo "foo" >> gui/lib/file1
bk guitest citool > "$OUT" 2>&1 <<'EOF'
	test_fileIsInList "gui/lib ChangeSet"
	test_buttonPress "Quit"
EOF
err=$?
test -s "$OUT" && { echo failed; cat "$OUT" ; exit 1 ; }
test $err -eq 99 && { echo "failed (exit $err)" ; exit 1 ; }
echo OK

echo $N component changeset contains file comments ..................$NL
bk edit $Q gui/lib/file1
echo "foo" >> gui/lib/file1
bk guitest citool > "$OUT" 2>&1 <<'EOF'
	test_selectFile "gui/lib/file1"
	test_inputComment "Comments for file1"
	test_selectFile "gui/lib ChangeSet"
	set text [test_getDiffs]
	if {![string match "*Comments for file1*" $text]} {
	    puts "gui/lib ChangeSet does not have file comments for file1"
	    exit 1
	}
	test_buttonPress "Quit" then "Quit without*"
EOF
err=$?
test -s "$OUT" && { echo failed; cat "$OUT" ; exit 1 ; }
test $err -eq 99 && { echo "failed (exit $err)" ; exit 1 ; }
echo OK

echo $N product changeset contains file and component cset comments .$NL
bk edit $Q gui/lib/file1
echo "foo" >> gui/lib/file1
bk guitest citool > "$OUT" 2>&1 <<'EOF'
	test_selectFile "gui/lib/file1"
	test_inputComment "Comments for file1"
	test_selectFile "gui/lib ChangeSet"
	test_inputComment "Comment for gui/lib changeset"
	test_selectFile "ChangeSet"
	set text [test_getDiffs]
	if {![string match "*Comments for file1*" $text]} {
	    puts "gui/lib ChangeSet does not have file comments for file1"
	    exit 1
	}
	if {![string match "*Comment for gui/lib changeset*" $text]} {
	    puts "ChangeSet does not have gui/lib ChangeSet comments"
	    exit 1
	}
	test_buttonPress "Quit" then "Quit without*"
EOF
err=$?
test -s "$OUT" && { echo failed; cat "$OUT" ; exit 1 ; }
test $err -eq 99 && { echo "failed (exit $err)" ; exit 1 ; }
echo OK

echo $N sfiles failing on a component gives sensible error...........$NL
chmod 0 gui/lib
bk guitest citool > "$OUT" 2>&1 <<'EOF'
	test_buttonPress "Quit" then "Quit without*"
EOF
err=$?
test -s "$OUT" && { echo failed; cat "$OUT"; exit 1 ; }
test $err -eq 99 && { echo "failed (exit $err)" ; exit 1 ; }
chmod 777 gui/lib
echo OK

echo $N component cset is marked done on startup if product is done .$NL
bk edit $Q gcc/file1
echo "foo" >> gcc/file1
echo "comment for gcc/file1" | bk cfile save gcc/file1
echo "comment for cset" | bk cfile save ChangeSet
bk guitest citool > "$OUT" 2>&1 <<'EOF'
	test_fileHasIcon "gcc ChangeSet" done
	test_selectFile "gcc ChangeSet"
	set comments [test_getComments]

	if {$comments ne "comment for cset"} {
		puts "gcc ChangeSet does not have product cset comments"
		exit 1
	}
	test_buttonPress "Quit" then "Quit without saving*"
EOF
err=$?
test -s "$OUT" && { echo failed; cat "$OUT" ; exit 1 ; }
test $err -eq 99 && { echo "failed (exit $err)" ; exit 1 ; }
echo OK
