# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Setup code for tests
# Copright (c) 1999 Larry McVoy
# %K%

# *IMPORTANT* This file should be kept small, it is called in the main loop
#	      of doit.sh

cores()
{
	# Win32 have no core file
	if [ "PLATFORM" = "WIN32" ]; then return; fi

	OUT="$BK_REGRESSION/cores"
        find "$BK_REGRESSION" -name core -print > "$OUT"
        if [ -s "$OUT" ]
        then    ls -l `cat "$OUT"`
                file `cat "$OUT"`
                exit 10
        fi
}


# Note: [ -w file ] always succeeds when you are root.
writable() {
	[ -w "$1" ] || return 1
	return 0
}

checkLocks() {
	if [ -d BitKeeper/readers ]
	then	if [ `find BitKeeper/readers -type f -print | wc -l` -ne 0 ]
		then	echo Failed to remove read lock in `pwd`
			exit 1
		fi
	fi
	if [ -d BitKeeper/writer ]
	then	if [ `find BitKeeper/writer -type f -print | wc -l` -ne 0 ]
		then	echo Failed to remove write lock in `pwd`
			exit 1
		fi
	fi
}

# We need this because some proxy disallow proxy to localhost
# some of our test do http push/pull/clone to localhost
unsetHttpProxy() {
	unset http_proxy HTTP_PROXY_HOST HTTP_PROXY_PORT
	unset SOCKS_HOST SOCKS_PORT SOCKS_SERVER
	unset HTTP_PROXY # workaround for cygwin
}

# Usage: waitForUnlock <root>
waitForUnlock() {
	test X$LOCKPID != X && wait $LOCKPID
	LOCKPID=
	bk lock -U $1
}

# Make a commercial config file
_commercial_config() {
	cat <<EOF
license: $BKL_P
licsign1: $BKL_P1
licsign2: $BKL_P2
licsign3: $BKL_P3
logging: none
logging_ask: no
description: BitKeeper Test repository
email: nobody@nowhere.bk
eoln: unix
keyword: sccs
EOF
}

# Usage: make_repo type instance
_make_repo() {
	TYPE=$1
	CF=$2
	SFIO=$3
	REPO=$BK_CACHE/${TYPE}

        if [ -d "$REPO" ]; then rm -rf "$REPO"; fi 	# should not happen
        BK_LICENSE=ACCEPTED bk setup -f -c"$CF" "$REPO" || {
                echo "Setup failed!"; exit 1;
        }
	# Make a cached copy
        (cd "$REPO" && find . -type f | bk sfio -qm -o > "$SFIO")
}

# Usage get_cached_repo dir sfio
_get_cached_repo() {
	mkdir $1
	cd $1
	bk sfio -qm -i < "$2"
	mkdir -p BitKeeper/tmp 		# because sfio does not copy dir
	mkdir -p BitKeeper/deleted/SCCS 	
	mkdir -p BitKeeper/etc/.master
}

# Get a commercial repo, use cache copy if available
# Usage: commercial dir
commercial() {
	
	CF="$BK_CACHE"/commercial.config
	SFIO=$BK_CACHE/commercial.sfio
	test -f "$SFIO" || {
		_commercial_config > "$CF"
		_make_repo commercial "$CF" "$SFIO"
	}
	_get_cached_repo "$1" "$SFIO"
}

fresh_commercial() {
	_commercial_config > c
	bk setup -f -cc $1 || { echo "Setup failed!"; exit 1; }
	cd $1
}

echon() {
	echo $NX ${1+"$@"}$NXL
}

# args: GOT WANT
checkfiles() {
        cmp -s "$1" "$2" || {
		test $WINDOWS = YES && {
			bk undos < "$1" > /tmp/A$$
			bk undos < "$2" > /tmp/B$$
			cmp /tmp/A$$ /tmp/B$$
			STATUS=$?
			rm -f /tmp/[AB]$$
			test $STATUS -eq 0 && return
		}
                echo "$1" and "$2" don\'t match
                bk diff -u "$1" "$2"
                exit 1
        }
}

verbose() {
	test -z "$Q" && echo ${1+"$@"}
}

cd "$HERE" || exit 1

# We need this because ksh on Solaris override $PATH from .profile
PATH=$BK_PATH
