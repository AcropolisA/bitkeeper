# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

linkcount() {
	bk _stat $1 | awk -F\| '{print $4}'
}

BK_NO_HARDLINK_CLONE=1
export BK_NO_HARDLINK_CLONE

echo $N Create initial repository ...................................$NL
commercial project
echo OK

echo $N Create some binary data and check BAM .......................$NL
BK="`bk bin`/bk"
test $PLATFORM = WIN32 && BK=${BK}.exe
DATA="$HERE"/data
perl -e 'sysread(STDIN, $buf, 81920);
syswrite(STDOUT, $buf, 81920);' < $BK > "$DATA"
cp "$DATA" data
bk new $Q data || exit 1
perl -e 'printf "Hi there\x0\n";' > small
BK_CONFIG='BAM:1k!' bk new $Q small
test -d BitKeeper/BAM || exit 1
echo OK
# find BitKeeper/BAM -type f 
# find BitKeeper/BAM -type f -name '*.a1' | xargs cat

echo $N Check encoding for large/small binaries .....................$NL
test `bk prs -hr+ -nd:ENC: data` = BAM || {
	echo data should have been BAM
	exit 1
}
test `bk prs -hr+ -nd:ENC: small` = uuencode || {
	echo small should have been uuencode
	exit 1
}
echo OK

echo $N Try checksum on BAM file ....................................$NL
bk checksum data || exit 1
echo OK

echo $N Create some different binary data and delta it ..............$NL
bk edit $Q data || exit 1
echo foo >> data
bk clean -q data && {
	echo should not have cleaned data
	exit 1
}
bk diffs data > OUT
grep -q 'Binary file data differs' OUT || exit 1
bk delta $Q -yfoo data
NUM=`find BitKeeper/BAM -type f -name '*.d1' -print | wc -l`
test $NUM = 2 || {
	echo wrong number of files
	find BitKeeper/BAM -type f -name '*.d1' -print
	exit 1
}
echo OK

echo $N Delete bam files ............................................$NL
# Failed on windows because of the second delete putting a : into file name
echo bd > bd
bk new $Q -b bd || exit 1
bk rm bd || exit 1
echo bd > bd
bk new $Q -b bd || exit 1
bk rm bd || exit 1
bk -r check -ac 2> ERR || {
	echo check failed
	exit 1
}
echo OK

echo $N Check that we picked up the right timestamps ................$NL
bk -Ur bam timestamps -n > OUT
test -s OUT && {
	echo failed
	cat OUT
	exit 1
}
echo OK

echo $N Same data should just get added to the same BAM file ........$NL
mkdir subdir
cp "$DATA" subdir/data3
bk new $Q subdir/data3
NUM=`find BitKeeper/BAM -type f -name '*.d1' -print | wc -l`
test $NUM = 3 || {
	echo wrong number of files
	find BitKeeper/BAM -type f -name '*.d1' -print
	exit 1
}
echo OK

echo $N Force a fake hash and see if that worked ....................$NL
cp "$DATA" fake_hash
RK=`bk id | sed 's/|/-/g'`
_BK_FAKE_HASH=deadbeef bk new $Q fake_hash
test -d BitKeeper/BAM || exit 1
test -f BitKeeper/BAM/$RK/de/deadbeef.d1 || exit 2
if [ -w BitKeeper/BAM/$RK/de/deadbeef.d1 ]
then	echo failed
	echo file in BAM storage is writable
	ls -l BitKeeper/BAM/de/deadbeef.d1
else	echo OK
fi

echo $N See if a failed get changes the file to RW ..................$NL
bk clean fake_hash
_BK_FAKE_HASH=deadbeef bk get $Q fake_hash
test -w fake_hash && {
	echo fake_hash should not be writable
	ls -l
	exit 1
}
mv BitKeeper/BAM/$RK/de/deadbeef.d1 BitKeeper/BAM/$RK/de/deadbeef.SAVE
_BK_FAKE_HASH=deadbeef bk get $Q fake_hash > OUT 2>&1 && {
	echo should have failed
	cat OUT
	exit 1
}
test -w fake_hash && {
	echo should not have changed modes on fake_hash
	ls -l fake_hash
	exit 1
}
mv BitKeeper/BAM/$RK/de/deadbeef.SAVE BitKeeper/BAM/$RK/de/deadbeef.d1
echo OK

echo $N See if a failed get -Gchanges the gfile state ...............$NL
_BK_FAKE_HASH=deadbeef bk get $Q fake_hash
mv BitKeeper/BAM/$RK/de/deadbeef.d1 BitKeeper/BAM/$RK/de/deadbeef.SAVE
_BK_FAKE_HASH=deadbeef bk get $Q -Gjunk fake_hash > OUT 2>&1 && {
	echo should have failed
	exit 1
}
test -w fake_hash && {
	echo should not have changed modes on fake_hash
	ls -l fake_hash
	exit 1
}
test -f junk && {
	echo should not have left junk
	exit 1
}
mv BitKeeper/BAM/$RK/de/deadbeef.SAVE BitKeeper/BAM/$RK/de/deadbeef.d1
echo OK

echo $N Same data should just get added to the same BAM file ........$NL
cp "$DATA" data4
_BK_FAKE_HASH=deadbeef bk new $Q data4
test -f BitKeeper/BAM/de/deadbeef.d2 && {
	echo failed
	set -x
	ls -lR BitKeeper/BAM
	exit 2
}
echo OK

echo $N Clean the file, check it out, make sure that worked .........$NL
bk clean fake_hash || { echo clean failed; exit 1; }
test -f fake_hash && { echo clean failed to remove; exit 1; }
_BK_FAKE_HASH=deadbeef bk co $Q fake_hash || { echo co failed; exit 1; }
cmp -s "$DATA" fake_hash || { echo cmp failed; exit 1; }
echo OK

echo $N Test for already gotting that get -S works ..................$NL
_BK_FAKE_HASH=deadbeef bk co $Q -S fake_hash || { echo co failed; exit 1; }
echo OK

echo $N Commit, check that the keys are BAM .........................$NL
bk commit $Q -ywhatever || exit 1
bk co $Q ChangeSet || exit 1
awk -F'|' '$2 == "data" && $5 ~ /^B:/ { print; }' < ChangeSet > OUT
test -s OUT || exit 1
echo OK

echo $N Fetch the 1.0 delta .........................................$NL
bk get -p -r1.0 subdir/data3 2> OUT && {
	exit 1
}
cat <<EOF > WANT
BAM: unable to find BAM delta in subdir/data3
get of subdir/data3 failed, skipping it.
EOF
cmpfiles OUT WANT
echo OK

echo $N Make a patch, check for BAM data ............................$NL
find BitKeeper/BAM -type f | bk sort > "$HERE"/WANT
bk makepatch -B -r1.0.. > "$HERE"/ALL
grep -q '== @SFIO@ ==' "$HERE"/ALL || {
	echo no sfio marker
	exit 1
}
echo OK


echo $N Take the patch and check for BAM data .......................$NL
mkdir "$HERE"/new
cd "$HERE"/new
_BK_ALLOW_BAD_CRC=YES bk takepatch -ivv < "$HERE"/ALL > "$HERE"/OUT 2>&1 || {
	cat "$HERE"/OUT
	exit 1
}
test -d BitKeeper/BAM || {
	echo Should have made BAM dir
	exit 1
}
find BitKeeper/BAM -type f | bk sort > "$HERE"/GOT
cmpfiles "$HERE"/WANT "$HERE"/GOT
echo OK

echo $N Make sure that gets in RESYNC get from RESYNC ...............$NL
cd RESYNC
bk _get $Q -r1.1 data
test -f data || {
	echo did not get data
	exit 1
}
cmp -s "$DATA" data || {
	echo wrong data
	cmp  "$DATA" data
	ls -l "$DATA" data
	exit 1
}
_BK_FAKE_HASH=deadbeef bk get $Q fake_hash
test -f fake_hash || {
	echo did not get data
	exit 1
}
cmp -s "$DATA" fake_hash || {
	echo wrong data
	cmp  "$DATA" data
	ls -l "$DATA" data BitKeeper/BAM/$RK/de/deadbeef.d1
	exit 1
}
echo OK
# cat BitKeeper/BAM/de/deadbeef.a1

echo $N Take the patch and try to resolve it ........................$NL
mkdir "$HERE"/new2
cd "$HERE"/new2
_BK_ALLOW_BAD_CRC=YES bk takepatch -ivva < "$HERE"/ALL > "$HERE"/OUT 2>&1 || {
	cat "$HERE"/OUT
	exit 1
}
# cat "$HERE"/OUT
find BitKeeper/BAM -type f | bk sort > "$HERE"/GOT
cmpfiles "$HERE"/WANT "$HERE"/GOT
echo OK

echo $N Run resolve and make sure it applies the data ...............$NL
cd "$HERE"/new
echo q | _BK_NEWPROJECT=YES bk resolve > OUT 2>&1
test -d RESYNC && {
	echo failed
	cat OUT
	exit 1
}
find BitKeeper/BAM -type f | bk sort > "$HERE"/GOT
cmpfiles "$HERE"/WANT "$HERE"/GOT
echo OK

echo $N Test pull to see that it sends BAM data .....................$NL
cd "$HERE"
_BK_ALLOW_BAD_CRC=YES bk clone $Q -r1.1 project pull || exit 1
cd pull
test -d BitKeeper/BAM && {
	echo should have no BAM dir
	exit 1
}
_BK_ALLOW_BAD_CRC=YES bk pull $Q || exit 1
find BitKeeper/BAM -type f | bk sort > "$HERE"/GOT
cmpfiles "$HERE"/WANT "$HERE"/GOT
echo OK

echo $N Make sure clone sends BAM data ..............................$NL
cd "$HERE"
_BK_ALLOW_BAD_CRC=YES bk clone $Q project clone || exit 1
cd clone
test -d BitKeeper/BAM || {
	echo no BAM dir
	exit 1
}
find BitKeeper/BAM -type f | bk sort > "$HERE"/GOT
cmpfiles "$HERE"/WANT "$HERE"/GOT
echo OK

echo $N Test a ul merge .............................................$NL
for i in project clone
do	cd "$HERE"/$i
	bk edit $Q data
	echo $i >> data
	bk delta $Q -y$i data
	bk commit $Q -y$i
done
cd "$HERE"/clone
BEFORE=`find BitKeeper/BAM -type f -print | wc -l`
( echo ul; echo Use local version; echo .; echo q) | bk pull $Q >OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
test -d RESYNC && exit 2
AFTER=`find BitKeeper/BAM -type f -print | wc -l`
# We should have one extra d
test $BEFORE -eq `expr $AFTER - 1` || {
	echo failed
	echo $BEFORE $AFTER
	exit 1
}
echo OK

echo $N Test unpull .................................................$NL
bk unpull -f $Q || exit 1
bk co $Q data
test `wc -c < BitKeeper/tmp/unpull.patch` -gt `wc -c < data` || {
	echo Patch is too small, must not contain BAM data
	exit 1
}
test -d RESYNC && exit 1
echo OK

echo $N Test a manual merge .........................................$NL
( echo '!cat $BK_LOCAL $BK_REMOTE > $BK_MERGE'
  echo C
  echo use both
  echo .
  echo q
) | bk pull $Q >OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
test -d RESYNC && exit 2
AFTER=`find BitKeeper/BAM -type f -print | wc -l`
# We should have two extra d
test $BEFORE -eq `expr $AFTER - 2` || {
	echo failed
	echo $BEFORE $AFTER
	exit 1
}
echo OK

echo $N See if we can fetch remote BAM data with get ................$NL
cd "$HERE"/project
bk commit -ywhatever $Q
cd "$HERE"
_BK_ALLOW_BAD_CRC=YES bk clone $Q project remote
cd remote
rm -rf BitKeeper/BAM
bk bam server $Q ../project || exit 1
bk get $Q data || {
	echo get failed
	exit 1
}
test -d BitKeeper/BAM || {
	echo failed to create BitKeeper/BAM
	exit 1
}
test -f data || {
	echo bk get succeeded but no data
	exit 1
}
echo OK

echo $N See if we can fetch remote BAM data with get in subdir ......$NL
cd "$HERE"/remote
rm -rf BitKeeper/BAM
cd subdir
bk get $Q data3 || {
	echo get failed
	exit 1
}
test -d ../BitKeeper/BAM || {
	echo failed to create BitKeeper/BAM
	exit 1
}
test -f data3 || {
	echo bk get succeeded but no data
	exit 1
}
echo OK

echo $N See if we can fetch remote BAM data with bk -r get ..........$NL
cd "$HERE"/remote
rm -rf BitKeeper/BAM
_BK_ALLOW_BAD_CRC=YES \
 bk -r get -F $Q || {
	echo failed
	exit 1
}
test -d BitKeeper/BAM || {
	echo failed to create BitKeeper/BAM
	exit 1
}
test -f data || {
	echo bk get succeeded but no data
	exit 1
}
test -f fake_hash || {
	echo bk get succeeded but no fake_hash
	exit 1
}
echo OK

echo $N Test get/clean cycle ........................................$NL
for i in 1 2 3
do	bk clean data 
	test -f data && { echo failed to clean $i; exit 1; }
	bk get $Q data
	test -f data || { echo failed to get $i; exit 1; }
	test -w data && { echo failed to get ${i} RO; exit 1; }
	bk clean data
	test -f data && { echo failed to clean ${i}B; exit 1; }
	bk edit $Q data
	test -f data || { echo failed to get ${i}B; exit 1; }
	test -w data || { echo failed to edit ${i}B; exit 1; }
done
echo OK

echo $N Test remote push to remote server ...........................$NL
cd "$HERE"
bk bkd -q -d -aPORT -ikill > BKD 2>&1 || exit 1
P=`cat PORT`
commercial servmaster
bk bam server $Q ../project || exit 1
bk commit $Q -ysetup
cd ..
bk clone $Q bk://localhost:$P/servmaster someclient || exit 1
cd someclient || {
	echo failed no copy
	bk _kill bk://localhost:$P
	exit 1
}
echo foo > binfile
bk new $Q -b binfile || exit 1
bk commit $Q -ybinfile || exit 1
bk push $Q || {
	echo failed
	bk _kill bk://localhost:$P
	exit 1
}
echo OK

echo $N Test rclone of binpool master ...............................$NL
cd ../servmaster
bk -r check -aB || {
	bk _kill bk://localhost:$P
	exit 1
}
bk bam server $Q . || {
	echo bam server failed
	bk _kill bk://localhost:$P
	exit 1
}
bk clone $Q . bk://localhost:$P/servmaster.copy 2>ERR && {
	echo should have failed
	cat ERR
	bk _kill bk://localhost:$P
	exit 1
}
test -d ../servmaster.copy && {
	echo should not have left directory
	bk _kill bk://localhost:$P
	exit 1
}
grep -q "clone: when cloning a BAM server -B<url> is required." ERR || {
	echo bad error message
	cat ERR
	exit 1
}
echo OK


echo $N Test rclone -Bjunk ..........................................$NL
cd ../project
bk clone $Q -Bjunk . bk://localhost:$P/servmaster.copy 2>ERR && {
	echo should have failed
	cat ERR
	bk _kill bk://localhost:$P
	exit 1
}
test -d ../servmaster.copy && {
	echo should not have left directory
	bk _kill bk://localhost:$P
	exit 1
}
grep -q "unable to contact BAM server 'junk'" ERR || {
	echo bad error msg
	cat ERR
	exit 1
}
echo OK

bk _kill bk://localhost:$P

echo $N Test clone -Bjunk ...........................................$NL
cd "$HERE"
bk clone $Q -Bjunk project test1 2>ERR && {
	echo should have failed
	cat ERR
	exit 1
}
test -d test1 && {
	echo should not have left directory
	exit 1
}
grep -q "clone: unable to get id from BAM server 'junk'" ERR || {
	echo bad error message
	cat ERR
	exit 1
}
echo OK

# This test skipped on windows because I can't figure out how to make a file
# unreadable.  Oy.
#
test "$PLATFORM" != "WIN32" && {

echo $N Test that we do not go remote for errors in the cache .......$NL
cd "$HERE"/remote
bk _find BitKeeper/BAM -type f -name '*.d1' | while read x
do	 chmod 0 $x
done
rm -f data
BK_SHOWPROC="$HERE"/log bk get $Q data > OUT 2>&1 && {
	echo should have failed
	cat "$HERE"/log
	cat OUT
	ls -lR BitKeeper/BAM
	exit 1
}
grep -q sfio "$HERE"/log && {
	echo should not have run sfio
	cat "$HERE"/log 
	cat OUT
	exit 1
}
test -f data && {
	echo should not have gotten data
	cat OUT
	exit 1
}
bk _find BitKeeper/BAM -type f -name '*.d1' | while read x
do	 chmod 444 $x
done
echo OK

} # end of if-not-windows block

## HARDLINK tests -- do they work, get permissions and timestamps right?
## XXX put tests here or distribute t.permissions and t.timestamp ?

echo $N Test get/clean cycle with hardlinks .........................$NL
cd "$HERE"/remote
for i in 1 2 3
do	BK_CONFIG='BAM_hardlinks:yes' bk clean data 
	test -f data && { echo failed to clean $i; exit 1; }
	BK_CONFIG='BAM_hardlinks:yes' bk get $Q data
	test -f data || { echo failed to get $i; exit 1; }
	test -w data && { echo failed to get ${i} RO; exit 1; }
	BK_CONFIG='BAM_hardlinks:yes' bk clean data
	test -f data && { echo failed to clean ${i}B; exit 1; }
	BK_CONFIG='BAM_hardlinks:yes' bk edit $Q data
	test -f data || { echo failed to get ${i}B; exit 1; }
	test -w data || { echo failed to edit ${i}B; exit 1; }
done
echo OK

echo $N Test that get does not hardlink without BAM_hardlinks .......$NL
cd "$HERE"/project
bk -r clean
test -f data && { echo failed to clean; exit 1; }
bk get $Q data || exit 1
test `linkcount data` = 1 || {
	echo failed
	ls -l data
	exit 1
}
echo OK

echo $N Test that get hardlinks if BAM_hardlinks is set .............$NL
cd "$HERE"/project
bk -r clean
test -f data && { echo failed to clean; exit 1; }
BK_CONFIG='BAM_hardlinks:yes' bk get $Q data || exit 1
test `linkcount data` = 2 || {
	echo failed
	ls -l data
	echo links is `linkcount data`
	bk _stat data
	exit 1
}
echo OK

echo $N Test that edit does not hardlink ............................$NL
cd "$HERE"/project
bk clean data
test -f data && { echo failed to clean; exit 1; }
bk edit $Q data || exit 1
test `linkcount data` = 1 || {
	echo failed
	ls -l data
	exit 1
}
echo OK

echo $N Test that edit does not hardlink with BAM_hardlinks set .....$NL
cd "$HERE"/project
bk clean data
test -f data && { echo failed to clean; exit 1; }
BK_CONFIG='BAM_hardlinks:yes' bk edit $Q data || exit 1
test `linkcount data` = 1 || {
	echo failed
	ls -l data
	exit 1
}
echo OK

# Windows won't let me turn off execute bits
test $PLATFORM != WIN32 && {
# Fall through with 'data' in edit state to ..
echo $N Test that hardlinking does not alter permissions ............$NL
test -f data || { echo expected data from last test; exit 1; }
test -x data && { echo expected data with no execute; ls -l data; exit 1; }
cp data prog
chmod +x prog
test -x prog || { echo expected prog with execute; exit 1; }
bk new $Q -b prog
bk clean data prog
BK_CONFIG='BAM_hardlinks:yes' bk get $Q data prog || exit 1
DLINK=`linkcount data`
PLINK=`linkcount prog`
test `expr $DLINK + $PLINK` -le 2 && {
	echo failed - no hardlinks
	ls -l data prog
	exit 1
}
test -x data && { echo expected data with no execute; exit 1; }
test -x prog || { echo expected prog with execute; exit 1; }
echo OK

echo $N Test that chmod +x works with hardlinks .....................$NL
TIP=`bk prs -r+ -hnd:I: data`
BK_CONFIG='BAM_hardlinks:yes' bk get $Q data
mv data data-old
bk chmod ugo+x data
BK_CONFIG='BAM_hardlinks:yes' bk get $Q data
mv data data-new
OLINK=`linkcount data-old`
NLINK=`linkcount data-new`
test `expr $OLINK + $NLINK` -le 2 && {
	echo failed - no hardlinks
	# ls -l data-old data-new
	ls -l
	exit 1
}
test -x data-old && { echo expected data with no execute; exit 1; }
test -x data-new || { echo expected prog with execute; exit 1; }
echo OK
}

echo $N Test undo with many renames .................................$NL
cd "$HERE"/project 
for i in 0 1 2 3 4 5 6 7 8 9
do
    for j in 0 1 2 3 4 5 6 7 8 9
    do
	file=$i$j
	touch $file
	bk new $Q $file
    done
done
bk commit $Q -f -y"Added a hundred files"
for i in 0 1 2 3 4 5 6 7 8 9
do
    for j in 0 1 2 3 4 5 6 7 8 9
    do
	file=$i$j
	bk mv $file new-$file
    done
done
bk commit $Q -f -y"Moved a hundred files"
bk undo $Q -f -r+ 2>ERR || {
	echo failed
	echo
	cat ERR
	exit 1
}
echo OK

