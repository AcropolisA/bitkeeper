# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2007 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

#export _BK_TCP_CONNECT_FAIL=1

echo $N Create initial repository ...................................$NL
for f in 1 2 3 4 5 6 7 8 9
do	echo $f > F$f
	perl -e 'printf "a\000b\n"' >> F$f
done
commercial pmaster
bk bam server $Q . || exit 1
echo OK

echo $N Create some binary data and check BAM .......................$NL
cp "$HERE"/F1 bin.data
bk new $Q bin.data
cp ../F1 copy
bk new $Q copy
bk commit $Q -ybindata
test -d BitKeeper/BAM || exit 1
echo OK

echo $N Transfer file with sfio -B ..................................$NL
cd ..
bk clone $Q pmaster ptest || exit 1
cd pmaster
bk -r prs -hnd'$if(:BAMHASH:){:BAMHASH: :KEY: :MD5KEY|1.0:}' > keys
bk sfio -qBo - < keys > out || exit 1
cd ../ptest
test -d BitKeeper/BAM && {
	echo no BAM yet
	exit 1
}
bk sfio -qBi - < ../pmaster/out || exit 1
bk get $Q bin.data || exit 1
echo OK

echo $N Set up a remote fetch of a file .............................$NL
cd ..
bk clone $Q pmaster pcopy || exit 1
cd pcopy
test -d BitKeeper/BAM && exit 1
bk get $Q bin.data || exit 1
test -d BitKeeper/BAM || {
	echo BAM pool not restored
	exit 1
}
test -f bin.data || {
	echo File not gotten
	exit 1
}
checkfiles "$HERE"/F1 bin.data
echo OK

echo $N "Verify that bk clone fails if it can't find the bp server ...$NL"
cd "$HERE"/pmaster
bk clone $Q . ../gone || exit 1
bk bam server $Q ../gone || exit 1
rm -rf ../gone
cd ..
bk clone $Q pmaster pcopy2 2> ERR && exit 1
grep -q 'ERROR-unable to update BAM server' ERR || {
	cat ERR
	exit 1
}
(cd pmaster; bk bam server $Q . || exit 1)
echo OK

# XXX - this error message leaves a lot to be desired.
# cat ERR

echo $N Verify that bk fails if it cannot find BAM data .............$NL
bk clone $Q pmaster pjunk || exit 1
cd pjunk
test -d BitKeeper/BAM && exit 1
# remove my BAM server	
bk bam server $Q -r || exit 1
bk -Ur get $Q 2>ERR && {
	echo should have failed
	exit 1
}
grep -q "failed to fetch BAM data" ERR || exit 1
cd ..
rm -rf pjunk
cd pcopy
echo OK

echo $N Set up a remote fetch of a file to a -G file ................$NL
rm -fr BitKeeper/BAM
bk get $Q -G "pcopy data" bin.data || {
	echo get failed
	find BitKeeper/BAM -type f
	bk BAM data bin.data
	exit 1
}
test -d BitKeeper/BAM || {
	echo BAM pool not restored
	exit 1
}
test -f "pcopy data" || {
	echo File not gotten
	exit 1
}
echo OK

echo $N Set up a remote fetch of a file to a -G file through - ......$NL
rm -fr BitKeeper/BAM "pcopy data"
echo bin.data | bk get $Q -G "pcopy data" - || exit 1
test -d BitKeeper/BAM || {
	echo BAM pool not restored
	exit 1
}
test -f "pcopy data" || {
	echo File not gotten
	exit 1
}
checkfiles "$HERE"/F1 "pcopy data"
echo OK

echo $N Create local data and clone repo ............................$NL
cp "$HERE"/F2 F2
bk new $Q F2 || exit 1
bk mv bin.data F1 || exit 1
cp "$HERE"/F1 dupfile
bk new $Q dupfile || exit 1
bk commit $Q -ylocal || exit 1
cd "$HERE"
bk clone $Q pcopy pclone1 || exit 1
cd pclone1
bk get $Q F1 F2 || exit 1
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F2 F2
echo OK

echo $N Clone again in checkout:get mode ............................$NL
cd ..
BK_CONFIG=checkout:get bk clone $Q pcopy pclone4 || exit 1
cd pclone4
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F2 F2
echo OK

echo $N Try pulling the same csets plus new local work ..............$NL
cd ../pclone1
cp "$HERE"/F3 F3
bk new $Q F3 || exit 1
bk chmod +x F3 || exit 1
bk edit $Q F2 || exit 1
cat "$HERE"/F4 > F2
bk delta -y4 $Q F2 || exit 1
bk commit -ynew $Q || exit 1
cd "$HERE"
bk clone $Q pmaster pclone2 || exit 1
cd pclone2
bk pull $Q ../pclone1 || exit 1
bk get $Q F1 F2 F3 || exit 1
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F4 F2
checkfiles "$HERE"/F3 F3
echo OK

echo $N Now create new work and push ................................$NL
cd "$HERE"/pclone2
cp "$HERE"/F4 F4
bk new $Q F4 || exit 1
bk edit $Q F2 || exit 1
cat "$HERE"/F5 > F2
bk delta $Q -y5 F2 || exit 1
bk commit -ypush $Q || exit 1
bk clone $Q ../pmaster ../pclone3 || exit 1
bk push $Q ../pclone3 || exit 1
cd ../pclone3
bk get $Q F1 F2 F3 F4 || exit 1
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F5 F2
checkfiles "$HERE"/F3 F3
checkfiles "$HERE"/F4 F4
echo OK

echo $N Clone to different bp master ................................$NL
cd ..
bk clone $Q -B. pmaster cmaster || exit 1
cd cmaster
bk -Ur get $Q || exit 1
bk BAM check -Fq || exit 1
echo OK

echo $N Clone within czone and pull from p ..........................$NL
cd ..
bk clone $Q cmaster cclone1 || exit 1
cd cclone1
bk BAM check -F $Q || exit 1
bk pull $Q ../pclone3 || exit 1

bk get $Q F1 F2 F3 F4 || exit 1
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F5 F2
checkfiles "$HERE"/F3 F3
checkfiles "$HERE"/F4 F4
bk BAM check -Fq || exit 1
echo OK

echo $N Clone to repo without a bp master ...........................$NL
cd ..
bk clone -Bnone $Q cclone1 zclone1 || exit 1
cd zclone1
bk -Ur get $Q || exit 1
echo OK

echo $N Clone again in checkout:get mode ............................$NL
cd ..
BK_CONFIG='checkout:get!' bk clone -Bnone $Q cclone1 zclone3 || exit 1
cd zclone3
bk -Ur get $Q -S || exit 1
bk BAM check -Fq || exit 1
echo OK

echo $N Push new data across zones ..................................$NL
cd "$HERE"/cclone1
cp "$HERE"/F5 F5
bk new $Q F5 || exit 1
bk mv F1 F6 || exit 1
bk edit $Q F6 || exit 1
cp "$HERE"/F6 F6
bk delta -y6 $Q F6 || exit 1
bk commit -y6 $Q || exit 1
bk BAM check -Fq || exit 1
bk push $Q ../pclone2 || exit 1
cd ../pclone2
bk -r get $Q || exit 1
checkfiles "$HERE"/F5 F5
checkfiles "$HERE"/F6 F6
checkfiles "$HERE"/F3 F3
checkfiles "$HERE"/F4 F4
bk BAM check -Fq || exit 1
echo OK

echo $N Try remote clone across zones................................$NL
cd "$HERE"
P=`port 50000`
bk bkd -d -p$P -ikill
bk clone $Q -Bnone cclone1 bk://localhost:$P/zclone2 || exit 1
cd zclone2 || exit 1
bk BAM check -Fq || exit 1
echo OK

echo $N Try remote push across zones with file based bp master url ..$NL
# Assume (from above) that cclone1 and pclone2 are equal and have different
# masters.  Access the cclone1 through the bkd.  The failure depends on
# the 'c' BAM_master being a file url and not a bk:// url.
cd "$HERE/pclone2"
cp "$HERE/F7" .
bk new $Q F7
bk commit $Q -yF7
bk push $Q bk://localhost:$P/cclone1 || {
	echo push failed
	bk _kill bk://localhost:$P
	exit 1
}
cd ../cclone1
bk get $Q -S || {
	echo get failed
	bk _kill bk://localhost:$P
	exit 1
}
checkfiles "$HERE"/F7 F7
echo OK

echo $N Repeat push using http ......................................$NL
bk unpull -f $Q || exit 1
bk BAM clean || exit 1
cd ../pclone2
bk push $Q http://localhost:$P/cclone1 || {
	echo push failed
	bk _kill bk://localhost:$P
	exit 1
}
cd ../cclone1
bk get $Q -S || {
	echo get failed
	bk _kill bk://localhost:$P
	exit 1
}
checkfiles "$HERE"/F7 F7
echo OK

echo $N Now do an http pull .........................................$NL
bk unpull -f $Q || exit 1
bk BAM clean || exit 1
bk pull $Q http://localhost:$P/pclone2 || {
	bk _kill bk://localhost:$P
	exit 1
}
bk BAM check $Q || exit 1
echo OK

bk _kill bk://localhost:$P

echo $N Test BAM reattach ...........................................$NL
cd "$HERE"/cclone1
bk -r clean || exit 1
mv BitKeeper/BAM junk
bk -r get $Q 2>ERR && {
	echo should have failed
	exit 1
}
find junk -type f | bk BAM reattach $Q - || exit 1
bk -r get $Q || exit 1
echo OK

echo $N Test BAM clean ..............................................$NL
for i in 155 236 317
do
	echo $i > t.$i
	echo $i > $i
	bk new -b $Q $i || exit 1
done

bk get $Q || exit 1
cmpfiles t.155 155
cmpfiles 155 BitKeeper/BAM/01/01d700a5.d1
cmpfiles t.317 317
cmpfiles 317 BitKeeper/BAM/01/01d700a5.d3

bk clean || exit 1
bk stripdel $Q -r.. 155 || exit 1
bk BAM clean || exit 1
bk BAM check $Q || exit 1
bk get $Q || exit 1
cmpfiles t.236 236
cmpfiles 236 BitKeeper/BAM/01/01d700a5.d1
cmpfiles t.317 317
cmpfiles 317 BitKeeper/BAM/01/01d700a5.d2
echo 155 > 155
bk new -b $Q 155 || exit 1
bk clean || exit 1
bk stripdel $Q -r.. 236 || exit 1
bk stripdel $Q -r.. 317 || exit 1
bk BAM clean || exit 1
bk BAM check $Q || exit 1
bk get $Q || exit 1
cmpfiles t.155 155
cmpfiles 155 BitKeeper/BAM/01/01d700a5.d1
echo OK

echo $N Test BAM check ..............................................$NL
chmod u+w BitKeeper/BAM/01/01d700a5.d1
echo 1 > BitKeeper/BAM/01/01d700a5.d1
bk BAM check -q 2>ERR && {
	echo should have failed
	exit 1
}
grep -q 'has a hash mismatch' ERR || exit 1
test `wc -l < ERR` -eq 2 || exit 1
bk -r check -acc 2>ERR && {
	echo should have failed
	exit 1
}
grep -q 'has a hash mismatch' ERR || exit 1
test `wc -l < ERR` -eq 2 || exit 1
rm BitKeeper/BAM/01/01d700a5.d1
bk BAM check -q 2>ERR && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q 'Failed to locate' ERR || exit 1
test `wc -l < ERR` -eq 2 || exit 1
bk -r check -a || exit 1
bk -r check -aB 2>ERR && {
	echo should have failed
	exit 1
}
grep -q 'Failed to locate' ERR || exit 1
test `wc -l < ERR` -eq 2 || exit 1
echo 155 > BitKeeper/BAM/01/01d700a5.d1
bk BAM check $Q || exit 1
echo OK

echo $N Test BAM push ...............................................$NL
cd ../pclone1
echo 201 > 201
bk new -b $Q 201 || exit 1
bk commit $Q -y201 || exit 1
bk get $Q 201
test -e ../pmaster/BitKeeper/BAM/01/01c4009d.d1 && exit 1
bk BAM push $Q || exit 1
cmpfiles 201 ../pmaster/BitKeeper/BAM/01/01c4009d.d1

bk undo $Q -fsa1.4 || exit 1

# tweak old update bug
bk push $Q || exit 1
echo OK

# Use BAM log to make sure that data isn't moved more
# than necessary
BLOG=BitKeeper/log/BAM.index
# mychecklog <file> <# expected items>
mychecklog() {
	test -e $1 || {
		echo failed
		echo
		echo Cannot find $1
		exit 1
	}
	_count=`wc -l < $1`
	test $_count -eq $2 || {
		echo failed
		echo
		echo Expected $2 items in $1
		exit 1
	}
}

echo ---- Check that BAM data moves once ...
echo $N .... after pull, unpull, pull sequence.......................$NL
cd "$HERE"
bk clone $Q pmaster pclone5
cd pclone5
bk get $Q
count1=` wc -l < $BLOG`
test $count1 -eq 2 || {
	echo failed
	echo
	echo Expected 2 lines in $BLOG
	exit 1
}
bk pull $Q ../pclone3
bk get $Q
count2=` wc -l < $BLOG`
test $count2 -gt $count1 || {
	echo failed
	echo
	echo Expected more lines in $BLOG after get
	exit 1
}
bk unpull -f $Q
count3=` wc -l < $BLOG`
test $count2 -eq $count3 || {
	echo failed
	echo
	echo Expected number of lines in $BLOG to not change after unpull
	exit 1
}
bk pull $Q ../pclone3
bk get $Q
count4=` wc -l < $BLOG`
test $count2 -eq $count4 || {
	echo failed
	echo
	echo Expected number of lines in $BLOG to not change after re-pull
	exit 1
}
echo OK
echo $N .... after adding a new file.................................$NL
cp "$HERE"/F5 .
bk new $Q F5
bk commit $Q -f -y"Added F5"
count5=`wc -l < $BLOG`
test $count5 -gt $count4 || {
	echo failed
	echo Expected number of lines in $BLOG to differ from parent.
	exit 1
}
count6=`wc -l < ../pmaster/$BLOG`
bk push $Q
count7=`wc -l < ../pmaster/$BLOG`
test $count7 -gt $count6 || {
	echo failed
	echo Expected number of lines in ../pmaster/$BLOG
	echo to increase in push
	exit 1
}
echo OK
echo $N .... after copy clone pulls from project clone...............$NL
# Invite copy master and copy clone
cd "$HERE"
bk clone $Q cmaster cclone5
cd cclone5
# Use get because 
# bk BAM pull $Q
# doesn't work because pull is missing -q
bk get $Q
mychecklog $BLOG 2
mychecklog ../cmaster/$BLOG 10
bk pull $Q ../pclone5
mychecklog $BLOG 3
mychecklog ../cmaster/$BLOG 10
bk -Ur get $Q
mychecklog $BLOG 7
mychecklog ../cmaster/$BLOG 10
bk BAM push $Q
mychecklog $BLOG 7
mychecklog ../cmaster/$BLOG 11
bk push $Q
mychecklog $BLOG 7
mychecklog ../cmaster/$BLOG 11
echo OK
echo $N Check binary create conflict.................................$NL
cd "$HERE"
rm -rf pclone[67]
bk clone $Q pmaster pclone6
bk clone $Q pmaster pclone7
cd pclone6
echo foo > foo
perl -e 'printf "q\000\001\002b\n"' >> foo
bk new $Q foo
bk commit $Q -f -y"Added foo"
cd ../pclone7
echo foo > foo
perl -e 'printf "q\000\001\002b\n"' >> foo
bk new $Q foo
bk commit $Q -f -y"Added foo"
bk pull $Q ../pclone6 2>ERR <<EOF
rl
y
EOF
test $? -eq 0 || {
	echo failed
	exit 1
}
echo OK
echo $N Check binary file automerge..................................$NL
cd "$HERE"
rm -rf pclone[67]
bk clone $Q pmaster pclone6
bk clone $Q pmaster pclone7
cd pclone6
bk edit $Q F5
perl -e 'printf "b\000b\n"' >> F5
bk ci $Q -y"Added stuff" F5
bk commit $Q -f -y"Added stuff to F5"
cd ../pclone7
bk edit $Q F5
perl -e 'printf "b\000b\n"' >> F5
bk ci $Q -y"Added other stuff" F5
bk commit $Q -f -y"Added other stuff to F5"
bk pull $Q ../pclone6 2>ERR
test $? -eq 0 || {
	echo failed
	exit 1
}
echo OK
echo $N Check basic binary file conflicts............................$NL
cd "$HERE"
rm -rf pclone[67]
bk clone $Q pmaster pclone6
bk clone $Q pmaster pclone7
cd pclone6
bk edit $Q F5
perl -e 'printf "b\000b\n"' >> F5
bk ci $Q -y"Added stuff" F5
bk commit $Q -f -y"Added stuff to F5"
cd ../pclone7
bk edit $Q F5
perl -e 'printf "c\000b\n"' >> F5
bk ci $Q -y"Added other stuff" F5
bk commit $Q -f -y"Added other stuff to F5"
bk pull $Q ../pclone6 2>ERR <<EOF
ul
Merge comment
.
EOF
test $? -eq 0 || {
	echo failed
	exit 1
}
echo OK
echo $N Check binary file automerge with attribute conflict..........$NL
cd "$HERE"
rm -rf pclone[67]
bk clone $Q pmaster pclone6
bk clone $Q pmaster pclone7
cd pclone6
bk chmod +x F5
bk commit $Q -f -y"Added execute to F5"
cd ../pclone7
bk edit $Q F5
perl -e 'printf "b\000b\n"' >> F5
bk ci $Q -y"Added other stuff" F5
bk commit $Q -f -y"Added other stuff to F5"
bk pull $Q ../pclone6 2>ERR <<EOF
ul
Merge comment
.
EOF
test $? -eq 0 || {
	echo failed
	exit 1
}
echo "failed (bug - feature not implemented)"
#exit 1
