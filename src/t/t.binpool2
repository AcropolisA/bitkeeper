# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2007 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

#export _BK_TCP_CONNECT_FAIL=1

echo $N Create initial repository ...................................$NL
for f in 1 2 3 4 5 6 7 8 9
do	echo $f > F$f
	perl -e 'printf "a\000b\n"' >> F$f
done
commercial pmaster
cd BitKeeper/etc
bk edit $Q config
cat <<EOF >> config
[:*/p*]binpool_server: file://$HERE/pmaster
[:*/c*]binpool_server: file://$HERE/cmaster
EOF
bk delta $Q -yc config || exit 1
bk commit $Q -yc || exit 1
cd "$HERE"/pmaster
echo OK

echo $N Create some binary data and check binpool ...................$NL
cp "$HERE"/F1 bin.data
bk new $Q bin.data
cp ../F1 copy
bk new $Q copy
bk commit $Q -ybindata
test -d BitKeeper/binpool || exit 1
echo OK

echo $N Transfer file with fsend/frecv ..............................$NL
cd ..
bk clone $Q pmaster ptest || exit 1
cd pmaster
bk -r prs -hnd'$if(:BPHASH:){:MD5KEY|1.0: :MD5KEY: :BPHASH:}' > keys
bk fsend -Bsend - < keys > out || exit 1
cd ../ptest
bk frecv -Brecv - < ../pmaster/out || exit 1
bk get $Q bin.data || exit 1
echo OK

echo $N Set up a remote fetch of a file .............................$NL
cd ..
bk clone $Q pmaster pcopy || exit 1
cd pcopy
rm -fr BitKeeper/binpool
bk get $Q bin.data || exit 1
test -d BitKeeper/binpool || {
	echo Binpool not restored
	exit 1
}
test -f bin.data || {
	echo File not gotten
	exit 1
}
checkfiles "$HERE"/F1 bin.data
echo OK

echo $N Verify that bk clone fails if it can\'t find the bp server ...$NL
cd "$HERE"
BK_CONFIG="binpool_server:file://$HERE/gone!" \
	bk clone pmaster pcopy2 2> ERR && exit 1
grep -q 'ERROR-unable to update binpool server' ERR || exit 1
echo OK

echo $N Verify that bk fails if it cannot find binpool data .........$NL
bk clone $Q pmaster pjunk || exit 1
cd pjunk
# use myself as the binpool server	
BK_CONFIG='binpool_server:.!' bk -Ur get $Q 2>ERR && {
	echo should have failed
	exit 1
}
grep -q "failed to fetch binpool data" ERR || exit 1
cd ..
rm -rf pjunk
cd pcopy
echo OK

echo $N Set up a remote fetch of a file to a -G file ................$NL
rm -fr BitKeeper/binpool
bk get $Q -G "pcopy data" bin.data || {
	echo get failed
	find BitKeeper/binpool -type f
	bk binpool data bin.data
	exit 1
}
test -d BitKeeper/binpool || {
	echo Binpool not restored
	exit 1
}
test -f "pcopy data" || {
	echo File not gotten
	exit 1
}
echo OK

echo $N Set up a remote fetch of a file to a -G file through - ......$NL
rm -fr BitKeeper/binpool "pcopy data"
echo bin.data | bk get $Q -G "pcopy data" - || exit 1
test -d BitKeeper/binpool || {
	echo Binpool not restored
	exit 1
}
test -f "pcopy data" || {
	echo File not gotten
	exit 1
}
checkfiles "$HERE"/F1 "pcopy data"
echo OK

echo $N Create local data and clone repo ............................$NL
cp "$HERE"/F2 F2
bk new $Q F2 || exit 1
bk mv bin.data F1 || exit 1
cp "$HERE"/F1 dupfile
bk new $Q dupfile || exit 1
bk commit $Q -ylocal || exit 1
cd "$HERE"
bk clone $Q pcopy pclone1 || exit 1
cd pclone1
bk get $Q F1 F2 || exit 1
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F2 F2
echo OK

echo $N Clone again in checkout:get mode ............................$NL
cd ..
BK_CONFIG=checkout:get bk clone $Q pcopy pclone4 || exit 1
cd pclone4
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F2 F2
echo OK

echo $N Try pulling the same csets plus new local work ..............$NL
cd ../pclone1
cp "$HERE"/F3 F3
bk new $Q F3 || exit 1
bk chmod +x F3 || exit 1
bk edit $Q F2 || exit 1
cat "$HERE"/F4 > F2
bk delta -y4 $Q F2 || exit 1
bk commit -ynew $Q || exit 1
cd "$HERE"
bk clone $Q pmaster pclone2 || exit 1
cd pclone2
bk pull $Q ../pclone1 || exit 1
bk get $Q F1 F2 F3 || exit 1
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F4 F2
checkfiles "$HERE"/F3 F3
echo OK

echo $N Now create new work and push ................................$NL
cd "$HERE"/pclone2
cp "$HERE"/F4 F4
bk new $Q F4 || exit 1
bk edit $Q F2 || exit 1
cat "$HERE"/F5 > F2
bk delta $Q -y5 F2 || exit 1
bk commit -ypush $Q || exit 1
bk clone $Q ../pmaster ../pclone3 || exit 1
bk push $Q ../pclone3 || exit 1
cd ../pclone3
bk get $Q F1 F2 F3 F4 || exit 1
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F5 F2
checkfiles "$HERE"/F3 F3
checkfiles "$HERE"/F4 F4
echo OK

echo $N Clone to different bp master ................................$NL
unset BK_CONFIG
cd ..
bk clone $Q pmaster cmaster || exit 1
cd cmaster
bk -Ur get $Q || exit 1
echo OK

echo $N Clone within czone and pull from p ..........................$NL
cd ..
bk clone $Q cmaster cclone1 || exit 1
cd cclone1
bk pull $Q ../pclone3 || exit 1

bk get $Q F1 F2 F3 F4 || exit 1
checkfiles "$HERE"/F1 F1
checkfiles "$HERE"/F5 F2
checkfiles "$HERE"/F3 F3
checkfiles "$HERE"/F4 F4
echo OK

echo $N Clone to repo without a bp master ...........................$NL
cd ..
bk clone $Q cclone1 zclone1 || exit 1
cd zclone1
bk -Ur get $Q || exit 1
echo OK

echo $N Clone again in checkout:get mode ............................$NL
cd ..
BK_CONFIG='checkout:get!' bk clone $Q cclone1 zclone3 || exit 1
cd zclone3
bk -Ur get $Q -S || exit 1
echo OK

echo $N Push new data across zones ..................................$NL
cd "$HERE"/cclone1
cp "$HERE"/F5 F5
bk new $Q F5 || exit 1
bk mv F1 F6 || exit 1
bk edit $Q F6 || exit 1
cp "$HERE"/F6 F6
bk delta -y6 $Q F6 || exit 1
bk commit -y6 $Q || exit 1
bk push $Q ../pclone2 || exit 1
cd ../pclone2
bk -r get $Q || exit 1
checkfiles "$HERE"/F5 F5
checkfiles "$HERE"/F6 F6
checkfiles "$HERE"/F3 F3
checkfiles "$HERE"/F4 F4
echo OK

echo $N Try remote clone across zones ...............................$NL
cd "$HERE"
P=`port 50000`
bk bkd -d -p$P -ikill
bk clone $Q cclone1 bk://localhost:$P/zclone2 || exit 1
cd zclone2 || exit 1
bk -Ur get $Q || exit 1
echo OK

echo $N Try remote push across zones with file based bp master url ..$NL
# Assume (from above) that cclone1 and pclone2 are equal and have different
# masters.  Access the cclone1 through the bkd.  The failure depends on
# the 'c' binpool_master being a file url and not a bk:// url.
cd "$HERE/pclone2"
cp "$HERE/F7" .
bk new $Q F7
bk commit $Q -yF7
bk push $Q bk://localhost:$P/cclone1 || {
	echo push failed
	bk _kill bk://localhost:$P
	exit 1
}
cd ../cclone1
bk get $Q -S || {
	echo get failed
	bk _kill bk://localhost:$P
	exit 1
}
checkfiles "$HERE"/F7 F7
echo OK

bk _kill bk://localhost:$P

echo $N Test binpool repair .........................................$NL
cd "$HERE"/zclone2
bk -r clean || exit 1
mv BitKeeper/binpool junk
bk -r get $Q 2>ERR && {
	echo should have failed
	exit 1
}
bk binpool repair $Q junk || exit 1
bk -r get $Q || exit 1
echo OK

echo $N Test binpool flush ..........................................$NL
for i in 155 236 317
do
	echo $i > t.$i
	echo $i > $i
	bk new -b $Q $i || exit 1
done

bk get $Q || exit 1
cmpfiles t.155 155
cmpfiles 155 BitKeeper/binpool/01/01d700a5.d1
cmpfiles t.317 317
cmpfiles 317 BitKeeper/binpool/01/01d700a5.d3

bk clean || exit 1
bk stripdel $Q -r.. 155 || exit 1
bk binpool flush || exit 1
bk binpool check $Q || exit 1
bk get $Q || exit 1
cmpfiles t.236 236
cmpfiles 236 BitKeeper/binpool/01/01d700a5.d1
cmpfiles t.317 317
cmpfiles 317 BitKeeper/binpool/01/01d700a5.d2
echo 155 > 155
bk new -b $Q 155 || exit 1
bk clean || exit 1
bk stripdel $Q -r.. 236 || exit 1
bk stripdel $Q -r.. 317 || exit 1
bk binpool flush || exit 1
bk binpool check $Q || exit 1
bk get $Q || exit 1
cmpfiles t.155 155
cmpfiles 155 BitKeeper/binpool/01/01d700a5.d1
echo OK

echo $N Test binpool check ..........................................$NL
echo 1 > BitKeeper/binpool/01/01d700a5.d1
bk binpool check -q 2>ERR && {
	echo should have failed
	exit 1
}
grep -q 'has the incorrect hash' ERR || exit 1
test `wc -l < ERR` -eq 2 || exit 1
rm BitKeeper/binpool/01/01d700a5.d1
bk binpool check -q 2>ERR && {
	echo should have failed
	exit 1
}
grep -q 'Failed to locate' ERR || exit 1
test `wc -l < ERR` -eq 2 || exit 1
echo 155 > BitKeeper/binpool/01/01d700a5.d1
bk binpool check $Q || exit 1
echo OK

echo $N Test binpool push ...........................................$NL
cd ../pclone1
echo 201 > 201
bk new -b $Q 201 || exit 1
bk commit $Q -y201 || exit 1
bk get $Q 201
test -e ../pmaster/BitKeeper/binpool/01/01c4009d.d1 && exit 1
bk binpool push || exit 1
cmpfiles 201 ../pmaster/BitKeeper/binpool/01/01c4009d.d1

bk undo $Q -fsa1.4 || exit 1

# tweak old update bug
bk push $Q || exit 1
echo OK
