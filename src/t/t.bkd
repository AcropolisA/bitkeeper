# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.


# Copyright (c) 1999 Andrew Chang?
# awc@etp2.bitmover.com|src/t/t.repository|20000322041145|27344

OK_LICENSE=BKL43148331000b0ffb7b09680010fff
echo $N Create initial repository ...................................$NL
no_logging project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -f SCCS/s.ChangeSet ]; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
bk sane 2> sane.out || { echo failed; cat sane.out; exit 1; }
echo OK
echo $N Create some data ............................................$NL
mkdir src
cd src
echo foo > foo.c
echo bar > bar.c
echo h > h.h
bk ci $Q -i foo.c bar.c h.h
bk commit $Q -ycset1
if [ ! -f SCCS/s.foo.c ]; then echo failed to create history; exit 1; fi
echo OK
echo $N clone the workspace .........................................$NL
bk clone $Q $HERE/project $HERE/copy
cd $HERE/copy
P=50000
bk bkd -q -d -p$P -c1 
while [ $? -eq 2 ]
do	P=`expr $P + 1`
	bk bkd -q -d -p$P -c1 
done
echo OK
# Win32 note: If bkd binary is on a network drive
# NT will refuse to start the bkd service. (permission denied)
# Please make sure the bk binary is on a local disk
# before you run this test.
echo $N "push a new changeset via bkd (no compression)" ...............$NL
cd $HERE/project/src
echo woo > woo.c
bk ci $Q -i woo.c
bk commit $Q -ycset1
bk push $Q -z0 bk://localhost:$P
cd $HERE/copy/src
if [ ! -f SCCS/s.woo.c ]; then echo failed; exit 1; fi
echo OK
echo $N "pull a new changeset via bkd (no compression)" ...............$NL
cd $HERE/project/src
echo zoo > zoo.c
bk ci $Q -i zoo.c
bk commit $Q -ycset1
cd $HERE/project
P=50000
bk bkd -q -d -p$P -c1 
while [ $? -eq 2 ]
do	P=`expr $P + 1`
	bk bkd -q -d -p$P -c1 
done
cd $HERE/copy/src
bk pull $Q -t -z0 bk://localhost:$P
if [ ! -f SCCS/s.zoo.c ]; then echo failed; exit 1; fi
echo OK
echo $N "pull a new changeset via bkd (with compression)" .............$NL
cd $HERE/project/src
echo boo > boo.c
bk ci $Q -i boo.c
bk commit $Q -ycset1
cd $HERE/project
P=50000
bk bkd -q -d -p$P -c1 
while [ $? -eq 2 ]
do	P=`expr $P + 1`
	bk bkd -q -d -p$P -c1 
done
cd $HERE/copy/src
bk pull -t $Q bk://localhost:$P
if [ ! -f SCCS/s.boo.c ]; then echo failed; exit 1; fi
echo OK
echo $N "push a new changeset via bkd (with compression)" .............$NL
cd $HERE/copy
P=50000
bk bkd -q -d -p$P -c1 
while [ $? -eq 2 ]
do	P=`expr $P + 1`
	bk bkd -q -d -p$P -c1 
done
cd $HERE/project/src
echo aoo > aoo.c
bk ci $Q -i aoo.c
bk commit $Q -ycset1
bk push $Q -z6 bk://localhost:$P
cd $HERE/copy/src
if [ ! -f SCCS/s.aoo.c ]; then echo failed; fi
echo OK
echo $N clone a tree via bkd ........................................$NL
cd $HERE/project
P=50000
bk bkd -q -d -p$P -c1 
while [ $? -eq 2 ]
do	P=`expr $P + 1`
	bk bkd -q -d -p$P -c1 
done
bk clone $Q bk://localhost:$P $HERE/copy2
cd $HERE/copy2/src
if [ ! -f SCCS/s.aoo.c ]; then echo failed; fi
echo OK
echo $N "pull a new changeset via bkd -xcd -xpush " ...................$NL
cd $HERE/project/src
echo coo > coo.c
bk ci $Q -i coo.c
bk commit $Q -ycset1
cd $HERE/project
P=50000
bk bkd -q -d -p$P -xcd -xpush -c1 
while [ $? -eq 2 ]
do	P=`expr $P + 1`
	bk bkd -q -d -p$P -xcd -xpush -c1 
done
cd $HERE/copy/src
bk pull -t $Q bk://localhost:$P
if [ ! -f SCCS/s.coo.c ]; then echo failed; exit 1; fi
echo OK
echo $N check a push to bkd with a gfile conflict ...................$NL
if [ "$PLATFORM" = "UNIX" ];then CNT=5; else CNT=2; fi
P=50000
cd $HERE/project
bk bkd -q -d -p$P -xcd -c$CNT
while [ $? -eq 2 ]
do	P=`expr $P + 1`
	bk bkd -q -d -p$P -xcd -c$CNT
done
cd $HERE/project
echo data1 > conflict.c
cd $HERE/copy
echo data2 > old.c
bk new $Q old.c
bk commit $Q -yold.c
bk push -c1 $Q bk://localhost:$P
cd $HERE/project
while ! bk lock -s; do true; done
cd $HERE/copy
bk mv old.c conflict.c
bk commit $Q -ygconflict
echo "" | bk push -c1 bk://localhost:$P 2> bk.out 
grep -q "Did not resolve 1 renames, no conflicts causing abort." bk.out
if [ $? -ne 0 ]; then echo failed; cat bk.out; exit 1; fi
rm -f  $HERE/project/conflict.c
echo OK
if [ "$PLATFORM" = "UNIX" ]
then #-------------------------------------------------------------------------
echo $N check http pull from bkd ....................................$NL
waitForUnlock $HERE/project
cd $HERE/project/src
bk edit $Q bar.c
echo data3 > bar.c
bk delta $Q -ydata3 bar.c
bk commit $Q -ydata3
cd $HERE/copy
bk pull $Q http://localhost:$P
if [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK
echo $N check http clone from bkd ...................................$NL
cd $HERE
bk clone $Q http://localhost:$P $HERE/project2
if [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK
else
bk bkd -R 2> $DEV_NULL
fi #---------------------------------------------------------------------------

# Check bk basic mode behaviour
echo $N Make sure bk/basic limits access to master repository only ..$NL
cd $HERE/copy/BitKeeper/etc
bk edit $Q config
echo "description: BitKeeper Test repository" > config
echo "email:		nobody@nowhere.bk" >> config
echo "license: $OK_LICENSE" >> config
echo "logging: private@me.com" >>  config
bk ci $Q -y"set close logging"  config
echo y | bk commit $Q -y"set close logging" > /dev/null 2>&1
P=50000
cd $HERE
bk bkd -q -d -p$P -c6
while [ $? -eq 2 ]
do	P=`expr $P + 1`
	bk bkd -q -d -p$P -c6 
done
cd $HERE
bk clone bk://localhost:$P$HERE/copy $HERE/copy3 2> bk.out1
grep -q "bkd std cannot access non-master" bk.out1
if [ $? -ne 0 ]; then echo failed 1; cat bk.out1; exit 1; fi
cd $HERE/copy2
bk pull -c0 bk://localhost:$P$HERE/copy 2> bk.out2
grep -q "bkd std cannot access non-master" bk.out2
if [ $? -ne 0 ]; then echo failed 2; cat bk.out1 bk.out2; exit 1; fi
waitForUnlock $HERE/copy
bk push -c0 bk://localhost:$P$HERE/copy 2> bk.out3
grep -q "bkd std cannot access non-master" bk.out3
if [ $? -ne 0 ]; then echo failed 3; cat bk.out2 bk.out3; exit 1; fi
echo OK
echo $N Make sure bk/basic allows clone from master repository ......$NL
mkdir $HERE/copy/BitKeeper/etc/.master
bk clone $Q bk://localhost:$P$HERE/copy $HERE/copy3
if [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK
echo $N Make sure bk/basic allows push to master repository .........$NL
cd $HERE/copy2
ls > JUNK
bk new $Q JUNK
(cd $HERE/copy; bk _loggingaccepted; )
bk commit $Q -ywhatever
bk push -t bk://localhost:$P$HERE/copy 2> bk.out
grep -q "pushing to is 4 changesets" bk.out
if [ $? -ne 0 ]; then echo failed; cat bk.out; exit 1; fi
echo OK
echo $N Make sure bk/basic allows pull from master repository .......$NL
cd $HERE/copy
while ! bk lock -s; do true; done
cd $HERE/copy2
bk undo -fqr+
bk pull $Q -t bk://localhost:$P$HERE/copy
if [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK
