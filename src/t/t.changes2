# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.


# Copyright (c) 2002 lm, 2005 rick
# %K%

# changes is a powerful query command.  To try to have a meaningful
# test coverage and know what it is, the test are laid out:
#    local repo
#	ways to specify revision
#	options
#	combinations
#    remote repo
#	ways to specify url
#	ways to specify revision
#       options - cursory
#
# changes makes use of many features.
# Exhaustive, edge detection tests are not duplicated here.
# Here's where to look:
#	dspec - t.prs
#	glob - t.glob
#	range - t.range
#	regex - t.regex
#	url - t.bkd

# Layout of tests in this file
#  local - run through options assuming we are in a repo
#  remote - run through options assuming we are outside a repo
#  difference - test -L and -R commands for doing difference across wire
#  other - pull -n testing that was here before (move to pull?)

# Have this be global
fail() {
	echo failed
	exit 1
}

echo $N Create repositories and see if changes works ................$NL
# simple - get user name of current tip make a few deltas with new name
commercial simple
bk changes > OUT || fail
NAME=`bk changes -r+ -nd:USER:`
NAME1=${NAME}X
NAME2=X${NAME}
TAGGER=${NAME}tag
cd ..
bk clone $Q simple diamond
cd diamond
touch g
BK_USER=$NAME1 bk delta $Q -i -y'trunk base' g
BK_USER=$NAME1 bk commit $Q -y'trunk base' || fail
cd ../simple
touch f
BK_USER=$NAME1 bk delta $Q -i -y'Initial checkin' f
BK_USER=$NAME1 bk commit $Q -y'Initial checkin' || fail
cd ../diamond
bk pull $Q
cd ../simple
bk edit $Q f
BK_USER=$NAME2 bk delta $Q -fy'Second checkin' f
BK_USER=$NAME2 bk commit $Q -Ssecond -y'Second checkin' || fail
cd ../diamond
bk edit $Q f g
BK_USER=$NAME2 bk delta $Q -fy'Branch checkin' f g
BK_USER=$NAME2 bk commit $Q -Sbranch -y'Branch checkin' || fail
bk pull $Q
BK_USER=$TAGGER bk tag $Q MYTAG
echo OK

echo $N Run changes when not in a repo ..............................$NL
cd $HERE
bk changes 2> ERR && fail
grep -q "Cannot find package root" ERR || fail
echo OK

### ways to specify a revision (see t.range for revision testing)

echo $N Specify revision - rev, tag, list, range, date, stdin .......$NL
cd $HERE/simple
test 1.3 = `bk changes -r+ -d:I:` || fail
test 1.2 = `bk changes -r1.2 -d:I:` || fail
test 1.3 = `bk changes -rsecond -d:I:` || fail
LIST=`bk changes -d":I: "`
test "1.3 1.2 1.1 1.0 " = "$LIST" || fail
LIST=`bk changes -r1.2,1.3 -d":I: "`
test "1.3 1.2 " = "$LIST" || fail
LIST=`bk changes -r1.1..1.3 -d":I: "`
test "1.3 1.2 " = "$LIST" || fail
DATE=`bk changes -r1.2 -nd:UTC: | sed 's/..//'`
test 1.2 = `bk changes -c$DATE -d:I:` || fail
test 1.2 = `echo 1.2 | bk changes -d:I: -` || fail
echo OK

# format options -f, -h, -k, -n

echo $N Specify direction with -f ...................................$NL
LIST=`bk changes -f -d":I: "`
test "1.0 1.1 1.2 1.3 " = "$LIST" || fail
echo OK

echo $N Check html output with -h ...................................$NL
bk changes -r+ -h | grep -q '<html>' || fail
# no html and dspec at the same time
bk changes -r+ -h -d:I: > OUT 2> ERR && fail
echo OK

echo $N Check that keys output with -k ..............................$NL
bk prs -r+ -hnd:KEY: ChangeSet > WANT
bk changes -kr+ > GOT
checkfiles WANT GOT
echo OK

echo $N Check newlines added with -n ................................$NL
bk changes -d":I: " > GOT
printf "1.3 1.2 1.1 1.0 " > WANT
checkfiles WANT GOT
bk changes -nd":I: " > GOT
printf "1.3 \n1.2 \n1.1 \n1.0 \n" > WANT
checkfiles WANT GOT
echo OK

# restrict options: -a, -e, -m, -i/-x, -t, -u/-U, -/

echo $N Check that -a lists tags and empty merges ...................$NL
cd $HERE/diamond
bk changes -a -nd:KEY: | bk sort > WITH
bk changes -nd:KEY: > WITHOUT
bk changes -ar1.3 -nd:KEY: > EMPTY
bk changes -ad'$if(:DT:=T){:KEY:\n}' > TAG
test -s WITH -a -s WITHOUT -a -s EMPTY -a -s TAG || fail
cat WITHOUT EMPTY TAG | bk sort > SORT
checkfiles WITH SORT
echo OK

echo $N Check that -e adds in empty merges ..........................$NL
# continuation from above
bk changes -e -nd:KEY: | bk sort > WITH
cat WITHOUT EMPTY | bk sort > SORT
checkfiles WITH SORT
echo OK

echo $N Check that -e toggles: -ae means tag with no empty ..........$NL
# continuation from above
bk changes -ae -nd:KEY: | bk sort > WITH
cat WITHOUT TAG | bk sort > SORT
checkfiles WITH SORT
# show reverse order changes output: -e has no affect
bk changes -ea -nd:KEY: | bk sort > WITH
cat WITHOUT EMPTY TAG | bk sort > SORT
checkfiles WITH SORT
echo OK

echo $N Check that -k implies -a ....................................$NL
# continuation from above / check -k implies -D later down
bk changes -k | bk sort > WITH
cat WITHOUT EMPTY TAG | bk sort > SORT
checkfiles WITH SORT
echo OK

echo $N Check that -m removes all merges ............................$NL
bk changes -e -nd:KEY: | bk sort > WITH
bk changes -m -nd:KEY: > WITHOUT
bk changes -a -d'$if(:MERGE:){:KEY:\n}' > MERGES
test -s WITH -a -s WITHOUT -a -s MERGES || fail
cat WITHOUT MERGES | bk sort > SORT
checkfiles WITH SORT
echo OK

# -i/-x with file f -- see t.glob for full glob tests
# note: 1.4 is in both of these lists because the cset includes
# files that are both in the rule and outside the rule.

echo $N Check for -i restricting to csets changing subset of files ..$NL
# always removes 1.0
LIST=`bk changes -if -d":I: "`
test "1.5 1.4 1.1.1.2 1.1.1.1 " = "$LIST" || fail
echo OK

echo $N Check for -x pruning csets which only changes subset ........$NL
# always prints 1.0
LIST=`bk changes -xf -d":I: "`
test "1.4 1.2 1.1 1.0 " = "$LIST" || fail
echo OK

echo $N Check for -x and -i restricting to desired patterns .........$NL
# included and excluded removes empty csets, like the 1.0 cset
LIST=`bk changes -i'*' -xf -d":I: "`
test "1.4 1.2 1.1 " = "$LIST" || fail
echo OK

# -t 

echo $N Check tag listing with -t ...................................$NL
cd $HERE/simple
LIST=`bk changes -t -d:I:` 
test 1.3 = "$LIST" || fail
echo OK

# -u/U  user

echo $N Check that filtering on included users with -u ..............$NL
cd $HERE/simple
LIST=`bk changes -u$NAME2 -d:I:`
test 1.3 = "$LIST" || fail
LIST=`bk changes -u$NAME1 -u$NAME2 -d":I: "`
test "1.3 1.2 " = "$LIST" || fail
echo OK

echo $N Check that filtering on excluded users with -U ..............$NL
LIST=`bk changes -U$NAME2 -d":I: "`
test "1.2 1.1 1.0 " = "$LIST" || fail
LIST=`bk changes -U$NAME2 -U$NAME1 -d":I: "`
test "1.1 1.0 " = "$LIST" || fail
echo OK

# -/ search

echo $N Check that -/search/ works ..................................$NL
LIST=`bk changes -/Second/ -d:I:`
test 1.3 = "$LIST" || fail
LIST=`bk changes -/second/i -d:I:`
test 1.3 = "$LIST" || fail
echo OK

echo $N Check that -/regex/ works ...................................$NL
LIST=`bk changes -'/^S.* checkin$/' -d:I:`
test 1.3 = "$LIST" || fail
echo OK

echo $N Check that -/regex/i works ..................................$NL
# two tests: lower case the regular expression, lower case the data
LIST=`bk changes -'/^s.* CHECKIN$/i' -d:I:`
test 1.3 = "$LIST" || fail
echo OK

# -v tests
# flush out some corners in 3.2.x -v code which did
# pure date sorting using sccslog

echo $N Demonstrate out of order changesets .........................$NL
cd $HERE
commercial out
touch foo
bk new $Q foo
# The long string needed to overcome fudges.
# 1 more than need for that case where the seconds wrap during the test
bk mv foo bar
bk mv bar b
bk mv b foo
bk mv foo fee
bk commit $Q -yy
files=`bk changes -T -r+ -v -d:DPN:`
test "$files" = "ChangeSetfeefoobbarfoofoo" || fail
echo OK

echo $N Demonstrate the other way they can be out of order ..........$NL
cd $HERE
commercial out2
touch foo
bk new $Q foo
cd $HERE
bk clone $Q out2 c2
cd c2
touch bar
bk new $Q bar
bk commit $Q -yq
cd $HERE/out2
bk commit $Q -ya
cd $HERE/c2
bk pull $Q || fail
files=`bk changes -r1.1.1.1,1.2 -v -d:DPN:`
test "$files" = "ChangeSetfoofooChangeSetbarbar" || fail
echo OK

echo $N Check -vT for altering order of listing .....................$NL
# includes internal knowledge the minor file ordering is by gfile
touch a b
BK_DATE_TIME_ZONE="05/10/23 13:16:00-8:00" bk new $Q a
BK_DATE_TIME_ZONE="05/10/23 13:16:00-8:00" bk new $Q b
bk commit $Q -ybaseline
# first delta is same time - ties are sorted by gfile name
bk edit $Q a b
BK_DATE_TIME_ZONE="05/10/23 13:16:10-8:00" bk delta $Q -fya a
BK_DATE_TIME_ZONE="05/10/23 13:16:10-8:00" bk delta $Q -fyb b
# next delta is a older than b
bk edit $Q a b
BK_DATE_TIME_ZONE="05/10/23 13:16:20-8:00" bk delta $Q -fya a
BK_DATE_TIME_ZONE="05/10/23 13:16:25-8:00" bk delta $Q -fyb b
# next delta is b older than a
bk edit $Q a b
BK_DATE_TIME_ZONE="05/10/23 13:16:35-8:00" bk delta $Q -fya a
BK_DATE_TIME_ZONE="05/10/23 13:16:30-8:00" bk delta $Q -fyb b
bk commit $Q -yfoo
LIST=`bk changes -vr+ -d":GFILE::I: "`
test "ChangeSet1.5 a1.4 a1.3 a1.2 b1.4 b1.3 b1.2 " = "$LIST" || fail
LIST=`bk changes -vTr+ -d":GFILE::I: "`
test "ChangeSet1.5 a1.4 b1.4 b1.3 a1.3 a1.2 b1.2 " = "$LIST" || fail
echo OK

echo $N Check -fvT for altering order of listing ....................$NL
LIST=`bk changes -fvr+ -d":GFILE::I: "`
test "ChangeSet1.5 a1.2 a1.3 a1.4 b1.2 b1.3 b1.4 " = "$LIST" || fail
LIST=`bk changes -fvTr+ -d":GFILE::I: "`
test "ChangeSet1.5 a1.2 b1.2 a1.3 b1.3 b1.4 a1.4 " = "$LIST" || fail
echo OK

# remote repository - same as above but repo(s) are elsewhere

echo $N Changes on remote repo prints a header line .................$NL
# verify no header locally
cd $HERE/simple
bk changes -r+ -izoo > LOCAL
test `wc -c < LOCAL` -eq 0 || fail
# now test remote
cd ..
bk changes -r+ -izoo simple > REMOTE
grep -q 'simple' REMOTE || fail
echo OK

# some option tests -q, -D (should imply -q), -k (should imply -D)

echo $N Changes on remote repo with -q suppresses header ............$NL
bk changes -qr+ -izoo simple > REMOTE
test `wc -c < REMOTE` -eq 0 || fail
echo OK

echo $N Check that -D implies -q ....................................$NL
bk changes -qr+ -nd:I: simple > DASH_Q
bk changes -Dr+ -nd:I: simple > DASH_D
bk changes -r+ -nd:I: simple > PLAIN
checkfiles DASH_Q DASH_D
cmp -s DASH_D PLAIN && fail
echo OK

echo $N Check that -D removes dups when multiple remote repos .......$NL
bk changes -q -nd:KEY: simple simple | bk sort > DASH_Q
bk changes -D -nd:KEY: simple simple | bk sort > DASH_D
if cmp -s DASH_D DASH_Q
then	echo "failed (bug - feature not implemented)"
else
	bk sort -u < DASH_Q > UNIQ
	checkfiles DASH_D UNIQ
	echo OK
fi

## check this in the -L section
#
# echo $N Check that -k implies -D ....................................$NL
# bk changes -k simple simple | bk sort > DASH_K
# checkfiles DASH_K DASH_D
# echo OK

# some bug tests

echo $N Remote processing adds a newline if one not there ...........$NL
# BUGID: 2002-04-06-004
cd simple
bk changes -r+ -dX > GOT
printf "X" > WANT
checkfiles WANT GOT
# add in newline -n
bk changes -r+ -ndX > GOT
printf "X\n" > WANT
checkfiles WANT GOT
# now try on remote w/ header suppressed
cd ..
bk changes -qr+ -dX simple > GOT
printf "X\n" > WANT
checkfiles WANT GOT
# add in newline -n
bk changes -qr+ -ndX simple > GOT
printf "X\n" > WANT
checkfiles WANT GOT
echo OK

echo $N Check single quotes in remote dspec does not work ...........$NL
# written in such a way to not hang when hitting the coding bug
cd simple
bk changes -r+ -nd"x' '$HERE/simple" > ../WANT
cd ..
bk changes -qr+ -nd"x' '$HERE/simple" simple > GOT
if ! cmp -s WANT GOT
then	echo 'failed (bug not filed)'
else	echo OK
fi

# -L -R - working between repositories

echo $N Make some repositories to check out -L and -R ...............$NL
cd $HERE
bk clone $Q simple clone || exit 1
cd clone
bk undo $Q -sfr+ || exit 1
bk tag $Q REM || exit 1
echo OK

echo $N Check out a delta difference using -L and -R ................$NL
cd $HERE/simple
bk changes -L -qnd:I: ../clone > ../LOCAL
cd ../clone
bk changes -R -qnd:I: ../simple > ../REMOTE
cd ..
checkfiles LOCAL REMOTE
test "`wc -l < LOCAL`" -eq 1 || fail
echo OK

echo $N Check out a tag difference using -L and -R = -a activated ...$NL
cd $HERE/clone
bk changes -L -qnd:I: ../simple > ../REMOTE
cd ../simple
bk changes -R -qnd:I: ../clone > ../LOCAL
cd ..
checkfiles LOCAL REMOTE
test "`wc -l < LOCAL`" -eq 1 || fail
echo OK

echo $N Check out a tag difference using -aL and -aR ................$NL
cd $HERE/clone
bk changes -aL -qnd:I: ../simple > ../REMOTE
cd ../simple
bk changes -aR -qnd:I: ../clone > ../LOCAL
cd ..
checkfiles LOCAL REMOTE
test "`wc -l < LOCAL`" -eq 1 || fail
echo OK

echo $N Check out an empty merge difference using -L, -R ............$NL
cd $HERE/clone
touch h
bk new $Q h
bk commit $Q -yh
cd ..
bk clone $Q clone clone2
cd clone2
bk pull $Q ../simple
cd ../clone
bk pull $Q ../simple
bk changes -L -qnd:KEY: ../clone2 > LOCAL
bk changes -R -qnd:KEY: ../clone2 > REMOTE
cmp -s LOCAL REMOTE && fail
cd ../clone2
bk changes -L -qnd:KEY: ../clone > LOCAL
bk changes -R -qnd:KEY: ../clone > REMOTE
cmp -s LOCAL REMOTE && fail
checkfiles LOCAL ../clone/REMOTE
checkfiles REMOTE ../clone/LOCAL
echo OK
