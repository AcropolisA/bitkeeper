# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.


# Copyright (c) 2000 Larry McVoy
# %K%

echo $N Create initial repository ...................................$NL
cat > c <<EOF
logging: lm@bitmover.com
description: whatever
email: lm@bitmover.com
eoln: unix
keyword: sccs
logging_ask: no
license: $BKL_P
licsign1: $BKL_P1
licsign2: $BKL_P2
licsign3: $BKL_P3
EOF
BK_USER=joe bk setup -cc -f project
cd project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -f SCCS/s.ChangeSet ]; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
echo OK

echo $N Create some data ............................................$NL
for dir in d1 d2 d3 d1/sub1 d2/sub1 d3/sub d3/sub2
do	mkdir $dir
	for file in a b c d 
	do	echo "I am $dir/$file: %I%" > $dir/$file
	done
done
bk sfiles -x | bk ci $Q -i -
if [ ! -f d3/sub2/SCCS/s.a ]; then echo failed to create files; exit 1; fi
echo OK

echo $N Commit the data .............................................$NL
bk commit $S -a -yCset
if [ `bk sfiles -pC | wc -l` -ne 0 ];
then	echo failed to commit all files; exit 1; fi
echo OK

echo $N Create another changeset ....................................$NL
bk -r edit $Q
bk sfiles -g | grep -v ChangeSet | grep -v BitKeeper | while read x
do	echo more data >> $x
done
bk -r ci $Q -ycset2
bk commit $S -a -yCset2
if [ `bk sfiles -pC | wc -l` -ne 0 ];
then	echo failed to commit all files; exit 1; fi
echo OK

echo $N Create another changeset ....................................$NL
bk -r edit $Q
bk sfiles -g | grep -v ChangeSet | grep -v BitKeeper | while read x
do	echo more data >> $x
done
bk -r ci $Q -ycset3
bk commit $S -a -yCset3
if [ `bk sfiles -pC | wc -l` -ne 0 ];
then	echo failed to commit all files; exit 1; fi
echo OK

echo $N Create another changeset with two deltas ....................$NL
bk -r edit $Q
bk sfiles -g | grep -v ChangeSet | grep -v BitKeeper | while read x
do	echo more data >> $x
done
bk -r ci $Q -ycset4
bk -r edit $Q
bk sfiles -g | grep -v ChangeSet | grep -v BitKeeper | while read x
do	echo more data >> $x
done
bk -r ci $Q -ycset4
bk commit $S -a -yCset4
if [ `bk sfiles -pC | wc -l` -ne 0 ];
then	echo failed to commit all files; exit 1; fi
echo OK

echo $N Make sure that it checks clean ..............................$NL
cd `bk root`
rm -f BitKeeper/log/checked
bk -r check -a > OUT 2>&1 || {
	echo failed to exit 0
	cat OUT
	exit 1
}
echo OK

echo $N Make sure that check -a does not add a checked timestamp ....$NL
test -f BitKeeper/log/checked && exit 1
echo OK

echo $N Make sure that check -ac does add a checked timestamp .......$NL
bk -r check -ac
test -f BitKeeper/log/checked || exit 1
echo OK

echo $N Make sure that check -a adds an NFILES ......................$NL
rm BitKeeper/log/NFILES
bk -r check -a
test -f BitKeeper/log/NFILES || exit 1
echo OK

echo $N Make sure that check -a corrects bad NFILES count ...........$NL
WANT=`cat BitKeeper/log/NFILES`
echo 10000 > BitKeeper/log/NFILES
bk -r check -a
GOT=`cat BitKeeper/log/NFILES`
test "$WANT" = "$GOT" || {
	echo failed to update NFILES
	echo WANT=$WANT
	echo GOT=$GOT
	exit 1
}
echo OK

cp -rp $HERE/project $HERE/clean
echo $N Make sure that it complains if a file is missing, -a case ...$NL
mv d1/sub1/SCCS/s.a d1/sub1/SCCS/junk.a
bk -r check -a > OUT 2>&1
if [ $? -eq 0 ]; then echo failed to exit non-zero; cat OUT; exit 1; fi
if [ ! -s OUT ]; then echo failed; cat OUT; exit 1; fi
echo OK

echo $N Make sure that it complains if a file is missing, - case ....$NL
echo d1/sub1/SCCS/s.a | bk check - > OUT 2>&1
if [ $? -eq 0 ]; then echo failed to exit non-zero; cat OUT; exit 1; fi
if [ ! -s OUT ]; then echo failed; cat OUT; exit 1; fi
echo OK

echo $N Make sure that it is happy when we put it back ..............$NL
mv d1/sub1/SCCS/junk.a d1/sub1/SCCS/s.a
bk -r check -a > OUT 2>&1 || {
	exit failed to exit cleanly
	cat OUT
	exit 1
}
echo OK

echo $N Make sure it fixes locked files w/o a gfile with -f .........$NL
bk get -eg $Q BitKeeper/etc/config
bk -r check -af > OUT 2>&1 || {
	echo should have exited cleanly
	exit 1
}
test -f d1/sub1/SCCS/p.a && {
	echo failed to unlock the file
	exit 1
}
echo OK

echo $N Make sure it complains about locked files w/ RO gfile........$NL
bk edit $Q d1/sub1/SCCS/s.a
echo "new stuff" > d1/sub1/a
chmod 444 d1/sub1/a
bk -r check -a > OUT 2>&1 && {
	echo should have exited with a failure
	exit 1
}
grep -q 'is locked but not writable' OUT || {
	echo bad error message
	cat OUT
	exit 1
}
echo OK

echo $N Make sure unedit will fix the above problem .................$NL
bk unedit d1/sub1/SCCS/s.a
bk -r check -a > OUT 2>&1 || {
	echo should have exited cleanly
	exit 1
}
echo OK

echo $N Make sure it fixes locked files w/ unchanged RO gfile........$NL
bk edit $Q d1/sub1/SCCS/s.a
bk get $Q -r+ -p d1/sub1/a > d1/sub1/a
chmod 444 d1/sub1/a
bk -r check -a > OUT 2>&1 || {
	echo should have exited with ok status
	exit 1
}
echo OK

echo $N Make sure it complains unlocked files with rw gfile .........$NL
bk get $Q d1/sub1/a
chmod +w d1/sub1/a
bk -r check -a > OUT 2>&1
test -f d1/sub1/SCCS/p.a && {
	echo should not have created lock file
	cat OUT
	exit 1
}
test -w d1/sub1/a || {
	echo should not have unedited file
	cat OUT
	exit 1
}
grep -q 'writable but not checked out.' OUT || {
	echo bad error message
	cat OUT
	exit 1
}
echo OK

echo $N Make sure it fixes unlocked files with rw gfile with -f .....$NL
bk -r check -af > OUT 2>&1
test -f d1/sub1/SCCS/p.a || {
	echo should have created lock file
	cat OUT
	exit 1
}
test -w d1/sub1/a || {
	echo should not have unedited file
	cat OUT
	exit 1
}
echo OK

echo $N Make sure it autofixes unlocked files with rw gfile .........$NL
bk edit $Q BitKeeper/etc/config
echo "autofix:yes" >> BitKeeper/etc/config
rm d1/sub1/SCCS/p.a
bk -r check -a > OUT 2>&1
test -f d1/sub1/SCCS/p.a || {
	echo should have created lock file
	cat OUT
	exit 1
}
test -w d1/sub1/a || {
	echo should not have unedited file
	cat OUT
	exit 1
}
echo OK


echo $N Make sure it complains about file/dir conflicts .............$NL
bk unedit $Q d1/sub1/a
mkdir d1/sub1/a
bk -r check -a > OUT 2>&1 && {
	echo should have exited with a failure
	cat OUT
	exit 1
}
grep -q 'File/directory conflict: d1/sub1/a' OUT || {
	echo bad error message
	cat OUT
	exit 1
}
rmdir d1/sub1/a
echo OK

echo $N Make sure it complains about cset pointer problems ..........$NL
echo hi > foo
bk new $Q foo || exit 1
csetfile=`bk prs -hr+ -d ':CSETFILE:\n' foo`stuff
bk admin -C$csetfile foo
bk -r check -a > OUT 2>&1 && {
	echo should have exited with a failure
	cat OUT
	exit 1
}
grep -q 'belongs to:' OUT || {
	echo bad error message
	cat OUT
	exit 1
}
echo OK

echo $N Make sure commit refuses to commit out of sync files ........$NL
cd $HERE/clean/d3/sub2
for i in a b c
do	bk stripdel -qCr+ $i
done
bk stripdel -qCr+ a
for i in a b c
do	bk edit $Q $i
	echo error >> $i
	bk delta $Q -y'out of sync' $i || exit 1
done
bk commit $Q -y'out of sync' > OUT 2>&1 && {
	echo should have failed the commit
	cat OUT
	exit 1
}
echo OK

echo $N Make sure check detects checksum problems ...................$NL
cd $HERE/project
echo "foobar" > ff
bk new $Q ff
bk edit $Q ff
bk delta -yfoobar $Q ff
mv SCCS/s.ff ff.tmp
sed 's/foobar/foobaz/' < ff.tmp > SCCS/s.ff
rm -f ff.tmp
bk check -c ff 2> /dev/null && {
	echo check should have failed
	exit 1
}
rm -f SCCS/s.ff
echo OK

echo $N Make sure check complains is cset marks are missing .........$NL
cd $HERE
bk clone $Q project bad || exit 1
cd bad
bk admin -D d1/a  || exit 1
bk -r check -a >OUT 2>ERRS && {
	echo check should have failed
	exit 1
}
grep -q 'has pending deltas but no d.file' OUT || {
	echo bad error message
	exit 1
}
cd $HERE
rm -rf bad
echo OK

echo $N Make sure check knows about .bk_skip ........................$NL
cd $HERE
bk clone $Q project clone || exit 1
cd clone
# this one should print a warning
touch d1/sub1/.bk_skip
bk -r check -a >OUT 2>ERRS
rm d1/sub1/.bk_skip
[ -s ERRS ] || {
	echo ".bk_skip didn't cause a warning; output was"
	cat OUT
	echo "error output was empty!"
	exit 1
}
grep "^Missing" ERRS > /dev/null && {
	echo ".bk_skip seems to have broken check; output was"
	cat OUT
	echo "error output was"
	cat ERRS
	exit 1
}
echo OK

TESTDATA=/home/bk/test_data
test -d $TESTDATA/cset-gzipped && {
echo $N Make sure check works with compressed ChangeSet files........$NL
cd $HERE
bk clone $Q $TESTDATA/cset-gzipped p || {
	echo "failed"
	exit 1
}
cd p
bk -r check -a || {
	echo "failed"
	exit 1
}
echo OK
}
true

echo $N Check without a ChangeSet sfile should give an error ........$NL
cd $HERE
rm -rf clone
bk clone $Q project clone || exit 1
cd clone
rm -f SCCS/s.ChangeSet
bk -r check -a >OUT 2>ERRS
[ -s ERRS ] || {
	echo "check without a ChangeSet sfile didn't cause an error"
	cat OUT
	exit 1
}
# restore repo
cp ../project/SCCS/s.ChangeSet SCCS
echo OK

echo $N Make sure .bk_skip and SCCS/.bk_skip works ..................$NL
# this one should not cause a warning, but the check will complain about
# missing files
cd $HERE/clone
touch d1/sub1/SCCS/.bk_skip
bk -r check -a >OUT 2>ERRS
grep -v 'Missing file' ERRS > E2
test -s E2 && {
	echo "Unexpected error output from check; output was"
	cat OUT
	echo "error output was"
	cat ERRS
	exit 1
}
echo OK

echo $N bk check should detect copied sfile .........................$NL
cd $HERE
no_logging proj2
echo "hi" > foo
bk new $Q foo
bk commit $Q -yfoo
cp SCCS/s.foo SCCS/s.foo2
bk -r check -afc 2> $HERE/out
grep -q "Is one of these files copied?" $HERE/out || { echo failed; exit 1; }
echo OK

echo $N bk check with partial_check should notice path conflicts ....$NL
no_logging proj3
bk edit $Q BitKeeper/etc/config
echo partial_check:yes >> BitKeeper/etc/config
echo hi > foo
bk new $Q -ycomment foo || exit 1
bk commit $Q -ycomment || exit 1
mkdir foo
echo problem > foo/bar
bk new $Q -ycomment2 foo/bar || exit 1
bk commit $Q -ycomment2 2> ERR && {
	echo commit should have failed
	exit 1
}
grep -q "File/directory conflict: foo" ERR || {
	echo wrong error message
	cat ERR
	exit 1
}
echo OK
