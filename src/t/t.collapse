
echo $N Verify that collapsed csets cannot return ...................$NL
commercial project
echo test > file
bk new $Q file
bk commit -yfirst $Q || exit 1
cd "$HERE"
bk clone $Q project copy
cd copy
bk collapse -el || exit 1
echo test2 > file
bk -cr ci -c $Q || exit 1
bk commit -yreplacement $Q || exit 1
bk pull $Q 2>ERR && fail -f ERR
grep -q "the cset has been collapsed" ERR || fail -f ERR 
echo OK

echo $N Test that \'bk pull -D\' will allow uncollapsed csets .........$NL
(echo rr; echo y) | BK_FORCE_RESOLVE_RERUN=1 bk pull $Q -D 2> ERR || {
	echo should have worked
	exit 1
}
grep -q "1 unresolved name conflict" ERR || exit 1
echo OK

# test 'bk collapse -e'
echo $N Test collapse -e with many different delta types ............$NL
cd "$HERE/project"
for f in renamed deleted modes xflags file1 file2 file3 exclude edited chg_edit
do	echo initial > $f
	bk new $Q $f
done
bk edit $Q exclude
echo newline >> exclude
bk ci -ynew $Q exclude || exit 1
echo binary junk > binary
bk new -Euuencode $Q binary || exit 1
echo binary junk > binpool
bk new -EBAM $Q binpool || exit 1

if [ "$PLATFORM" != "WIN32" ]
then
	ln -s file1 change_symlink
	bk new $Q change_symlink || exit 1
fi
bk commit $Q -yinitial || exit 1


#  contents edit
bk edit $Q file || exit 1
echo add line >> file
bk ci -ycontents $Q file || exit 1
#  renamed file
bk mv renamed rename_dest || exit 1
#  deleted file
bk rm deleted || exit 1
#  file cereated in this cset
echo new_file > new_file
bk new $Q new_file || exit 1
#  change mode
bk chmod +x modes || exit 1
#  add/del xflags
bk admin -fRCS xflags || exit 1
bk admin -FSCCS xflags || exit 1
echo hi > create_delete
bk new $Q create_delete || exit 1
bk rm create_delete || exit 1

# excludes
bk edit $Q -x1.2 exclude || exit 1
echo replace >> exclude
bk ci -yreplace $Q exclude || exit 1

# binary files
bk edit $Q binary || exit 1
echo more junk >> binary
bk ci -ymore $Q binary || exit 1
bk edit $Q binpool || exit 1
echo more junk >> binpool
bk ci -ymore $Q binpool || exit 1

# changes and edited file
bk edit $Q chg_edit || exit 1
echo stuff in fixed cset >> chg_edit
bk ci -ystuff $Q chg_edit || exit 1

# nulls moves disappear
bk mv file2 junk
bk mv junk file2

# multiple moves collapse
bk mv file3 file4
bk mv file4 file5

if [ "$PLATFORM" != "WIN32" ]
then
	#  change symlink
	bk edit $Q change_symlink
	rm change_symlink
	ln -s file2 change_symlink
	bk ci $Q -ymovelink change_symlink

	#  create symlink
	ln -s file3 new_symlink
	bk new $Q new_symlink

	ln -s file3 edited_symlink
	bk new $Q edited_symlink
fi

bk commit $Q -ynewcset || exit 1

# already edited file
bk edit $Q edited || exit 1
echo new stuff not in cset >> edited
echo edited comment | bk cfile save edited

bk edit $Q chg_edit || exit 1
echo new stuff not in cset >> chg_edit
echo edited comment | bk cfile save chg_edit

if [ "$PLATFORM" != "WIN32" ]
then
	bk edit $Q edited_symlink
	rm edited_symlink
	ln -s file2 edited_symlink
	echo edited comment | bk cfile save edited_symlink
fi

BK_USER=u1 bk collapse -el $Q || exit 1
BK_USER=u2 bk -xlr delta -a $Q -c || exit 1
BK_USER=u3 bk commit $Q -ycollapse || exit 1

bk changes -r+ -v -d'
:GFILE:\ :REV:\ $unless(:CHANGESET:){:DL:\ }:USER:
$if(:ENC:!=ascii){\ :ENC:}\n
:FLAGS:\n
$if (:DI:) {
	inc/exc\ :DI:\n
}
$unless (:CHANGESET:) {
	$unless (:REV:=1.0) {
		:RWXMODE:\n
	}
}
:COMMENTS:
$unless (:CHANGESET:) {
	$if (:GFILE: != BitKeeper/etc/collapsed) {
		:DIFFS_U:
	}
}
---\n
' | perl -pe 's/^([-+]{3} \S+).*/$1/; s/([-l][-rwx]{3})[-rwx]{6}/$1/' > GOT

bk -rBitKeeper/deleted get -qS
CREATE_DELETE=`bk gfiles BitKeeper/deleted/*/create_delete*`
DELETED=`bk gfiles BitKeeper/deleted/*/deleted~*`
cat <<EOF > WANT
ChangeSet 1.4 u3
BITKEEPER,CSETMARKED,HASH,LONGKEY,EOLN_UNIX
C collapse
---
EOF

cat <<EOF > cd
$CREATE_DELETE 1.1 1/0/0 u2
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
-rw-
C BitKeeper file $HERE/project/create_delete

--- /dev/null
+++ 1.1/$CREATE_DELETE
@@ -0,0 +1 @@
+hi
---
$CREATE_DELETE 1.0 0/0/0 u2
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
---
EOF

cat <<EOF > d
$DELETED 1.2 0/0/1 u1
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
-rw-
C Rename: deleted -> $DELETED
---
EOF

# adjust for the sort order of the deleted dir
( echo $CREATE_DELETE
  echo $DELETED ) | bk sort | head -1 > .tmp
if [ `cat .tmp` = $CREATE_DELETE ]
then	cat cd d >> WANT
else	cat d cd >> WANT
fi

cat <<EOF >>WANT
BitKeeper/etc/collapsed 1.2 1/1/0 u1
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
-rw-
---
binary 1.2 1/1/1 u2 uuencode
BITKEEPER,CSETMARKED,EOLN_UNIX
-rw-
C more

--- 1.1/binary
+++ 1.2/binary
@@ -1 +1,2 @@
 binary junk
+more junk
---
binpool 1.2 22/0/0 u2 BAM
BITKEEPER,CSETMARKED,EOLN_UNIX
-rw-
C more

--- 1.1/binpool
+++ 1.2/binpool
@@ -1 +1,2 @@
 binary junk
+more junk
---
change_symlink 1.2 0/0/0 u2
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
lrwx
C movelink

--- 1.1/change_symlink
+++ 1.2/change_symlink
@@ -1 +1 @@
-SYMLINK -> file1
+SYMLINK -> file2
---
chg_edit 1.2 2/0/1 u2
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
-rw-
C stuff
C ---
C edited comment

--- 1.1/chg_edit
+++ 1.2/chg_edit
@@ -1 +1,3 @@
 initial
+stuff in fixed cset
+new stuff not in cset
---
edited 1.2 1/0/1 u2
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
-rw-
C edited comment

--- 1.1/edited
+++ 1.2/edited
@@ -1 +1,2 @@
 initial
+new stuff not in cset
---
edited_symlink 1.1 0/0/0 u2
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
lrwx
C BitKeeper file $HERE/project/edited_symlink
C ---
C edited comment

--- /dev/null
+++ 1.1/edited_symlink
@@ -0,0 +1 @@
+SYMLINK -> file2
---
edited_symlink 1.0 0/0/0 u2
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
---
exclude 1.3 1/1/1 u2
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
-rw-
C replace

--- 1.2/exclude
+++ 1.3/exclude
@@ -1,2 +1,2 @@
 initial
-newline
+replace
---
file 1.2 1/0/1 u2
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
-rw-
C contents

--- 1.1/file
+++ 1.2/file
@@ -1 +1,2 @@
 test
+add line
---
file5 1.2 0/0/1 u1
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
-rw-
C Rename: file3 -> file5
---
modes 1.2 0/0/1 u1
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
-rwx
C Change mode to -rwx
---
new_file 1.1 1/0/0 u2
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
-rw-
C BitKeeper file $HERE/project/new_file

--- /dev/null
+++ 1.1/new_file
@@ -0,0 +1 @@
+new_file
---
new_file 1.0 0/0/0 u2
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
---
new_symlink 1.1 0/0/0 u2
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
lrwx
C BitKeeper file $HERE/project/new_symlink

--- /dev/null
+++ 1.1/new_symlink
@@ -0,0 +1 @@
+SYMLINK -> file3
---
new_symlink 1.0 0/0/0 u2
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
---
rename_dest 1.2 0/0/1 u1
BITKEEPER,CSETMARKED,SCCS,EOLN_UNIX
-rw-
C Rename: renamed -> rename_dest
---
xflags 1.3 0/0/1 u1
BITKEEPER,RCS,CSETMARKED,EOLN_UNIX
-rw-
C Turn off SCCS flag
---
xflags 1.2 0/0/1 u1
BITKEEPER,RCS,CSETMARKED,SCCS,EOLN_UNIX
-rw-
C Turn on RCS flag
---
EOF
if [ "$PLATFORM" = "WIN32" ]
then
	# filter out symlink results
	perl -0 -i.bck -pe 's/^\w+symlink.*?\n---\n//msg' WANT
fi
cmpfiles WANT GOT
echo OK

echo $N Verify that collapse works starting with edited ChangeSet ...$NL
bk edit $Q file
bk delta $Q -fyempty file || exit 1
bk commit $Q -yempty || exit 1
bk edit $Q ChangeSet || exit 1
bk collapse $Q -e || exit 1
test -f ChangeSet && {
	echo failed
	exit 1
}
echo OK

echo $N Demonstrate using collapse -d for multiple users ............$NL
REV=`bk changes -r+ -nd:REV:`
echo f1 > f1
BK_USER=user1 bk new $Q f1 || exit 1
BK_USER=user1 bk commit $Q -yf1 || exit 1
echo f2 > f2
BK_USER=user2 bk new $Q f2 || exit 1
BK_USER=user2 bk commit $Q -yf2 || exit 1

bk collapse --no-save -eda$REV || exit 1
bk -r check -ac || exit 1
# bk fix can be used to do a partial collapse of files before commit
BK_USER=user3 bk commit $Q -ynew || exit 1
bk changes -r+ -v -nd':USER: :GFILE:@:REV:' > GOT
cat <<EOF > WANT
user3 ChangeSet@1.5
user1 f1@1.1
user1 f1@1.0
user2 f2@1.1
user2 f2@1.0
EOF
cmpfiles GOT WANT
echo OK

#echo $N Test collapse -e -aREV ......................................$NL
#  above plus
#  merges
#  merged modes
#  csets before and after merge

# test merging of BitKeeper/etc/collapsed files

# test collapse -e of tags 
#  keep tag on old tip
#  strip tags in middle and tip of stripped csets (with warnings)

# test collapse of tags without -e
#  keep tag on old tip
#  strip tags in middle of stripped csets (with warnings)
#  recreate tag on tip of stripped csets


echo $N Test collapse -e@ with no parent ............................$NL
cd "$HERE"
bk clone $Q -l project clone || fail
cd clone
echo hi > myfile
bk new $Q myfile || fail
bk commit -ynew $Q || fail
bk parent $Q -r || fail
bk collapse -e@ 2>ERR && fail -f ERR
cat <<EOF > WANT
collapse: no single parent to use for -@
EOF
cmpfiles ERR WANT
echo OK

echo $N Test collapse -e@bad.repo ...................................$NL
bk collapse -e@bad.repo 2>ERR && fail -f ERR
grep -q 'collapse: failed to contact bad.repo for -@.' ERR || fail -f ERR
echo OK

echo $N Test collapse -e@ when missing tip ..........................$NL
bk parent $Q -s ../project || fail
cd ../project
echo kk > kk
bk new $Q kk || fail
bk commit -ykk $Q || fail
cd ../clone
bk collapse -e@ 2>ERR && fail -f ERR
cat <<EOF > WANT
collapse: current repo is behind $HERE/project, must pull before collapsing.
EOF
cmpfiles WANT ERR
echo OK

echo $N Test collapse -e@ ...........................................$NL
bk pull $Q || fail
bk collapse --no-save -e@ || fail
touch GOT
test "`bk sfiles -cp`" && fail
bk sfiles -x > GOT
cat <<EOF > WANT
ERR
GOT
WANT
myfile
EOF
cmpfiles GOT WANT
bk _test -f SCCS/c.myfile || fail
bk _cat SCCS/c.ChangeSet | grep -q '^new$' || fail
echo OK

echo $N Test collapse -e@url ........................................$NL
bk new $Q -c myfile || fail
bk commit $Q -yhi2 || fail
bk collapse -e@../project || fail
touch GOT
test "`bk sfiles -cp`" && fail
bk sfiles -x > GOT
cat <<EOF > WANT
ERR
GOT
WANT
myfile
EOF
cmpfiles GOT WANT
bk _test -f SCCS/c.myfile || fail
bk _cat SCCS/c.ChangeSet | grep -q '^hi2' || fail
echo OK

echo $N Make sure collapse does not leave edited attr file...........$NL
cd "$HERE"
rm -rf project copy
commercial project
touch afile bfile
bk new $Q afile
bk new $Q bfile
bk commit -y. $Q
REV=`bk changes -qnd:REV: -r+`
cd "$HERE"
bk clone $Q project copy
cd project
bk edit $Q afile
echo content > afile
bk delta $Q -y. afile
bk commit $Q -y.
cd "$HERE/copy"
BK_CONFIG="license:$BKL_ACADEMIC!;
licsign1:$BKL_A1!; licsign2:$BKL_A2!; licsign3:$BKL_A3!"
export BK_CONFIG
bk edit $Q bfile
echo more > bfile
bk delta $Q -y. bfile
bk commit $Q -y.
unset BK_CONFIG
bk pull $Q ../project || fail
bk collapse $Q -ea$REV || fail
bk sfiles -cg | grep -q attr && fail left edited attr file
echo OK

echo $N Test attr file again but in nested this time.................$NL
cd "$HERE"
rm -rf project copy
nested project
bk gate $Q -r
bk portal $Q -r
# create csets in all components
touch afile gcc/afile gdb/afile
bk new $Q afile gcc/afile gdb/afile
(cd gcc && bk commit $Q -S -yafile)
(cd gdb && bk commit $Q -S -yafile)
bk commit $Q -yafile
REV=`bk changes -qnd:REV: -r+`
BK_CONFIG="license:$BKL_ACADEMIC!;
licsign1:$BKL_A1!; licsign2:$BKL_A2!; licsign3:$BKL_A3!"
export BK_CONFIG
bk edit $Q afile gcc/afile gdb/afile
echo content > afile
echo content > gcc/afile
echo content > gdb/afile
bk delta $Q -y. afile gcc/afile gdb/afile
(cd gcc && bk commit $Q -S -yafile)
(cd gdb && bk commit $Q -S -yafile)
bk commit $Q -yafile
unset BK_CONFIG
bk collapse $Q -ea$REV || fail collapse failed
bk -e sfiles -cg | grep -q attr && fail left edite attr file
echo OK
