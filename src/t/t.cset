# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.


# Copyright (c) 2000 Larry McVoy
# %K%

echo $N Create initial repository using setup .......................$NL
commercial project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
echo OK

echo $N Make sure that we can remark all the csets ..................$NL
for file in A B C
do	for line in 1 2 3 4 5 6 7 8
	do	echo $line $file >> $file
	done
	bk new $Q $file
done
bk _cp SCCS/s.A backup
bk commit $Q -ywhatever
bk _cp SCCS/s.A pre
bk _cp backup SCCS/s.A
echo A > WANT
bk sfiles -gP > GOT
cmpfiles WANT GOT
bk cset -C || { echo failed; exit 3; }
bk _cp SCCS/s.A post
# checkfiles use cmp, which is nicer on binary files
checkfiles pre post
echo OK

echo $N Make sure that we can remove an earlier cset ................$NL
bk cset $Q -x+
bk co $Q A
if [ "`cat A`" != "" ]
then	echo failed to remove A contents
	exit 1
fi
echo OK

echo $N Make sure that we can include it back again .................$NL
bk cset $Q -i1.2
bk get $Q -r1.1 -pam A > A.1 || fail
bk get $Q -pam A > A.+ || fail
cmp -s A.1 A.+
if [ $? != 0 ]
then	echo failed to return A contents correctly
	exit 1
fi
echo OK

echo $N Cset -x with a modified file should fail ....................$NL
bk edit $Q C
echo foo >> C
bk cset $Q -x+ 2>/dev/null
if [ $? = 0 ]
then	echo failed to fail
	exit 1
fi
cat > DIFFS <<EOF
===== C 1.3 vs edited =====
8a9
> foo
EOF
bk diffs --no-unified C > CMP1
cmpfiles CMP1 DIFFS
if [ `bk prs -hd:I: -r+ A` != 1.3 ]
then	echo failed to remove exclude delta from A
	bk prs A
	exit 1
fi
echo OK

echo $N Cset -x with a uncommitted deltas should fail ...............$NL
bk delta -fywhatever $Q C
bk cset $Q -x+ 2>/dev/null
if [ $? = 0 ]
then	echo failed to fail
	exit 1
fi
if [ `bk prs -hd:I: -r+ A` != 1.3 ]
then	echo failed to remove exclude delta from A
	bk prs A
	exit 1
fi
if [ `bk prs -hd:I: -r+ C` != 1.4 ]
then	echo Failed to leave pending deltas in C
	bk prs C
	exit 1
fi
echo OK

echo $N Cset -x of a merge node .....................................$NL
touch foo bar
bk new $Q foo bar
bk commit $Q -yfoobar
cd "$HERE"
bk clone $Q project copy
cd project
bk edit $Q foo
bk delta $Q -fyfoo foo
bk commit $Q -yfoo
cd ../copy
bk edit $Q bar
bk delta $Q -fybar bar
bk commit $Q -ybar
bk pull $Q ../project
bk cset $Q -x+ > OUT 2> ERR && {
	echo Failed
	echo Cset -x with merge node functioned when it should fail.
	exit 1
}
grep -q "Merge cset found in revision list" ERR || {
	echo Failed
	echo expected error message about merge node not allowed.
	echo Instead the error was:
	cat ERR
	exit 1
}
# # Here's the test which shows the old bug:
# # ChangeSet list of tips does not match actual list of tips
# bk get -qp ChangeSet | grep bar > CSET
# bk prs -r+ -hnd":ROOTKEY: :KEY:" bar > FILE
# cmp -s CSET FILE || { echo Failed; exit 1}
echo OK
