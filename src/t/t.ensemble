echo $N Setup .......................................................$NL
commercial project
cd "$HERE"
bk clone $Q project gcc
cd gcc
echo gcc > name
bk new $Q name
bk commit $Q -y'Create gcc repo'
cd "$HERE"
bk clone $Q project gdb
cd gdb
echo gdb > name
bk new $Q name
bk commit $Q -y'Create gdb repo'
echo OK

echo $N id -p when not on a product should fail......................$NL
cd "$HERE/project"
bk id -p >GOT 2>&1 && {
	echo failed
	cat GOT
	exit 1
}
echo OK

echo $N Convert to product ..........................................$NL
cd "$HERE/project"
bk ensemble create $Q
test "`bk ensemble`" = "This is the product." || {
	echo failed to make it a product
    	exit 1
}
test -f BitKeeper/log/PRODUCT || {
	echo failed to touch product turd
    	exit 1
}
echo OK

echo $N id -p on a product should return not a component.............$NL
cd "$HERE/project"
echo "Not a component." > WANT
bk id -p >GOT 2>&1 && {
	echo failed
	cat GOT
	exit 1
}
cmpfiles WANT GOT
echo OK

echo $N Add some components .........................................$NL
bk ensemble add $Q -y'gcc & gdb' ../gcc gcc ../gdb gdb
cd gcc
test "`bk ensemble`" = "This is a component" || {
	echo failed to make it a component
	ls BitKeeper/log
	exit 1
}
test -z "`bk pending`" || {
	echo did not clear pending marks
	exit 1
}
echo OK


echo $N id -p on a component should work.............................$NL
cd "$HERE/project"
ROOTKEY=`bk id`
cd "gcc"
bk id -p >GOT 2>&1 || {
	echo failed
	cat GOT
	exit 1
}
test "`cat GOT`" = "$ROOTKEY" || {
	echo failed
	cat GOT
	exit 1
}
echo OK

echo $N Check dspecs ................................................$NL
cd "$HERE/project"
test "`bk log -r+ -nd:FILE: gcc/ChangeSet`" = gcc/ChangeSet || {
	echo bad gcc/ChangeSet
	exit 1
}
echo OK

echo $N Check for components in top changeset .......................$NL
cd "$HERE/project"
bk changes -v -r+ -nd'$if(:FILE:){:GFILE:}' | sort > GOT
cat > WANT <<EOF
gcc/ChangeSet
gcc/ChangeSet
gcc/ChangeSet
gcc/ChangeSet
gdb/ChangeSet
gdb/ChangeSet
gdb/ChangeSet
gdb/ChangeSet
EOF
cmpfiles WANT GOT
echo OK

echo $N Check that we can get a relative name from product ..........$NL
mkdir -p gcc/a/b/c
cd gcc/a/b/c
test `bk pwd -R` = gcc/a/b/c || {
	echo pwd -R failed
	exit 1
}
test `bk pwd -r` = a/b/c || {
	echo pwd -r failed
	exit 1
}
echo OK

echo $N Check that sfiles lists components ..........................$NL
cd "$HERE/project"
bk sfiles > GOT
cat > WANT <<EOF
SCCS/s.ChangeSet
BitKeeper/etc/SCCS/s.collapsed
BitKeeper/etc/SCCS/s.config
BitKeeper/etc/SCCS/s.gone
BitKeeper/etc/SCCS/s.ignore
BitKeeper/etc/SCCS/s.modules
gcc/SCCS/s.ChangeSet
gdb/SCCS/s.ChangeSet
EOF
cmpfiles WANT GOT
echo OK

echo $N Check that gfiles lists components ..........................$NL
cd "$HERE/project"
bk gfiles > GOT
cat > WANT <<EOF
ChangeSet
BitKeeper/etc/collapsed
BitKeeper/etc/config
BitKeeper/etc/gone
BitKeeper/etc/ignore
BitKeeper/etc/modules
gcc/ChangeSet
gdb/ChangeSet
EOF
cmpfiles WANT GOT
echo OK

echo $N Check that sfiles -x lists extra repos ......................$NL
bk clone $Q ../gcc extra
mkdir foo
bk clone $Q ../gcc foo/extra
bk sfiles -x > GOT
cat > WANT <<EOF
GOT
WANT
extra
foo/extra
EOF
cmpfiles WANT GOT
test `bk sfiles -x foo` = "foo/extra" || {
	echo failed on foo/extra
	exit 1
}
echo OK

echo $N Check that sfiles -U does not list gcc/ChangeSet ............$NL
cd "$HERE/project"
bk sfiles -U > LIST
grep ChangeSet LIST && {
	echo failed
	exit 1
}
echo OK

echo $N Check iterator from product root - quiet mode ...............$NL
cd "$HERE/project"
bk -qA pwd -R > GOT
cat > WANT <<EOF
.
gcc
gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Check iterator from product root - noisy mode ...............$NL
cd "$HERE/project"
bk -A pwd -R > GOT
cat > WANT <<EOF
===== . =====
.
===== gcc =====
gcc
===== gdb =====
gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Check iterator from component - quiet mode ..................$NL
cd "$HERE/project/gcc"
bk -qA pwd -R > GOT
cat > WANT <<EOF
.
gcc
gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Check iterator from component - noisy mode ..................$NL
cd "$HERE/project/gcc"
bk -A pwd -R > GOT
cat > WANT <<EOF
===== . =====
.
===== gcc =====
gcc
===== gdb =====
gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Check iterator with get .....................................$NL
bk -UAr get > GOT 2>&1
cat > WANT <<EOF
===== . =====
===== gcc =====
name 1.1: 1 lines
===== gdb =====
name 1.1: 1 lines
EOF
cmpfiles GOT WANT
echo OK

echo $N Run a full integrity check with and w/o extra repos .........$NL
cd "$HERE/project"
bk -r check -acvv > OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
rm -rf extra foo
bk -r check -acvv > OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
echo OK

echo $N Same thing in a sub repo ....................................$NL
cd "$HERE/project/gcc"
bk clone $Q "$HERE/gcc" extra
bk -r check -acvv > OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
rm -rf extra 
bk -r check -acvv > OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
echo OK

echo $N Make a cset in a subrepo and make sure bk sfiles -p works ...$NL
cd "$HERE/project/gcc"
bk edit $Q name
echo him mom > name
bk delta $Q -yxxx name
bk commit -yxxx $Q 
test -f SCCS/d.ChangeSet || {
	echo failed to leave d.file
	exit 1
}
cd "$HERE/project"
test "`bk sfiles -p`" = "gcc/SCCS/s.ChangeSet" || {
	echo failed
	bk sfiles -p
	exit 1
}
echo OK

echo $N Check sfiles -pC ............................................$NL
test "`bk sfiles -pC`" = "gcc/SCCS/s.ChangeSet|1.4" || {
	echo failed
	bk sfiles -pC
	bk sfiles -E
	exit 1
}
echo OK

echo $N Check sfiles -pA with more than one cset pending ............$NL
cd gcc
bk edit $Q name
echo him mom >> name
bk delta $Q -yxxx name
bk commit -yxxx $Q
test -f SCCS/d.ChangeSet || {
	echo failed to leave d.file
	exit 1
}
cd "$HERE/project"
cat > WANT <<EOF
gcc/SCCS/s.ChangeSet|1.5
gcc/SCCS/s.ChangeSet|1.4
EOF
bk sfiles -pA > GOT
cmpfiles WANT GOT
echo OK

echo $N Check bk pending ............................................$NL
bk pending > GOT
grep -q 1.4 GOT || {
	echo failed to find 1.4
	exit 1
}
grep -q 1.5 GOT || {
	echo failed to find 1.5
	exit 1
}
echo OK

echo $N Make sure that commit finds the two csets ...................$NL
REV=`bk changes -r+ -nd:REV:`
bk commit -y'Commit the 1.4 and 1.5 gcc csets' $Q || {
	echo failed
	exit 1
}
test "`bk changes -r+ -nd:REV:`" = $REV && {
	echo did not make a changeset
	exit 1
}
test "`bk sfiles -p`" = "" || {
	echo failed to clear pending state
	exit 1
}
bk changes -vr+ -nd'$if(:FILE:){:FILE:|:REV:}' > GOT
cat > WANT <<EOF
gcc/ChangeSet|1.5
gcc/ChangeSet|1.4
EOF
cmpfiles WANT GOT 
echo OK


echo $N Make sure check will pass if a component is removed .........$NL
mv gdb "$HERE/gdb.save"
bk -r check -ac > OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
test -s OUT && {
	echo should have been quiet
	cat OUT
	exit 1
}
echo OK

echo $N Make sure changes -v is OK with missing components ..........$NL
bk changes -v > OUT 2>ERR
test -s ERR && {
	echo not so much
	cat ERR
	exit 1
}
echo OK

echo $N Make sure product check will fail if a component is moved ...$NL
mv gcc gcc4
bk -r check -ac > OUT 2>&1 && {
	echo should have failed
	cat OUT
	exit 1
}
grep -q "check: component 'gcc4' should be 'gcc'" OUT  || {
	echo bad message
	cat OUT
	exit 1
}
echo OK

echo $N Make sure check in moved component will succeed .............$NL
cd gcc4
bk -r check -ac > OUT 2>&1 || {
	echo should not have failed
	cat OUT
	exit 1
}
cd ..
echo OK

echo $N Make sure changes -v is OK with moved components ............$NL
bk changes -v > OUT 2>ERR
test -s ERR && {
	echo not so much
	cat ERR
	exit 1
}
echo OK

echo $N A rename delta in the ChangeSet file should fix things up ...$NL
cd gcc4
bk edit $Q ChangeSet
bk delta -f $Q -y'Rename gcc -> gcc4'
cd ..
bk -r check -ac || {
	echo failed
	exit 1
}
echo OK

echo $N bk sfiles -n should list components in the wrong location ...$NL
mv gcc4 gcc
bk sfiles -n > OUT
test -s OUT || {
	echo failed
	bk sfiles -E
	exit 1
}
grep -q gcc/SCCS/s.ChangeSet OUT || grep -q gcc OUT || {
	echo bogus path
	cat OUT
	exit 1
}
echo OK

echo $N See if bk names will fix simple rename ......................$NL
bk -r check -acf > OUT 2>&1
test $? = 2 || {
	bad exit
	cat OUT
	exit 1
}
bk -r check -ac || {
	echo failed
	exit 1
}
echo OK

echo $N See if bk names will fix circular rename ....................$NL
mv gcc4 gdb
mv "$HERE/gdb.save" gcc4
bk -r check -acf > OUT 2>&1
test $? = 2 || {
	bad exit
	cat OUT
	exit 1
}
bk -r check -ac || {
	echo failed
	cat OUT
	exit 1
}
echo OK

echo $N Make sure that check will fix BitKeeper/log/COMPONENT .......$NL
echo wrong > gcc4/BitKeeper/log/COMPONENT
bk -r check -a
test wrong = `cat gcc4/BitKeeper/log/COMPONENT` && {
	echo failed
	exit 1
}
echo OK

echo $N Same thing in the component .................................$NL
cd gcc4
echo wrong > BitKeeper/log/COMPONENT
bk -r check -a
test wrong = `cat BitKeeper/log/COMPONENT` && {
	echo failed
	exit 1
}
echo OK

echo $N Make some csets and look at changes output ..................$NL
# First commit the rename
cd "$HERE/project"
bk commit $Q -y"rename cset"
cd gcc4
for i in file1 file2 file3
do	echo $i > $i
	bk new $Q $i
	bk commit $Q -y"Add in $i in gcc"
done
cd "$HERE/project"
bk commit $Q -y"Should be 3 csets"
bk changes -vr+ > GOT
grep -q gcc4/ChangeSet@1.9 GOT || exit 1
grep -q gcc4/ChangeSet@1.8 GOT || exit 1
grep -q gcc4/ChangeSet@1.7 GOT || exit 1
echo OK

echo $N See if bk log -r@1.6 maps to 1.9 in the component ...........$NL
test "`bk log -r@1.6 -nd:REV: gcc4/ChangeSet`" = 1.9 || {
	echo failed
	bk log -r@1.6 -nd:REV: gcc4/ChangeSet
	exit 1
}
echo OK

echo $N Check that cset -l output lists component changesets ........$NL
bk cset -l -r+ > GOT
cat > WANT <<EOF
ChangeSet|1.6
gcc4/ChangeSet|1.9
gcc4/ChangeSet|1.8
gcc4/ChangeSet|1.7
EOF
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list -r+ lists product and components ...........$NL
# valgrind --tool=memcheck --leak-check=full --show-reachable=yes \
bk ensemble_list -1r+ > GOT
cat > WANT <<EOF
.
gcc4
gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list -r+ -p lists components only ...............$NL
bk ensemble_list -r+ -p > GOT
cat > WANT <<EOF
gcc4
gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list -r1.3 lists product and components .........$NL
bk ensemble_list -1r1.3 > GOT
cat > WANT <<EOF
.
gcc4
gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list -r1.5 -r1.6 lists just gcc4 ................$NL
cat > LIST <<EOF
1.5
1.6
EOF
bk ensemble_list -1 - < LIST > GOT
cat > WANT <<EOF
.
gcc4
EOF
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list for undo -r+ ...............................$NL
echo + | bk ensemble_list -1lpd -r1.5 - > GOT
# The list should be desired tips of .|1.5 and gcc4|1.6
(
bk changes -qnd".|:KEY:" -r1.5 .
bk changes -qnd"gcc4|:KEY:" -r1.6 gcc4
) > WANT
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list for undo -a1.2, check the removes ..........$NL
(
echo 1.6
echo 1.5
echo 1.4
echo 1.3
) | bk ensemble_list -1lnp -r1.2 - > GOT
cat > WANT <<EOF
.
gcc4|(new)
gdb|(new)
EOF
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list for undo -a1.2 .............................$NL
(
echo 1.6
echo 1.5
echo 1.4
echo 1.3
) | bk ensemble_list -lpd -r1.2 - > GOT
# The list should be desired tips of .|1.2
# because the other two are removed.
(
bk changes -qnd".|:KEY:" -r1.2 .
) > WANT
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list for undo -a1.3 .............................$NL
(
echo 1.6
echo 1.5
echo 1.4
) | bk ensemble_list -1lpd -r1.3 - > GOT
# The list should be desired tips of 1.3 (just works out that way)
(
bk changes -qnd".|:KEY:" -r1.3 .
bk changes -qnd"gcc4|:KEY:" -r1.3 gcc4
) > WANT
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list for clone -r+ ..............................$NL
bk ensemble_list -1lpd -r+ > GOT
(
bk changes -qnd".|:KEY:" -r+ .
bk changes -qnd"gcc4|:KEY:" -r+ gcc4
bk changes -qnd"gdb|:KEY:" -r+ gdb
) > WANT
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list for clone -r1.3 ............................$NL
bk ensemble_list -1lpd -r1.3 > GOT
# They are all at 1.3 in 1.3
(
bk changes -qnd".|:KEY:" -r1.3 .
bk changes -qnd"gcc4|:KEY:" -r1.3 gcc4
bk changes -qnd"gdb|:KEY:" -r1.3 gdb
) > WANT
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list for clone -r1.4 ............................$NL
bk ensemble_list -1lpd -r1.4 > GOT
(
bk changes -qnd".|:KEY:" -r1.4 .
bk changes -qnd"gcc4|:KEY:" -r1.5 gcc4
bk changes -qnd"gdb|:KEY:" -r1.3 gdb
) > WANT
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list for push -r1.6 .............................$NL
echo 1.6 | bk ensemble_list -1lpd - > GOT
# The list should be desired tips of .|1.6 and gcc4|1.9
(
bk changes -qnd".|:KEY:" -r1.6 .
bk changes -qnd"gcc4|:KEY:" -r1.9 gcc4
) > WANT
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list for push -r1.5 .............................$NL
echo 1.5 | bk ensemble_list -1lpd - > GOT
(
bk changes -qnd".|:KEY:" -r1.5 .
bk changes -qnd"gcc4|:KEY:" -r1.6 gcc4
) > WANT
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list for push -r1.4 .............................$NL
echo 1.4 | bk ensemble_list -1lpd - > GOT
(
bk changes -qnd".|:KEY:" -r1.4 .
bk changes -qnd"gcc4|:KEY:" -r1.5 gcc4
) > WANT
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list for push -r1.3 .............................$NL
echo 1.3 | bk ensemble_list -1lpd - > GOT
(
bk changes -qnd".|:KEY:" -r1.3 .
bk changes -qnd"gcc4|:KEY:" -r1.3 gcc4
bk changes -qnd"gdb|:KEY:" -r1.3 gdb
) > WANT
cmpfiles WANT GOT
echo OK

# bk changes -vnd:GFILE:\ :REV:

echo $N bk ensemble list for push -r1.2 .............................$NL
echo 1.2 | bk ensemble_list -lpd - > GOT
(
bk changes -qnd".|:KEY:" -r1.2 .
) > WANT
cmpfiles WANT GOT
echo OK

echo $N bk changes / bk cset core dumps .............................$NL
bk changes -afnd:KEY: -r1.3.. > OUT
test -f core && {
	echo changes died
	exit 1
}
bk cset -ffl5 - < OUT > GOT
test -f core && {
	echo cset died
	cat OUT
	exit 1
}
echo OK

echo $N Make sure bk cset listing can skip components ...............$NL
echo 1.6 | bk cset -fflP - > GOT
echo 'ChangeSet|1.6' > WANT
cmpfiles WANT GOT
echo OK

echo $N Make sure bk cset listing can list components ...............$NL
echo 1.6 | bk cset -ffl - > GOT
cat > WANT <<EOF
ChangeSet|1.6
gcc4/ChangeSet|1.9
gcc4/ChangeSet|1.8
gcc4/ChangeSet|1.7
EOF
cmpfiles WANT GOT
echo OK

echo $N Make sure bk cset creating a patch can skip components ......$NL
echo 1.6 | bk cset -BffPm - > PATCH
grep -q '== gcc4/ChangeSet ==' PATCH && {
	echo failed
	cat PATCH
	exit 1
}
echo OK

echo $N Make sure bk makepatch can skip components ..................$NL
bk makepatch -r+ -P > PATCH
grep -q '== gcc4/ChangeSet ==' PATCH && {
	echo failed
	cat PATCH
	exit 1
}
echo OK

echo $N Make sure bk makepatch can include components ...............$NL
bk makepatch -r+ > PATCH
grep -q '== gcc4/ChangeSet ==' PATCH || {
	echo failed
	cat PATCH
	exit 1
}
echo OK

cd "$HERE"
tar cf TAR project
cd project

echo $N Test bk undo -r+ in an ensemble, removes data in one comp ...$NL
bk undo -fsr+ > OUT 2>&1  || {
	echo failed undo
	cat OUT
	exit 1
}
bk -Ar check -ac > OUT 2>&1 || {
	echo failed check
	cat OUT
	exit 1
}
cd gcc4
test `bk changes -r+ -nd:I:` = "1.6" || {
	echo failed in gcc4
	bk changes
	exit 1
}
cd ..
echo OK

echo $N Test bk undo in an ensemble that renames a component ........$NL
bk undo -fsr+ > OUT 2>&1  || {
	echo failed undo
	cat OUT
	exit 1
}
cp OUT "$HERE"
grep -q "check: trying to fix names..." OUT && {
	echo warning: should have fixed names before running check
	cat OUT
}
bk -Ar check -ac > OUT 2>&1 || {
	echo failed check
	cat OUT
	exit 1
}
echo OK

echo $N Test bk undo with extras ....................................$NL
bk undo -fsr1.4,1.3 > OUT 2>&1 && {
	echo should have failed undo
	cat OUT
	exit 1
}
grep -q "Changed/extra files in 'gcc'" OUT || {
	echo bad error message
	cat OUT
	exit 1
}
echo OK

echo $N Test bk undo in an ensemble that removes a component ........$NL
rm -f gcc/GOT gcc/OUT gcc/WANT
bk undo -fsr1.4,1.3 > OUT 2>&1  || {
	echo failed undo
	cat OUT
	exit 1
}
bk -Ar check -ac > OUT 2>&1 || {
	echo failed check
	cat OUT
	exit 1
}
echo OK

# XXX - write a test to make sure that we can list only the repos that are
# present w/ bk ensemble_list

# ditto for one that has been moved but does not yet have the rename delta

# ============================================================================
# Modules tests start here
# ============================================================================

cd "$HERE"
rm -rf project
tar xf TAR
cd project

echo $N Test simple module addition .................................$NL
REV=`bk changes -r+ -d:REV:`
bk module add -cgcc4 -cgdb dev
test $REV = `bk changes -r+ -d:REV:` && {
	echo failed to commit change
	bk cmdlog -a | tail -20
	exit 1
}
(
echo @dev 
    (
	(cd gcc4 && bk id ) 
	(cd gdb && bk id )
    ) | bk _sort
echo 
) > WANT
bk cat BitKeeper/etc/modules > GOT 
cmpfiles WANT GOT
bk clean BitKeeper/etc/modules
echo OK

echo $N Test simple module expansion ................................$NL
bk module show dev > GOT
cat > WANT <<EOF
gcc4
gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Test simple directory expansion .............................$NL
bk module show gcc4/ > GOT
cat > WANT <<EOF
gcc4
EOF
cmpfiles WANT GOT
echo OK

echo $N Combine the two .............................................$NL
bk module show dev gcc4/ > GOT
cat > WANT <<EOF
gcc4
gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Add a module that names another module ......................$NL
bk module add -cdev mydev
(
echo @dev 
    (
	(cd gcc4 && bk id ) 
	(cd gdb && bk id )
    ) | bk _sort
echo 
echo @mydev
echo dev
) > WANT
bk cat BitKeeper/etc/modules > GOT
cmpfiles WANT GOT
echo OK

echo $N Test a module that names another module .....................$NL
bk module show mydev > GOT
cat > WANT <<EOF
gcc4
gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Test a module that names another module, 2 levels ...........$NL
REV=`bk changes -r+ -d:REV:`
bk module create -C -cgcc4 B
test $REV = `bk changes -r+ -d:REV:` || {
	echo should not have commited change
	bk cmdlog -a | tail -20
	exit 1
}
bk module create -C -cgdb C
test $REV = `bk changes -r+ -d:REV:` || {
	echo should not have commited change
	bk cmdlog -a | tail -20
	exit 1
}
bk module create -cB -cC A
test $REV = `bk changes -r+ -d:REV:` && {
	echo should have commited change
	bk cmdlog -a | tail -20
	exit 1
}
bk module show A > GOT
cat > WANT <<EOF
gcc4
gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Make sure that the changeset got the module create comments .$NL
bk changes -r+ -d'$each(:C:){(:C:)\n}' > GOT
cat > WANT <<EOF
Create module B
Create module C
Create module A
EOF
cmpfiles WANT GOT
echo OK

echo $N Make sure we can remove a component from a module ...........$NL
REV=`bk changes -r+ -d:REV:`
bk module rm -cB A
echo C > WANT
bk module show -r A > GOT
cmpfiles WANT GOT
test $REV = `bk changes -r+ -d:REV:` && {
	echo should have commited change
	bk cmdlog -a | tail -20
	exit 1
}
echo OK

echo $N Make sure we can add a component to a module ................$NL
REV=`bk changes -r+ -d:REV:`
bk module add -cB A
echo B > WANT
echo C >> WANT
bk module show -r A > GOT
cmpfiles WANT GOT
test $REV = `bk changes -r+ -d:REV:` && {
	echo should have commited change
	bk cmdlog -a | tail -20
	exit 1
}
echo OK

echo $N Adding a component that is already there is a no-op .........$NL
REV=`bk changes -r+ -d:REV:`
bk module add -cB A >OUT 2>&1
test $REV = `bk changes -r+ -d:REV:` || {
	echo should not have done anything
	cat OUT
	exit 1
}
echo OK

echo $N If we modify remove all components it should be a delete ....$NL
bk module rm -cB -cC A
bk changes -r+ -d'$each(:C:){(:C:)\n}' > GOT
echo Delete module A > WANT
cmpfiles WANT GOT
bk module create -cB -cC A
echo OK

echo $N List all module names .......................................$NL
bk grep '^@' BitKeeper/etc/modules | sed 's/^@//' | bk _sort > WANT
bk module list > GOT
cmpfiles WANT GOT
echo OK

echo $N List only present components ................................$NL
bk module show -e `bk module list` > GOT
cat > WANT <<EOF
gcc4
gdb
EOF
cmpfiles WANT GOT
echo OK

echo $N Adding a directory that does not exist is an error ..........$NL
bk module add -csomedir/ A 2>ERR && {
	echo should have failed
	exit 1
}
grep -q 'somedir/ is not a directory' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
mkdir somedir
bk module add -csomedir/ A || exit 1
echo OK

echo $N Show raw expansion for A ....................................$NL
bk module show -r A > GOT
cat > WANT <<EOF
B
C
somedir/
EOF
cmpfiles WANT GOT
echo OK

echo $N Show raw expansion for B ....................................$NL
bk module show -r B > GOT
(cd gcc4 && bk id ) > WANT
cmpfiles WANT GOT
echo OK

echo $N Show raw expansion for C ....................................$NL
bk module show -r C > GOT
(cd gdb && bk id ) > WANT
cmpfiles WANT GOT
echo OK

echo $N Test infinite loop in modules ...............................$NL
bk edit $Q BitKeeper/etc/modules
(
echo @recursion
echo see_recursion
echo @see_recursion
echo recursion
) >> BitKeeper/etc/modules
bk delta $Q -ywhatever BitKeeper/etc/modules
bk module show recursion > OUT 2>&1
test $? = 1 || {
	echo should have failed
	cat OUT
	exit 1
}
grep -q 'too many levels of recursion.' OUT || {
	echo bad error message
	cat OUT
	exit 1
}
echo OK

echo $N Try removing module recursion ...............................$NL
bk module rm recursion || exit 1
bk diffs -h -R+ BitKeeper/etc/modules | grep '< ' > GOT
(
echo '< @recursion'
echo '< see_recursion'
) > WANT
cmpfiles WANT GOT
echo OK

echo $N Try removing module see_recursion ...........................$NL
bk module rm see_recursion || exit 1
bk diffs -h -R+ BitKeeper/etc/modules | grep '< ' > GOT
(
echo '< @see_recursion'
echo '< recursion'
) > WANT
cmpfiles WANT GOT
echo OK

echo $N bk ensemble list for clone -r+ but limited to -Mgcc4/........$NL
bk ensemble_list -Mgcc4/ -1lpd -r+ > GOT
(
bk changes -qnd".|:KEY:" -r+ .
bk changes -qnd"gcc4|:KEY:" -r+ gcc4
) > WANT
cmpfiles WANT GOT
echo OK

echo $N Test prefix in the iterator, with no -h, dup cset files .....$NL
bk -qA prefixed_sfiles > GOT
cat > WANT <<EOF
SCCS/s.ChangeSet
BitKeeper/etc/SCCS/s.collapsed
BitKeeper/etc/SCCS/s.config
BitKeeper/etc/SCCS/s.gone
BitKeeper/etc/SCCS/s.ignore
BitKeeper/etc/SCCS/s.modules
gcc4/SCCS/s.ChangeSet
gdb/SCCS/s.ChangeSet
gcc4/SCCS/s.ChangeSet
gcc4/SCCS/s.file1
gcc4/SCCS/s.file2
gcc4/SCCS/s.file3
gcc4/SCCS/s.name
gcc4/BitKeeper/etc/SCCS/s.collapsed
gcc4/BitKeeper/etc/SCCS/s.config
gcc4/BitKeeper/etc/SCCS/s.gone
gcc4/BitKeeper/etc/SCCS/s.ignore
gdb/SCCS/s.ChangeSet
gdb/SCCS/s.name
gdb/BitKeeper/etc/SCCS/s.collapsed
gdb/BitKeeper/etc/SCCS/s.config
gdb/BitKeeper/etc/SCCS/s.gone
gdb/BitKeeper/etc/SCCS/s.ignore
EOF
cmpfiles WANT GOT
echo OK

echo $N Test prefix in the iterator with modules ....................$NL
bk -qA -Mgcc4/ prefixed_sfiles -h > GOT
cat > WANT <<EOF
SCCS/s.ChangeSet
BitKeeper/etc/SCCS/s.collapsed
BitKeeper/etc/SCCS/s.config
BitKeeper/etc/SCCS/s.gone
BitKeeper/etc/SCCS/s.ignore
BitKeeper/etc/SCCS/s.modules
gcc4/SCCS/s.ChangeSet
gcc4/SCCS/s.file1
gcc4/SCCS/s.file2
gcc4/SCCS/s.file3
gcc4/SCCS/s.name
gcc4/BitKeeper/etc/SCCS/s.collapsed
gcc4/BitKeeper/etc/SCCS/s.config
gcc4/BitKeeper/etc/SCCS/s.gone
gcc4/BitKeeper/etc/SCCS/s.ignore
EOF
cmpfiles WANT GOT
echo OK

echo $N Test prefix in the iterator with rev ........................$NL
cd ..
bk clone $Q gcc liberty
cd project
REV=`bk changes -r+ -d:REV:`
bk ensemble add $Q -yliberty ../liberty liberty
bk -qA -M"|$REV" prefixed_sfiles -h > GOT
cat > WANT <<EOF
SCCS/s.ChangeSet
BitKeeper/etc/SCCS/s.collapsed
BitKeeper/etc/SCCS/s.config
BitKeeper/etc/SCCS/s.gone
BitKeeper/etc/SCCS/s.ignore
BitKeeper/etc/SCCS/s.modules
gcc4/SCCS/s.ChangeSet
gcc4/SCCS/s.file1
gcc4/SCCS/s.file2
gcc4/SCCS/s.file3
gcc4/SCCS/s.name
gcc4/BitKeeper/etc/SCCS/s.collapsed
gcc4/BitKeeper/etc/SCCS/s.config
gcc4/BitKeeper/etc/SCCS/s.gone
gcc4/BitKeeper/etc/SCCS/s.ignore
gdb/SCCS/s.ChangeSet
gdb/SCCS/s.name
gdb/BitKeeper/etc/SCCS/s.collapsed
gdb/BitKeeper/etc/SCCS/s.config
gdb/BitKeeper/etc/SCCS/s.gone
gdb/BitKeeper/etc/SCCS/s.ignore
EOF
cmpfiles WANT GOT
echo OK

echo $N Test prefix in the iterator with no rev, should see liberty .$NL
bk -qA prefixed_sfiles -h > GOT
cat > WANT <<EOF
SCCS/s.ChangeSet
BitKeeper/etc/SCCS/s.collapsed
BitKeeper/etc/SCCS/s.config
BitKeeper/etc/SCCS/s.gone
BitKeeper/etc/SCCS/s.ignore
BitKeeper/etc/SCCS/s.modules
gcc4/SCCS/s.ChangeSet
gcc4/SCCS/s.file1
gcc4/SCCS/s.file2
gcc4/SCCS/s.file3
gcc4/SCCS/s.name
gcc4/BitKeeper/etc/SCCS/s.collapsed
gcc4/BitKeeper/etc/SCCS/s.config
gcc4/BitKeeper/etc/SCCS/s.gone
gcc4/BitKeeper/etc/SCCS/s.ignore
gdb/SCCS/s.ChangeSet
gdb/SCCS/s.name
gdb/BitKeeper/etc/SCCS/s.collapsed
gdb/BitKeeper/etc/SCCS/s.config
gdb/BitKeeper/etc/SCCS/s.gone
gdb/BitKeeper/etc/SCCS/s.ignore
liberty/SCCS/s.ChangeSet
liberty/SCCS/s.name
liberty/BitKeeper/etc/SCCS/s.collapsed
liberty/BitKeeper/etc/SCCS/s.config
liberty/BitKeeper/etc/SCCS/s.gone
liberty/BitKeeper/etc/SCCS/s.ignore
EOF
cmpfiles WANT GOT
echo OK

echo $N Test that we can suppress the product .......................$NL
bk -qA -M'!.' prefixed_sfiles -h > GOT
cat > WANT <<EOF
gcc4/SCCS/s.ChangeSet
gcc4/SCCS/s.file1
gcc4/SCCS/s.file2
gcc4/SCCS/s.file3
gcc4/SCCS/s.name
gcc4/BitKeeper/etc/SCCS/s.collapsed
gcc4/BitKeeper/etc/SCCS/s.config
gcc4/BitKeeper/etc/SCCS/s.gone
gcc4/BitKeeper/etc/SCCS/s.ignore
gdb/SCCS/s.ChangeSet
gdb/SCCS/s.name
gdb/BitKeeper/etc/SCCS/s.collapsed
gdb/BitKeeper/etc/SCCS/s.config
gdb/BitKeeper/etc/SCCS/s.gone
gdb/BitKeeper/etc/SCCS/s.ignore
liberty/SCCS/s.ChangeSet
liberty/SCCS/s.name
liberty/BitKeeper/etc/SCCS/s.collapsed
liberty/BitKeeper/etc/SCCS/s.config
liberty/BitKeeper/etc/SCCS/s.gone
liberty/BitKeeper/etc/SCCS/s.ignore
EOF
cmpfiles WANT GOT
echo OK


# Deep nesting
echo $N Test that we see a nested component .........................$NL
cd "$HERE"
for i in A B C
do	bk clone -q gcc $i
	(cd $i && bk newroot -q)
done
cd project
bk clone $Q ../A gdb/A
test -f BitKeeper/log/deep-nests || {
	echo failed to create hints file
	exit 1
}
grep -q '^gdb/A$' BitKeeper/log/deep-nests || {
	echo bad path
	cat BitKeeper/log/deep-nests
	exit 1
}
bk sfiles > GOT
grep -q gdb/A/SCCS/s.ChangeSet GOT || {
	echo bk sfiles did not find nested ChangeSet
	cat GOT
	exit 1
}
echo OK

echo $N Test that we see a nested/nested component ..................$NL
bk clone $Q ../B gdb/A/B
test -f BitKeeper/log/deep-nests || {
	echo failed to maintain hints file
	exit 1
}
grep -q '^gdb/A$' BitKeeper/log/deep-nests || {
	echo bad path
	cat BitKeeper/log/deep-nests
	exit 1
}
grep -q '^gdb/A/B$' BitKeeper/log/deep-nests || {
	echo bad path
	cat BitKeeper/log/deep-nests
	exit 1
}
bk sfiles > GOT
grep -q gdb/A/SCCS/s.ChangeSet GOT || {
	echo bk sfiles did not find nested A/ChangeSet
	cat GOT
	exit 1
}
grep -q gdb/A/B/SCCS/s.ChangeSet GOT || {
	echo bk sfiles did not find nested A/B/ChangeSet
	cat GOT
	exit 1
}
echo OK

echo $N Test that we see a nested/nested/nested component ...........$NL
bk clone $Q ../C gdb/A/B/C
test -f BitKeeper/log/deep-nests || {
	echo failed to maintain hints file
	exit 1
}
grep -q '^gdb/A$' BitKeeper/log/deep-nests || {
	echo bad path
	cat BitKeeper/log/deep-nests
	exit 1
}
grep -q '^gdb/A/B$' BitKeeper/log/deep-nests || {
	echo bad path
	cat BitKeeper/log/deep-nests
	exit 1
}
grep -q '^gdb/A/B/C$' BitKeeper/log/deep-nests || {
	echo bad path
	cat BitKeeper/log/deep-nests
	exit 1
}
bk sfiles > GOT
grep -q gdb/A/SCCS/s.ChangeSet GOT || {
	echo bk sfiles did not find nested A/ChangeSet
	cat GOT
	exit 1
}
grep -q gdb/A/B/SCCS/s.ChangeSet GOT || {
	echo bk sfiles did not find nested A/B/ChangeSet
	cat GOT
	exit 1
}
grep -q gdb/A/B/C/SCCS/s.ChangeSet GOT || {
	echo bk sfiles did not find nested A/B/C/ChangeSet
	cat GOT
	exit 1
}
echo OK

# echo $N Test sfiles -x ..............................................$NL
# bk sfiles -x
