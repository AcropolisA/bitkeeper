echo $N Setup .......................................................$NL
commercial project
cd "$HERE"
bk clone $Q project gcc
cd gcc
echo gcc > name
bk new $Q name
bk commit $Q -ygcc 
cd "$HERE"
bk clone $Q project gdb
cd gdb
echo gdb > name
bk new $Q name
bk commit $Q -ygcc 
echo OK

echo $N Convert to product ..........................................$NL
cd "$HERE/project"
bk ensemble create $Q
test "`bk ensemble`" = "This is the product." || {
	echo failed to make it a product
    	exit 1
}
test -f BitKeeper/log/PRODUCT || {
	echo failed to touch product turd
    	exit 1
}
echo OK

echo $N Add some components .........................................$NL
bk ensemble add $Q -y'gcc & gdb' ../gcc gcc ../gdb gdb
cd gcc
test "`bk ensemble`" = "This is a component" || {
	echo failed to make it a component
	ls BitKeeper/log
	exit 1
}
test -z "`bk pending`" || {
	echo did not clear pending marks
	exit 1
}
echo OK

echo $N Check dspecs ................................................$NL
cd "$HERE/project"
test "`bk log -r+ -nd:FILE: gcc/ChangeSet`" = gcc/ChangeSet || {
	echo bad gcc/ChangeSet
	exit 1
}
echo OK

echo $N Check for components in top changeset .......................$NL
cd "$HERE/project"
bk changes -v -r+ -nd'$if(:FILE:){:GFILE:}' | sort > GOT
cat > WANT <<EOF
gcc/ChangeSet
gcc/ChangeSet
gcc/ChangeSet
gdb/ChangeSet
gdb/ChangeSet
gdb/ChangeSet
EOF
cmpfiles WANT GOT
echo OK

echo $N Check that we can get a relative name from product ..........$NL
mkdir -p gcc/a/b/c
cd gcc/a/b/c
test `bk pwd -R` = gcc/a/b/c || {
	echo pwd -R failed
	exit 1
}
test `bk pwd -r` = a/b/c || {
	echo pwd -r failed
	exit 1
}
echo OK

echo $N Check that sfiles lists components ..........................$NL
cd "$HERE/project"
bk sfiles > GOT
cat > WANT <<EOF
SCCS/s.ChangeSet
BitKeeper/etc/SCCS/s.collapsed
BitKeeper/etc/SCCS/s.config
BitKeeper/etc/SCCS/s.gone
BitKeeper/etc/SCCS/s.ignore
gcc/SCCS/s.ChangeSet
gdb/SCCS/s.ChangeSet
EOF
cmpfiles WANT GOT
echo OK

echo $N Check that sfiles -x lists extra repos ......................$NL
bk clone $Q ../gcc extra
mkdir foo
bk clone $Q ../gcc foo/extra
bk sfiles -x > GOT
cat > WANT <<EOF
GOT
WANT
extra
foo/extra
EOF
cmpfiles WANT GOT
test `bk sfiles -x foo` = "foo/extra" || {
	echo failed on foo/extra
	exit 1
}
echo OK

