# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2002 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Tests for aliases


echo $N Create an ensemble...........................................$NL
nested project
# add some files
cd "$HERE/project/gcc"
for i in 1 2 3 4 5
do
	touch file$i
	echo "stuff $i" > file$i
	bk new $Q -y"add" file$i
done
bk commit $Q -y"Add $i to file$i"
cd "$HERE/project" && bk commit $Q -y"Commit cset in gcc"
cd "$HERE/project/gdb"
for i in 1 2 3 4 5
do
	touch file$i
	echo "stuff $i" > file$i
	bk new $Q -y"add" file$i
	bk commit $Q -y"add file $i"
done
cd "$HERE/project" && bk commit $Q -y"add csets to gdb"
echo OK

echo $N Clone and see that we have a default alias list .............$NL
cd "$HERE"
bk clone $Q project clone
cd clone
bk alias show here > GOT
echo default > WANT
cmpfiles GOT WANT
echo OK

echo $N Set up a test where we will add another alias ...............$NL
cd "$HERE/project"
bk alias new stuff gcc gdb
cd ..
bk clone $Q -sstuff project stuff
bk clone $Q -sstuff project stuff2
commercial libc
cd "$HERE/project"
bk clone $Q ../libc path/to/libc
bk clone $Q ../libc junk
bk attach $Q junk path/to/libc
bk alias add stuff path/to/libc
echo OK

echo $N Test that we can read the name and dirs and globs ...........$NL
bk alias show -p stuff | bk _sort > GOT
cat << EOF > WANT
gcc
gdb
path/to/libc
EOF
checkfiles WANT GOT
bk alias show -p ./gcc > GOT
echo gcc > WANT
checkfiles WANT GOT
# make sure longer and shorter don't match
bk alias show -p ./gccc\* 2>ERR && {
	echo should fail
	cat ERR
	exit 1
}
cat <<EOF > WANT
alias: gccc* does not match any components.
EOF
checkfiles WANT ERR
bk alias show -p ./gc/\* 2>ERR && {
	echo should fail
	cat ERR
	exit 1
}
cat <<EOF > WANT
alias: gc/* does not match any components.
EOF
checkfiles WANT ERR
# globs that work
for p in "g*" "gc*" "g*c" "*c" "p*" "path/*"
do	bk alias show -p "./$p" | bk _sort
	echo ..
done > GOT
cat << EOF > WANT
gcc
gdb
..
gcc
..
gcc
..
gcc
path/to/libc
..
path/to/libc
..
path/to/libc
..
EOF
checkfiles WANT GOT
echo OK

echo $N Test that what looks like an alias is an alias ..............$NL
bk alias new gcc ./gcc ./gdb
bk alias new samething gcc
bk alias show -p gcc > WANT
bk alias show -p samething > GOT
checkfiles WANT GOT
# Need -C here as the aliasdb is broken; could see that and require -C
bk alias rm -C gcc
bk alias rm samething
echo OK

echo $N Try a push, should add libc but not junk ....................$NL
bk parent $Q -ao ../stuff ../stuff2
bk push > ../OUT 2>&1 || {
	echo should not have failed
	cat ../OUT
	exit 1
}
cd ../stuff
test -d path/to/libc || {
	echo did not add libc
	cat ../OUT
	exit 1
}
test -d junk && {
	echo should not have added junk
	cat ../OUT
	exit 1
}
cd ../stuff2
test -d path/to/libc || {
	echo did not add libc
	cat ../OUT
	exit 1
}
test -d junk && {
	echo should not have added junk
	cat ../OUT
	exit 1
}
echo OK

echo $N Try unpull and see if that works ............................$NL
bk unpull -f > OUT 2>&1 || {
	echo failed
	exit 1
}
test -d path/to/libc && {
	echo failed to remove libc
	exit 1
}
echo OK

echo $N Try a pull, should add libc but not junk ....................$NL
bk pull > ../OUT 2>&1 || {
	echo should not have failed
	cat ../OUT
	exit 1
}
test -d path/to/libc || {
	echo did not add libc
	cat ../OUT
	exit 1
}
test -d junk && {
	echo should not have added junk
	cat ../OUT
	exit 1
}
echo OK

echo $N Setup a populate that needs to go backwards .................$NL
cd ../project
for i in 1 2
do	cd path/to/libc
	touch FILE$i
	bk new $Q FILE$i
	bk commit $Q -y$i
	cd ../../../junk
	touch FILE$i
	bk new $Q FILE$i
	bk commit $Q -y$i
	cd ..
	bk commit $Q -y$i
done
TIP=`bk changes -qr+ -d:REV: junk`
echo OK

echo $N Clone backwards, getting just libc, populate junk ...........$NL
cd "$HERE"
bk clone -r1.8 -s./path/to/libc project behind > OUT 2>&1
cd behind
test -d junk && {
	echo should not have junk
	exit 1
}
test -d path/to/libc || {
	echo should have libc
	exit 1
}
bk components add $Q ./junk || {
	echo failed
	exit 1
}
test $TIP = `bk changes -qr+ -d:REV: junk` && {
	echo failed to roll back junk
	exit 1
}
bk -Aqr check -ac || exit 1
echo OK

echo $N Test -s./gcc/nm .............................................$NL
cd "$HERE"
commercial nm
cd "$HERE"/project
bk clone $Q ../nm gcc/nm
bk attach $Q gcc/nm
cd "$HERE"
bk clone -s./gcc/nm project project-nm > OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
echo OK

echo $N Set up by populating all ....................................$NL
cd project-nm
bk components set $Q default || exit 1
cat > WANT <<EOF
gcc
gcc/nm
gdb
junk
path/to/libc
EOF
bk components here > GOT
cmpfiles WANT GOT
echo OK

echo $N Test a default that is just gdb .............................$NL
cd ..
bk clone -s./gdb $Q project-nm project-just-gdb || exit 1
cd project-just-gdb
bk alias show here > GOT
(cd gdb; bk id) > WANT
cmpfiles GOT WANT
bk alias set default ./gdb || exit 1
bk components set $Q default || exit 1
bk alias show here > GOT
echo default > WANT
cmpfiles GOT WANT
bk components here > GOT
echo gdb > WANT
cmpfiles WANT GOT
echo OK

echo $N Test -s./gcc ................................................$NL
cd "$HERE"
bk clone -s./gcc project project-gcc > OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
test -d project-gcc/gcc || {
	echo failed to make gcc
	cat OUT
	exit 1
}
echo OK

echo $N Test -s./gcc -s./gcc*........................................$NL
cd "$HERE"
bk clone -s./gcc -s./gcc* project project-gcc-2 >OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
test -d project-gcc-2/gcc || {
	echo failed to make gcc
	cat OUT
	exit 1
}
echo OK


echo $N Test -s. ....................................................$NL
cd "$HERE"
bk clone -s. $Q project project-dot || {
	echo failed
	exit 1
}
test -d project-dot || {
	echo failed to make project-dot
	exit 1
}
test -d project-dot/gcc -o -d project-dot/gdb && {
	echo should not have brought components
	cat OUT
	exit 1
}
echo OK

echo $N Make sure populate -sno-such-dir does not add to COMPONENTS .$NL
cd project-dot
bk components set $Q ./no-such-dir 2>ERR && {
	echo should have failed
	cat ERR
	exit 1
}
bk components here || exit 1
echo OK

echo $N Same thing with a glob ......................................$NL
bk components set './no-such-dir*' > OUT 2>&1 && {
	echo populate should have failed
	cat OUT
	exit 1
}
bk components here || exit 1
echo OK

echo $N Populate junk, run populate, should do nothing ..............$NL
bk components add $Q ./junk || {
	echo should not have failed
	exit 1
}
test -d junk || exit 1
bk components set $Q here || exit 1
bk alias show here > GOT
(cd junk; bk id) > WANT
cmpfiles GOT WANT
echo OK

echo $N Same thing with a glob that matches junk when we have junk ..$NL
test -d junk || exit 1
bk components add $Q './junk*' || {
	echo populate should not have failed
	exit 1
}
bk alias show here > GOT
cmpfiles GOT WANT
echo OK

echo $N Test alias with non-recursive duplicated definitions.........$NL
cd "$HERE"/project
bk edit $Q BitKeeper/etc/aliases
(
echo @alias1
echo alias2
echo @alias2
echo alias3
echo alias3
echo @alias3
(cd gcc; bk id)
) >> BitKeeper/etc/aliases
bk delta $Q -ywhatever BitKeeper/etc/aliases
bk alias show -p alias1 > GOT 2>&1 || {
	echo failed
	cat GOT
	exit 1
}
echo gcc > WANT
cmpfiles WANT GOT
echo OK

echo $N Test alias with recursive definitiion .......................$NL
cd "$HERE"/project
bk edit $Q BitKeeper/etc/aliases
(
echo @alias1
echo alias2
echo @alias2
echo alias3
echo @alias3
echo alias1
(cd gcc; bk id)
) >> BitKeeper/etc/aliases
bk delta $Q -ywhatever BitKeeper/etc/aliases
bk alias show -p alias1 2> ERR && {
	echo failed
	cat GOT
	exit 1
}
grep -q 'recursive alias definition' ERR || exit 1
echo OK

echo $N Remove all aliases...........................................$NL
cd "$HERE"/project
bk alias show | grep -v all | while read x
do
	bk alias rm -C $x 2> ERR || {
		echo failed
		cat ERR
		exit 1
	}
done
test x`bk alias show` = x || {
	echo alias list not empty
	bk alias show
	exit 1
}
echo OK

echo $N Add all components as an alias...............................$NL
cd "$HERE"/project
bk _nested | bk alias new A - || {
	echo failed
	exit 1
}
bk _nested > WANT
bk alias show -p A > GOT
cmpfiles WANT GOT
echo OK

echo $N Add catch-all glob...........................................$NL
cd "$HERE"/project
bk alias new all-glob './*' || {
	echo failed
	exit 1
}
bk _nested > WANT
bk alias show -p all-glob > GOT
cmpfiles WANT GOT
echo OK

echo $N Invalid alias names should fail..............................$NL
cd "$HERE"/project
bk alias new 'this is invalid' gcc gdb >ERR 2>&1 && {
	echo failed
	cat ERR
	exit 1
}
bk alias new ./foobar gcc gdb >ERR 2>&1 && {
	echo failed
	cat ERR
	exit 1
}
bk alias new +foo gcc gdb >ERR 2>&1 && {
	echo failed
	cat ERR
	exit 1
}
echo OK

# XXX: there's a bug in bk attach in which if you run it inside a product
# that is inside another product, the component will be attached to the
# enclosing product and not to the immediate product. I didn't look into this.
# as attach was rewritten in the setup cset.... (link RTI)
echo $N Component of another product should fail.....................$NL
cd "$HERE"
printf "" > empty
bk setup -fcempty -P p2
cd p2
bk setup -fc"$HERE/empty" gcc
cd "$HERE"/project
mv "$HERE"/p2 .
bk alias add compiler p2/gcc gcc >ERR 2>&1 && {
	echo failed
	echo attached a component from another product
	exit 1
}
grep -q "p2/gcc must be either a glob, key, alias, or component." ERR || {
	echo failed
	echo wrong error message
	cat ERR
	exit 1
}
echo OK

echo $N bk alias -C should leave pending aliases file................$NL
cd "$HERE"/project
bk alias new -C dev gcc gdb >ERR 2>&1 || {
	echo failed
	cat ERR
	exit 1
}
echo BitKeeper/etc/SCCS/s.aliases > WANT
bk sfiles -cP > GOT
cmpfiles WANT GOT
echo OK

echo $N Test show interface..........................................$NL
cd "$HERE"/project
for m in `bk alias show`
do
	echo @$m
	bk alias show -k $m
done > GOT
bk cat BitKeeper/etc/aliases > WANT
cmpfiles WANT GOT
echo OK

echo $N Try and show an alias that is not there .....................$NL
bk alias show "DOESNOTEXIST" 2> ERR && {
	echo failed rc
	cat ERR
	exit 1
}
grep -q "alias: no alias: DOESNOTEXIST" ERR || {
	echo failed msg
	cat ERR
	exit 1
}
echo OK

echo $N Test creating aliases in a sparse tree ......................$NL
bk commit $Q -y'aliases'
(
cd gcc
bk id
cd ../gdb
bk id
) > ../WANT
cd "$HERE"
bk clone $Q -s. project sparse || exit 1
cd sparse || exit 1
test -d gcc && {
	echo should not have gcc
	exit 1
}
# Note: trying both forms of "dir" and "./dir"
bk alias new sparse ./gcc gdb || exit 1
bk alias show -k sparse > GOT
cmpfiles ../WANT GOT
echo OK

echo $N Test creating files in the place of missing aliases .........$NL
cd "$HERE"/project-gcc
mkdir gdb
echo hi > gdb/foo
bk new $Q gdb/foo || exit 1
bk commit -ybadfile $Q 2>ERR && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q "check: gdb/foo conflicts with component at gdb" ERR || exit 1

cd gcc
mkdir nm
echo hi > nm/foo
bk new $Q nm/foo || exit 1
bk commit -ybadfile $Q  2>ERR && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q "check: nm/foo conflicts with component at nm" ERR || exit 1
echo OK

echo $N Make sure we can not remove the all alias ...................$NL
bk alias rm all > OUT 2>&1 && {
	echo should have failed
	cat OUT
	exit 1
}
grep -q 'alias: no such alias "all"' OUT || {
	echo bad error message
	cat OUT
	exit 1
}
echo OK

echo $N Make sure we can not remove the gcc component from all.......$NL
# note: rm has special powers to remove anything in the db that might
# have accidentally gotten there, like 'all'. So the db is checked.
bk alias rm all ./gcc > OUT 2>&1 && {
	echo should have failed
	cat OUT
	exit 1
}
grep -q 'alias: reserved name "all" may not be changed' OUT || {
	echo bad error message
	cat OUT
	exit 1
}
echo OK

echo $N Make sure we can not add to the all alias ...................$NL
bk alias add all ./gcc > OUT 2>&1 && {
	echo should have failed
	cat OUT
	exit 1
}
grep -q 'reserved name "all" may not be changed.' OUT || {
	echo bad error message
	cat OUT
	exit 1
}
echo OK

echo $N Using a relative path in bk alias should work................$NL
cd "$HERE"/project/gcc
bk alias new nm ./nm || {
	echo failed
	exit 1
}
bk alias show -p nm >GOT
cat <<EOF >WANT
gcc/nm
EOF
cmpfiles WANT GOT
echo OK

echo $N Check alias listing in path mode ............................$NL
cat > WANT <<EOF
@A
gcc
gcc/nm
gdb
junk
path/to/libc
@all-glob
gcc
gcc/nm
gdb
junk
path/to/libc
@dev
gcc
gdb
@nm
gcc/nm
EOF
bk alias show | while read x
do	echo @$x
	bk alias show -p $x
done > GOT
cp GOT ~/p
cmpfiles WANT GOT
echo OK

echo $N Alias -f default does overwrite / replace as expected .......$NL
cd "$HERE/project"
# setup a default because none has been defined.
# Then try to replace it
bk aliases set -C default junk || exit 1
bk aliases set -C default ./gcc
bk alias show default > GOT
bk changes -qr1.0 -nd:KEY: gcc > WANT
cmpfiles WANT GOT
echo OK

echo $N Alias -a of missing components and check fails ..............$NL
cd "$HERE/project-nm"
bk -qA changes -r+ -nd:ROOTKEY: | bk alias set -C default -
bk -r check || exit 1
rm -fr junk
bk -r check 2> ERR && { echo fix test; exit 1; }
grep -q "error expanding alias 'default' because 'junk' is not present" ERR || {
	echo wrong msg
	cat ERR
	exit 1
}
# I say this is a ...
echo "failed (bug )"
