# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2002 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Tests for product clone.

echo $N Create initial ensemble......................................$NL
nested project
# Now add some stuff
for r in gcc gdb
do
	cd $r
	for i in 1 2 3 4
	do
		echo $i > file$i
		bk new $Q file$i
	done
	bk commit $Q -y"add some files"
	cd ..
done
bk commit $Q -y"Added files to gcc & gdb"
echo OK

echo $N Clone the product............................................$NL
cd "$HERE"
bk clone $Q project copy >OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
cd copy
bk -Ar check -a >OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
echo OK

echo $N Test the parent pointer......................................$NL
P=`bk parent -l`
EP=file://"$HERE"/project
STATUS="OK"
test "$P" = "$EP" || {
	EP=file:/"$HERE"/project
	test "$P" = "$EP" || {
		echo failed
		echo "got '$P'"
		exit 1
	}
	STATUS="failed (bug in url handling)"
}
echo $STATUS

echo $N Test that components have no parent pointer..................$NL
for r in gcc gdb
do
	cd "$HERE/copy/$r"
	P=`bk parent -l`
	EP="This repository has no parent."
	test "$P" = "$EP" || {
		echo failed
		echo "expected: $EP"
		echo "got     : $P"
		exit 1
	}
done
echo OK

echo $N Test that clone on a component fails ........................$NL
cd "$HERE"
bk clone $Q project/gcc mynewgcc 2> ERR && {
	echo failed
	exit 1
}
grep -q "clone of a component is not allowed" ERR || {
	echo wrong msg
	cat ERR
	exit 1
}
bk clone $Q copy/gcc mynewgcc 2> ERR && {
	echo failed
	exit 1
}
grep -q "clone of a component is not allowed" ERR || {
	echo wrong msg
	cat ERR
	exit 1
}
echo OK

cd "$HERE"
cd project
bk sfiles -R | grep -v gcc > ../LIST
cd ..

echo $N Test that -Mkey clones work .................................$NL
KEY=`bk changes -r+ -q -d:ROOTKEY: project/gcc`
rm -rf mynewgcc
bk clone $Q -M"$KEY" project mynewgcc 2> ERR || {
	echo failed
	cat ERR
	exit 1
}
test -d mynewgcc -a -d mynewgcc/gcc || {
	echo did not bring gcc module across
	cat ERR
	exit 1
}
for i in `cat LIST`
do	test -d mynewgcc/$i && {
		echo should not have brought $i
		cat ERR
		exit 1
	}
done
echo OK

echo $N Test that we can clone using the MODULES file ...............$NL
rm -rf mynewgcc
cd project
bk module add -cgcc justgcc
cd ..
bk clone $Q -Mjustgcc project mynewgcc 2> ERR || {
	echo failed
	cat ERR
	exit 1
}
test -d mynewgcc -a -d mynewgcc/gcc || {
	echo did not bring gcc module across
	cat ERR
	exit 1
}
for i in `cat LIST`
do	test -d mynewgcc/$i && {
		echo should not have brought $i
		cat ERR
		exit 1
	}
done
echo OK

echo $N Test that we can clone just that component with -Mgcc/ ......$NL
rm -rf mynewgcc
bk clone $Q -Mgcc/ project mynewgcc 2> ERR || {
	echo failed
	cat ERR
	exit 1
}
test -d mynewgcc -a -d mynewgcc/gcc || {
	echo did not bring gcc module across
	cat ERR
	exit 1
}
for i in `cat LIST`
do	test -d mynewgcc/$i && {
		echo should not have brought $i
		cat ERR
		exit 1
	}
done
echo OK

echo $N Make sure that the MODULES file is correct ..................$NL
cd mynewgcc
test -f BitKeeper/log/MODULES || {
	echo no MODULES file
	exit 1
}
test "`cat BitKeeper/log/MODULES`" = "gcc/" || {
	echo bad content
	cat BitKeeper/log/MODULES
	exit 1
}
echo OK

echo $N Make sure that the MODULES file propogates on clone .........$NL
cd "$HERE"
bk clone $Q mynewgcc mynewgcc2
cd mynewgcc2
test -f BitKeeper/log/MODULES || {
	echo no MODULES file
	exit 1
}
test "`cat BitKeeper/log/MODULES`" = "gcc/" || {
	echo bad content
	cat BitKeeper/log/MODULES
	exit 1
}
echo OK

echo $N Add a component with populate -Mgdb/ ........................$NL
cd "$HERE/mynewgcc"
bk populate $Q -Mgdb/ || exit 1
test -d gdb || {
	echo failed to get gdb
	exit 1
}
echo OK

echo $N Make sure that the MODULES file is correct ..................$NL
test -f BitKeeper/log/MODULES || {
	echo no MODULES file
	exit 1
}
cat > WANT <<EOF
gcc/
gdb/
EOF
cmpfiles WANT BitKeeper/log/MODULES
echo OK

echo $N Check that populate is idempotent ...........................$NL
cd "$HERE/mynewgcc"
bk populate $Q -Mgdb/ || exit 1
test -d gdb || {
	echo failed to get gdb
	exit 1
}
echo OK

echo $N Make sure that the MODULES file is still correct ............$NL
test -f BitKeeper/log/MODULES || {
	echo no MODULES file
	exit 1
}
cat > WANT <<EOF
gcc/
gdb/
EOF
cmpfiles WANT BitKeeper/log/MODULES
echo OK

# This is somewhat different in that the parent has a MODULES file.
# In a fully populated tree you wouldn't expect one.
echo $N clone -Mgcc/ should have only that in MODULES ...............$NL
cd "$HERE"
bk clone $Q -Mgcc/ mynewgcc mynewgcc3
cd mynewgcc3
test -d gdb && {
	echo should not have gdb
	exit 1
}
test -f BitKeeper/log/MODULES || {
	echo no MODULES file
	exit 1
}
test "`cat BitKeeper/log/MODULES`" = "gcc/" || {
	echo bad content
	cat BitKeeper/log/MODULES
	exit 1
}
echo OK

echo $N clone -Mjunk when no such module exists should fail .........$NL
cd "$HERE"
bk clone -Mjunk mynewgcc3 mynewgcc4 2> ERR && {
	echo should have failed and did not
	cat ERR
	exit 1
}
test -d mynewgcc4 && {
	echo should not have created anything
	exit 1
}
echo OK

# No way to test this now.
test 0 == 1 && {
echo $N clone -Mjunk/ when no such directory exists should fail .....$NL
cd "$HERE"
bk clone -Mjunk/ mynewgcc3 mynewgcc4 2> ERR && {
	echo should have failed and did not
	cat ERR
	exit 1
}
test -d mynewgcc4 && {
	echo should not have created anything
	exit 1
}
echo OK
}

echo $N clone -Mgdb/ when the parent only has gcc ...................$NL
cd "$HERE"
bk clone -Mgdb/ mynewgcc3 mynewgcc4 > ERR 2>&1 || {
	echo should not have failed
	cat ERR
	exit 1
}
grep -q "clone: gdb not present in" ERR || {
	echo diff msg
	cat ERR
	exit 1
}
cd mynewgcc4
test -d gdb && {
	echo should not have gdb
	exit 1
}
test -f BitKeeper/log/MODULES || {
	echo no MODULES file
	exit 1
}
test "`cat BitKeeper/log/MODULES`" = "gdb/" || {
	echo Yes, modules file should not have gdb
	echo fix this test
	exit 1
}
echo OK

echo $N Check that we can populate gdb from elsewhere ...............$NL
bk populate -Mgdb/ ../project > OUT 2>&1
test -d gdb -a -f gdb/SCCS/s.ChangeSet || {
	echo failed
	cat OUT
	exit 1
}
echo OK

echo $N Add more stuff to gcc........................................$NL
cd "$HERE/project/gcc"
for i in 1 2 3 4
do
	bk edit $Q file$i
	echo "stuff $i" > file$i
	bk delta $Q -y"modify" file$i
	bk commit $Q -y"Add $i to file$i"
done
cd ..
bk commit $Q -y"more stuff to gcc"
echo OK

echo $N clone -r test................................................$NL
TIP=`cd "$HERE/copy" && bk changes -nd:REV: -r+`
cd "$HERE"
bk clone $Q -r"$TIP" project copy2 >OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
cd copy2
T=`bk changes -nd:REV: -r+`
test x$T = x$TIP || {
	echo failed
	echo cloned copy has $T as tip, expected $TIP
	exit 1
}
echo OK

echo $N Test clone through a bkd.....................................$NL
cd "$HERE/project"
P=`port 50000`
# what is coming out stdout? and stderr?
# bk bkd -q -d -p$P -ikill > "$HERE/BKD" 2>&1
bk bkd -q -d -p$P -ikill 
cd "$HERE"
bk clone $Q bk://localhost:$P clone3 || {
	echo failed
	cat OUT
	exit 1
}
bk _kill bk://localhost:$P || exit 1
echo OK

echo $N Test lclone..................................................$NL
cd "$HERE"
bk lclone $Q project lcopy >OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
cd lcopy
bk -Ar check -a >OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
echo OK

echo $N Test the parent pointer......................................$NL
P=`bk parent -l`
EP=file://"$HERE"/project
STATUS="OK"
test "$P" = "$EP" || {
	EP=file:/"$HERE"/project
	test "$P" = "$EP" || {
		echo failed
		echo "got '$P'"
		exit 1
	}
	STATUS="failed (bug in url handling)"
}
echo $STATUS

echo $N Test that components have no parent pointer..................$NL
for r in gcc gdb
do
	cd "$HERE/copy/$r"
	P=`bk parent -l`
	EP="This repository has no parent."
	test "$P" = "$EP" || {
		echo failed
		echo "expected: $EP"
		echo "got     : $P"
		exit 1
	}
done
echo OK

echo $N Test lclone -r...............................................$NL
cd "$HERE"
bk lclone $Q -r"$TIP" project lcopy2 >OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
cd lcopy2
T=`bk changes -nd:REV: -r+`
test x$T = x$TIP || {
	echo failed
	echo cloned copy has $T as tip, expected $TIP
	exit 1
}
echo OK

echo $N Test clone with args.........................................$NL
cd "$HERE"
bk clone -EBKU_TEST=ff $Q project copy_args >OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
echo OK
