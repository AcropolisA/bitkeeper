# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2002 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Tests for product rclone.

echo $N Create initial ensemble......................................$NL
nested project
# Now add some stuff
for r in gcc gdb
do
	cd $r
	for i in 1 2 3 4
	do
		echo $i > file$i
		bk new $Q file$i
	done
	bk commit $Q -y"add some files"
	cd ..
done
bk commit $Q -y"Added files to gcc & gdb"
echo OK

echo $N Clone the product using rclone ..............................$NL
cd "$HERE"
PORT=`port 50000`
bk bkd -d -p$PORT -ikill > "$HERE/BKD" 2>&1
bk clone project bk://localhost:$PORT/copy >OUT 2>&1 || {
	echo failed
	cat OUT
	cd copy 
	bk cmdlog -a
	bk _kill bk://localhost:$PORT
	exit 1
}
cd copy || exit 1
bk -Ar check -a >OUT 2>&1 || {
	echo failed
	cat OUT
	bk _kill bk://localhost:$PORT
	exit 1
}
echo OK

echo $N Test that components have no parent pointer..................$NL
cd "$HERE/copy" || exit 1
for r in gcc gdb
do
	cd $r || exit 1
	P=`bk parent -l`
	EP="This repository has no parent."
	test "$P" = "$EP" || {
		echo failed
		echo "expected: $EP"
		echo "got     : $P"
		exit 1
	}
	cd ..
done
echo OK

echo $N Test that rclone on a component fails .......................$NL
cd "$HERE"
bk clone $Q project/gcc bk://localhost:$PORT/mynewgcc 2> ERR && {
	echo failed
	exit 1
}
grep -q "clone of a component is not allowed" ERR || {
	echo wrong msg
	cat ERR
	bk _kill bk://localhost:$PORT
	exit 1
}
echo OK

echo $N Clone partial product using rclone, should be fine ..........$NL
cd "$HERE"
rm -rf copy/gcc
bk clone copy bk://localhost:$PORT/copy2 >OUT 2>&1 || {
	echo failed
	cat OUT
	cd copy 2
	bk cmdlog -a
	bk _kill bk://localhost:$PORT
	exit 1
}
cd copy2 || exit 1
bk -Ar check -a >OUT 2>&1 || {
	echo failed
	cat OUT
	bk _kill bk://localhost:$PORT
	exit 1
}
test -d gdb || exit 1
test -d gcc && exit 1
echo OK

bk _kill bk://localhost:$PORT
exit 0
