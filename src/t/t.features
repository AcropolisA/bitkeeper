echo $N Verify that clone fails with unknown feature ................$NL
commercial project
echo foo > foo
bk delta -i -l -ywhatever $Q foo
echo wizbang >> BitKeeper/log/features
cd ..
bk clone -q project copy 2>ERR && exit 1
bk getmsg -= repo_feature wizbang > WANT
cmpfiles ERR WANT
echo OK

echo $N Verify that a bk editor fails with unknown feature ..........$NL
EDITOR=cat bk editor project/foo 2>ERR && fail -f ERR
cmpfiles ERR WANT
echo OK

echo $N Try to commit changes to repo ...............................$NL
cd project
echo whoopee >> BitKeeper/log/features
bk getmsg -= repo_feature whoopee,wizbang > WANT
echo hi > data
bk new $Q data 2>ERR && fail -f ERR
cmpfiles ERR WANT
echo OK

# key to the bk feature debugging variables:
#  _BK_TESTFEAT
#     Replace BK_FEATURES sent from the bk to the bkd
#     This is the list of all features understood by the local bk.
#     (to be compared with the remove FEATURES file)
#  _BK_TEST_REQUIRED
#     Replaces BK_FEATURES_REQUIRED sent from the bk to the bkd
#     This is the list of features in the local repository's features
#     file.  (to be compared to the remote bk's builtin features)
#  _BKD_*
#     same as above but sent in sendServerInfo() instead of sendEnv()
#     and we revert bk/bkd and local/remote

echo $N Send messages back from bkd .................................$NL
cd "$HERE"
nested nest
bk clone $Q . ../nestcopy
cd ../nestcopy
_BK_TESTFEAT='HORSE' bk pull $Q 2>ERR && fail -f ERR
bk getmsg -= bk_missing_feature SAMv3 > WANT
cmpfiles ERR WANT
_BK_TEST_REQUIRED='HORSE' bk pull $Q 2>ERR && fail -f ERR
bk getmsg -= bkd_missing_feature HORSE > WANT
cmpfiles ERR WANT
echo OK

echo $N Last set of pull commands left no remote read locks .........$NL
cd ../nest
bk lock -ql || fail
echo OK

echo $N Here what bkd has and output message ........................$NL
cd ../nestcopy
_BKD_TESTFEAT='HORSE' bk pull $Q 2>ERR && fail -f ERR
bk getmsg -= bkd_missing_feature SAMv3 > WANT
cmpfiles ERR WANT
_BKD_TEST_REQUIRED='HORSE' bk pull $Q 2>ERR && fail -f ERR
bk getmsg -= bk_missing_feature HORSE > WANT
cmpfiles ERR WANT
echo OK

echo $N Last set of pull commands left remote read locks ............$NL
cd ../nest
bk lock -lq || fail
echo OK

echo $N Test clone with illegal features ............................$NL
cd ..
_BKD_TEST_REQUIRED=HORSE bk clone -q 2>ERR nest junk && fail -f ERR

# the bkd can get a perror(EPIPE) when the client fails to read the SFIO
grep -v 'zputs_hfwrite' ERR > ERR2

bk getmsg -= bk_missing_feature HORSE > WANT
cmpfiles ERR2 WANT
bk lock -lq nest || fail
echo OK

echo $N Test new nested comp does not set sortkey ...................$NL
cd "$HERE/nest"
bk setup -f comp
grep -q sortkey comp/BitKeeper/log/features && fail comp has sortkey
echo OK

echo $N Test BKFILE is set after clone ..............................$NL
cd "$HERE"/project
rm BitKeeper/log/features # cleanup from earlier test
bk admin -B ChangeSet || fail
bk repocheck $Q || fail
bk --config=partial_check:yes clone $Q . ../with-bin || fail
cat <<EOF > WANT
BKFILE
remap
EOF
cmpfiles WANT ../with-bin/BitKeeper/log/features
bk -r admin -Bnone
bk repocheck $Q || fail
bk --config=partial_check:yes clone $Q . ../without-bin || fail
cat <<EOF > WANT
remap
EOF
cmpfiles WANT ../without-bin/BitKeeper/log/features
echo OK

echo $N Test that bk features with none prints nothing ..............$NL
cd "$HERE"
bk clone $Q --compat project compat
cd compat
touch WANT
bk features > GOT
cmpfiles WANT GOT
echo OK
