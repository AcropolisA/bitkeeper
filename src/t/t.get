# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Copyright (c) 1999 Larry McVoy
# %K%

test "$PLATFORM" = "WIN32" && USER=`bk getuser -r`

SAVE=`bk getuser`
commercial project
echo Hallo > date
bk new $Q date

echo $N Check for path in initial checkin ...........................$NL
grep -q '^.cP.*date$' SCCS/s.date
if [ $? -ne 0 ]; then echo No path found.; exit 1; fi
grep -q '^.cPdate$' SCCS/s.date
if [ $? -ne 0 ]; then echo Wrong path found.; exit 1; fi
echo OK
mkdir -p aa/bb/cc/dd
cd aa/bb/cc/dd
echo Hallo > date
bk new $Q date

echo $N Check for path in sub dir1 ..................................$NL
grep -q '^.cP.*date$' SCCS/s.date
if [ $? -ne 0 ]; then echo No path found.; exit 1; fi
grep -q '^.cPaa/bb/cc/dd/date$' SCCS/s.date
if [ $? -ne 0 ]; then echo Wrong path found.; exit 1; fi
echo OK
cd ../../../..
echo Hallo > aa/bb/cc/dd/date2
bk new $Q  aa/bb/cc/dd/date2

echo $N Check for path in sub dir2 ..................................$NL
grep -q '^.cP.*date2$' aa/bb/cc/dd/SCCS/s.date2
if [ $? -ne 0 ]; then echo No path found.; exit 1; fi
grep -q '^.cPaa/bb/cc/dd/date2$' aa/bb/cc/dd/SCCS/s.date2
if [ $? -ne 0 ]; then echo Wrong path found.; exit 1; fi
echo OK
bk co $Q -l date
echo Hi >> date
bk ci $Q -y date
bk co $Q -l date
echo Hi >> date
bk ci $Q -y date

echo $N Make sure -Gname works ......................................$NL
bk get $S -GA -r1.1 date
bk get $S -G B -r1.2 date
if [ ! -f A ]; then echo Failed to creat A.; exit 1; fi
if [ ! -f B ]; then echo Failed to creat B.; exit 1; fi
if writable B; then echo B is writable; exit 1; fi
if [ -f date ]; then echo Created date and it should not have; exit 1; fi
grep -q Hallo A
if [ $? -ne 0 ]; then echo Bad data in A.; exit 1; fi
grep -q HI A
if [ $? -ne 1 ]; then echo Bad data in A.; exit 1; fi
grep -q Hallo B
if [ $? -ne 0 ]; then echo Bad data in B.; exit 1; fi
grep -q Hi B
if [ $? -ne 0 ]; then echo Bad data in B.; exit 1; fi
echo OK
rm -f A B

echo $N Make sure -Ga/b/c/name works ................................$NL
mkdir -p a/b/c
bk get $S -Ga/b/c/A -r1.1 date
bk get $S -G a/b/c/B -r1.2 date
if [ ! -f a/b/c/A ]; then echo Failed to creat a/b/c/A.; exit 1; fi
if [ ! -f a/b/c/B ]; then echo Failed to creat a/b/c/A.; exit 1; fi
if [ -f date ]; then echo Created date and it should not have; exit 1; fi
if [ -f a/b/c/date ]; then echo Created date and it should not have; exit 1; fi
grep -q Hallo a/b/c/A
if [ $? -ne 0 ]; then echo Bad data in a/b/c/A.; exit 1; fi
grep -q HI a/b/c/A
if [ $? -ne 1 ]; then echo Bad data in a/b/c/A.; exit 1; fi
grep -q Hallo a/b/c/B
if [ $? -ne 0 ]; then echo Bad data in a/b/c/B.; exit 1; fi
grep -q Hi a/b/c/B
if [ $? -ne 0 ]; then echo Bad data in a/b/c/B.; exit 1; fi
echo OK
echo $N Check error if get -r with no -p ............................$NL
bk get $Q -r1.1 date 2> ERR
if [ $? -eq 0 ]; then echo Get succeed; exit 1; fi
grep -q "specify revisions without" ERR
if [ $? -ne 0 ]; then echo Wrong error msg; exit 1; fi
echo OK
echo $N Check error if get -i with no -p ............................$NL
bk get $Q -i1.1 date 2> ERR
if [ $? -eq 0 ]; then echo Get succeed; exit 1; fi
grep -q "specify include/exclude without" ERR
if [ $? -ne 0 ]; then echo Wrong error msg; exit 1; fi
echo OK
echo $N Check error if get -x with no -p ............................$NL
bk get $Q -x1.1 date 2> ERR
if [ $? -eq 0 ]; then echo Get succeed; exit 1; fi
grep -q "specify include/exclude without" ERR
if [ $? -ne 0 ]; then echo Wrong error msg; exit 1; fi
echo OK
echo $N Check error if get -i and -x of same revision ...............$NL
bk get $Q -p -i1.1 -x1.1 date 2> ERR
if [ $? -eq 0 ]; then echo Get succeed; exit 1; fi
grep -q "Same revision appears in both lists" ERR
if [ $? -ne 0 ]; then echo Wrong error msg; exit 1; fi
echo OK

echo $N Check paths in file .........................................$NL
grep -q '^.cP.*date$' SCCS/s.date
if [ $? -ne 0 ]; then echo No path found.; exit 1; fi
echo OK

echo $N Check hosts in file .........................................$NL
hostname=bk_regression.bk
grep -q "^.cH.*$hostname/" SCCS/s.date
if [ $? -ne 0 ]; then echo No host found.; exit 1; fi
X=`grep -c "^.cH.*$hostname/" SCCS/s.date`
if [ $X -ne 1 ]; then echo Duplicate hosts.; exit 1; fi
echo OK

echo $N Check zones in file .........................................$NL
zone=`bk zone`
grep -q "^.cZ.*$zone\$" SCCS/s.date
if [ $? -ne 0 ]; then echo No zone found.; exit 1; fi
X=`grep -c "^.cZ.*$zone\$" SCCS/s.date`
if [ $X -ne 1 ]; then echo Duplicate zones; exit 1; fi
echo OK

echo $N Check paths in moved file ...................................$NL
cp SCCS/s.date SCCS/s.moved
bk get $Q -e moved
bk delta $Q -y moved
grep -q '^.cP.*date$' SCCS/s.moved
if [ $? -ne 0 ]; then echo Lost old path.; exit 1; fi
grep -q '^.cP.*moved$' SCCS/s.moved
if [ $? -ne 0 ]; then echo Did not add new path.; exit 1; fi
echo OK

echo $N Make sure get -g does not get file ..........................$NL
bk get $S -g date
if [ -f date ]; then echo Failed, got file.; exit 1; fi
echo OK

echo $N Make sure get -k does not expand keywords ...................$NL
bk get $S -e date
if [ -f core ]; then echo core dumped; exit 1; fi
echo '@A@ @B@ @D@ @E@ @F@ @G@ @H@ @I@ @L@ @M@ @P@ @R@ @S@ @T@ @U@ @W@ @Y@ @Z@ @@@' | sed s/@/%/g | bk undos > date
X=`wc date`
bk ci $Q -y date
bk get $S -k date
if [ -f core ]; then echo core dumped; exit 1; fi
if writable date; then echo date is writable and should not be; exit 1; fi
if [ "$X" != "`wc date`" ]; then echo Failed - wrong size.; exit 1; fi
echo OK

echo $N Make sure get does expand keywords ..........................$NL
bk get $S date
if [ -f core ]; then echo core dumped; exit 1; fi
if writable date; then echo date is writable and should not be; exit 1; fi
if [ "$X" = "`wc date`" ]; then echo Failed - wrong size.; exit 1; fi
echo OK

echo $N RCS keywords should fail w/o -fRCS ..........................$NL
bk get $S -e date
echo '$Id$' > date
bk ci $S -y date
bk get $S date
if writable date; then echo date is writable and should not be; exit 1; fi
if [ '$Id$' != "`cat date`" ]; then echo Failed.; exit 1; fi
echo OK

echo $N RCS keywords should work w/ -fRCS ...........................$NL
bk admin $Q -fRCS date
bk get $S date
if writable date; then echo date is writable and should not be; exit 1; fi
if [ '$Id$' = "`cat date`" ]; then echo Failed.; exit 1; fi
echo OK

echo $N Get -ep should fail .........................................$NL
bk get $S -ep date > junk 2>junk2
if [ -f "SCCS/p.date" ]; then echo failed, created p.file; exit 1; fi
echo OK

echo $N Get -eg should remove readonly gfile ........................$NL
bk get $S -eg date
if [ -f "date" ]; then echo failed, did not remove file; exit 1; fi
if writable date; then echo failed, added writable file; exit 1; fi
bk unlock -p date
echo OK

echo $N Get -er will roll back to rev r .............................$NL
rm -f olddate
bk get $Q -Golddate -k -r1.4 date
bk edit $Q -r1.4 date || exit 1
if ! cmp olddate date; then echo Fail; exit 1; fi
bk delta $Q -y1.4 date || exit 1
if [ "`bk prs -r+ -hnd:DI: date`" != '-6,7' ]; then echo Fail; exit 1; fi
rm -f olddate
bk get $Q -Golddate -k -r1.6 date
bk edit $Q -r1.6 date || exit 1
if ! cmp olddate date; then echo Fail; exit 1; fi
bk delta $Q -y1.6 date || exit 1
if [ "`bk prs -r+ -hnd:DI: date`" != '-8' ]; then echo Fail; exit 1; fi
echo OK

echo $N Make sure get -ab works .....................................$NL
echo HI > T
bk ci $Q -i T
if [ "`bk get $S -pab T`" != "T	HI" ]; then echo Failed.; exit 1; fi
echo OK

echo $N Make sure get -ar works .....................................$NL
if [ "`bk get $S -par T`" != "1.1	HI" ]; then echo Failed.; exit 1; fi
echo OK

echo $N Make sure get -aO works .....................................$NL
name=`bk prs -r+ -hnd:MD5KEY: T`
if [ "`bk get $S -paO T`" != "$name.1	HI" ]; then echo Failed.; exit 1; fi
echo OK

echo $N Make sure get -au works .....................................$NL
if [ "`bk get $S -pau T`" != "bk/$USER	HI" ]; then echo Failed.; exit 1; fi
echo OK

echo $N Make sure get -Ab works .....................................$NL
echo HI > T
chmod -w T
if [ "`bk get $S -pAb T`" != "T     | HI" ]; then echo Failed.; exit 1; fi
echo OK

echo $N Make sure get -Ar works .....................................$NL
if [ "`bk get $S -pAr T`" != "1.1   | HI" ]; then echo Failed.; exit 1; fi
echo OK

echo $N Make sure get -Au works .....................................$NL
test "`bk get $S -pAu T | sed 's/ +/\\s/g'`" != "bk/$USER\s|\sHI" || {
	echo Failed
	bk get $S -pAu T | sed 's/ +/\\s/g'
	exit 1
}
echo OK

echo $N Make sure get does not get ChangeSet ........................$NL
rm -f T
bk clean
bk get -q
test -f ChangeSet && {
	echo should not have gotten ChangeSet
	exit 1
}
bk get -q .
test -f ChangeSet && {
	echo should not have gotten ChangeSet
	exit 1
}
bk clean
echo OK

echo $N Make sure get -e does not get ChangeSet .....................$NL
bk get -qe
test -f ChangeSet && {
	echo should not have gotten ChangeSet
	exit 1
}
bk get -qe .
test -f ChangeSet && {
	echo should not have gotten ChangeSet
	exit 1
}
bk clean
echo OK

echo $N Make sure get ChangeSet does get the ChangeSet file .........$NL
bk get -q ChangeSet
test -f ChangeSet || {
	echo should have gotten ChangeSet
	exit 1
}
bk clean
echo OK

echo $N Make sure get -e ChangeSet does get the ChangeSet file ......$NL
bk get -qe ChangeSet
test -f ChangeSet || {
	echo should have gotten ChangeSet
	exit 1
}
bk clean
echo OK

echo $N Make sure get -S does not reget a read only file ............$NL
bk get $Q moved
sed s/Hi/Bye/ < moved > M
rm -f moved
mv M moved
chmod 0444 moved
bk get -S moved || {
	echo get should not have errored
	exit 1
}
bk get -qkp moved | cmp -s - moved && {
	echo failed
	exit 1
}
echo OK

echo $N Make sure get -S does not reget an edited file ..............$NL
bk get $Q -e moved
sed s/Hi/Bye/ < moved > M
mv M moved
bk get -S moved || {
	echo get should not have errored
	exit 1
}
bk get -qkp moved | cmp -s - moved && {
	echo failed
	exit 1
}
bk unedit moved
echo OK

echo $N Make sure get -S does get an ungotten file ..................$NL
bk get $Q -S moved
test -f moved || {
	echo failed
	exit 1
}
echo OK

if [ $PLATFORM = "WIN32" ]
then #-------------------------------------------------------------

echo $N Make sure get creats gfile with real name ...................$NL
echo "hi" > test.c
bk ci $Q -i test.c
bk edit $Q TEST.C
echo new > test.C
bk delta $Q -ychk_path  test.C
DPN=`bk prs -h -r+ -d:DPN: test.C`
if [ "$DPN" != "test.c" ]; then echo failed; exit 1; fi
echo OK
fi #---------------------------------------------------------------

echo $N Test get with foo.c -Gbar.c .................................$NL
echo foo.c > foo.c
bk new $Q foo.c
bk get $Q foo.c -Gbar.c || {
	echo failed to exit cleanly
	exit 1
}
test -f bar.c || {
	echo failed get bar.c
	exit 1
}
test `cat bar.c` = foo.c || {
	echo incorrect contents
	cat bar.c
	exit 1
}
echo OK

echo $N Test get with -Gsubdir foo.c ................................$NL
mkdir subdir
rm -f bar.c
bk get $Q -Gsubdir foo.c || {
	echo failed to exit cleanly
	exit 1
}
test -f bar.c && {
	echo got bar.c in . not in subdir
	exit 1
}
test -f subdir/foo.c || {
	echo failed get foo.c
	exit 1
}
test `cat subdir/foo.c` = foo.c || {
	echo incorrect contents
	cat subdir/bar.c
	exit 1
}
echo OK

echo $N Test get with -Gsubdir ......................................$NL
bk get $Q -Gsubdir || {
	echo failed to exit cleanly
	exit 1
}
for i in `bk sfiles -g SCCS/s.* | grep -v ChangeSet`
do	test -f subdir/$i || {
		echo failed get $i
		exit 1
	}
done
echo OK


echo $N Test sccs get with foo.c -Gbar.c ............................$NL
mkdir bin
BK="`bk bin`"/bk
SCCS=bin/sccs
test -f "${BK}.exe" && {
	BK="${BK}.exe"
	SCCS=bin/sccs.exe
}
cp "$BK" $SCCS
rm -rf subdir T
./bin/sccs clean
./bin/sccs get $Q foo.c -Gbar.c || {
	echo failed to exit cleanly
	exit 1
}
test -f bar.c || {
	echo failed get bar.c
	exit 1
}
test `cat bar.c` = foo.c || {
	echo incorrect contents
	cat bar.c
	exit 1
}
echo OK

echo $N Test sccs get with -Gsubdir foo.c ...........................$NL
mkdir subdir
rm -f bar.c
./bin/sccs get $Q -Gsubdir foo.c || {
	echo failed to exit cleanly
	exit 1
}
test -f bar.c && {
	echo got bar.c in . not in subdir
	exit 1
}
test -f subdir/foo.c || {
	echo failed get foo.c
	exit 1
}
test `cat subdir/foo.c` = foo.c || {
	echo incorrect contents
	cat subdir/bar.c
	exit 1
}
echo OK

echo $N Test sccs get with -Gsubdir .................................$NL
./bin/sccs get $Q -Gsubdir || {
	echo failed to exit cleanly
	exit 1
}
for i in `./bin/sccs sfiles -g SCCS/s.* | grep -v ChangeSet`
do	test -f subdir/$i || {
		echo failed get $i
		exit 1
	}
done
echo OK
