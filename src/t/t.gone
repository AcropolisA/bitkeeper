# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.


# Copyright (c) 2000 Larry McVoy
# %K%

echo $N Create initial repository ...................................$NL
commercial project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
echo OK

echo $N Create some data, commit it, clone it .......................$NL
echo foo > foo.c
echo bar > bar.c
echo h > h.h
bk ci $Q -i foo.c bar.c h.h
if bk _test ! -f SCCS/s.foo.c; then echo failed to create history; exit 1; fi
bk commit $S -yCset
cd "$HERE"
bk clone $Q project copy
echo OK

echo $N Add some data, commit it, then remove the file ..............$NL
cd "$HERE/project"
bk edit $Q foo.c
echo foo >> foo.c
bk ci $Q -ywhatever foo.c
bk commit $Q -ywhatever
KEY="`bk prs -hr+ -d:ROOTKEY: foo.c`"
bk _rm SCCS/s.foo.c
bk -r check -a 2> ERR && {
	echo should have failed
	exit 1
}
bk -r check -ag > gonestuff && exit 1
echo "$KEY" > wanted
checkfiles gonestuff wanted
grep -q 'Missing file (bk help chk3)' ERR || {
	echo Bad or no error message from check
	cat ERR
	exit 1
}
bk mv -f BitKeeper/etc/gone gone
echo "$KEY" > BitKeeper/etc/gone
bk -r check -a || exit 1
echo OK

echo $N Makepatch with a gfile gone file, should fail ...............$NL
cd "$HERE/project"
bk makepatch $Q -r+ 2> OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

# bkd to test rclone
cd ..
P=`port 50000`
bk bkd -q -p$P -d -ikill > BKD.OUT 2> BKD.ERR
cd project

echo $N Clone to child with gone as a gfile only, should fail .......$NL
bk clone $Q . ../copy-clone 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Lclone to child with gone as a gfile only, should fail ......$NL
bk clone $Q -l . ../copy-lclone 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Rclone to child with gone as a gfile only, should fail ......$NL
bk clone $Q . bk://localhost:$P/copy-rclone 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Push to child with gone as gfile only, should fail ..........$NL
bk push $Q ../copy 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Bkd clone to child with gone as gfile only, should fail .....$NL
cd "$HERE"
bk clone $Q bk://localhost:$P/project copy-bkdclone 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Pull to child with gone as gfile only, should fail ..........$NL
cd "$HERE/copy"
bk pull $Q 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Clone to child with edited gone file, should fail ...........$NL
cd "$HERE/project"
rm -f BitKeeper/etc/gone
bk mv -f gone BitKeeper/etc/gone
bk edit $Q BitKeeper/etc/gone
echo "$KEY" >> BitKeeper/etc/gone
bk -r check -a || exit 1
bk clone $Q . ../copy-clone 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Lclone to child with edited gone file, should fail ..........$NL
bk clone $Q -l . ../copy-lclone 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Rclone to child with edited gone file, should fail ..........$NL
bk clone $Q . bk://localhost:$P/copy-rclone 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Push to child with edited gone file, should fail ............$NL
bk push $Q ../copy 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Bkd clone to child with edited gone file, should fail .......$NL
cd "$HERE"
bk clone $Q bk://localhost:$P/project copy-bkdclone 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Pull to child with edited gone file, should fail ............$NL
cd "$HERE/copy"
bk pull $Q 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Clone to child with pending gone file, should fail ..........$NL
cd "$HERE/project"
bk delta $Q -y"gone the key" BitKeeper/etc/gone
bk -r check -a || exit 1
bk clone $Q . ../copy-clone 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Lclone to child with pending gone file, should fail .........$NL
bk clone $Q -l . ../copy-lclone 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Rclone to child with pending gone file, should fail .........$NL
bk clone $Q . bk://localhost:$P/copy-rclone 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Push to child with pending gone file, should fail ...........$NL
bk push $Q ../copy 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Bkd clone to child with pending gone file, should fail ......$NL
cd "$HERE"
bk clone $Q bk://localhost:$P/project copy-bkdclone 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

echo $N Pull to child with pending gone file, should fail ...........$NL
cd "$HERE/copy"
bk pull $Q 2>OUT && exit 1
grep -q 'must commit local changes to BitKeeper/etc/gone' OUT || {
	cat OUT
	exit 1
}
echo OK

# Done with the bkd
bk _kill bk://localhost:$P

echo $N Commit gone file and try pull again .........................$NL
cd "$HERE/project"
bk commit $Q -ygone
cd "$HERE/copy"
BK_CONFIG=partial_check:off! bk pull -t $Q 2>MSGS || {
	cat MSGS
	find . -type f -print
	exit 1
}
grep -q 'Marked gone (bk help chk1): foo.c' MSGS || {
	echo Bad or no warning message from pull
	cat MSGS
	exit 1
}
echo OK

echo $N Demo pushing new file that replaces a gone\'d file ...........$NL
cd ../project
bk -r check -ac || exit 1
echo old > lose_this
bk new $Q lose_this || exit 1
bk commit $Q -yold || exit 1
cd ../copy
rm SCCS/s.foo.c
bk pull $Q || exit 1
cd ../project
KEY="`bk prs -hr+ -d:ROOTKEY: lose_this`"
rm -f SCCS/s.lose_this
bk gone $Q "$KEY" || exit 1
echo new > lose_this
bk new $Q lose_this || exit 1
bk commit $Q -ynew || exit 1
echo q | bk push ../copy 2>ERR && {
	echo should have failed
	exit 1
}
grep -q "name conflict for ..lose_this" ERR || exit 1
grep -q "pathname is used by an SCCS file that is marked gone" ERR || exit 1
echo OK

echo $N Try pulling the same cset ...................................$NL
cd ../copy
printf "h\nrl\ny\n" | bk pull 2>ERR >OUT || {
	echo should have passed
	cat ERR
	exit 1
}
grep -q "create/sfile marked gone conflict" ERR || {
	echo wrong message
	cat ERR
	exit 1
}
echo OK

echo $N Test goned deltas ...........................................$NL
cd "$HERE/project"
bk edit $Q bar.c || exit 1
echo foo >> bar.c
bk ci $Q -yjj bar.c || exit 1
bk commit $Q -yjj || exit 1
bk stripdel $Q -Cr+ bar.c || exit 1
bk -r check -agg | bk gone $Q -
bk -r check -af || exit 1
bk changes -v -r+ -nd:GFILE:@:REV: > OUT || exit 1
cat <<EOF > WANT
ChangeSet@1.7
EOF
cmpfiles OUT WANT
echo OK

echo $N Create missing delta, gone/comit it, push ...................$NL
commercial project2
# create a bucket brigadge  again2 -> copy2 -> project2
# each start with a file called foo
# again creates a delta record in foo, puts it in a cset, the deletes s.foo
# marks file gone and pushes.  Now copy has foo, but is missing a delta,
# so runs gone to mark delta as gone and pushes
# makepatch fails because the file is there, but nothing in the file
# is available for the patch.  It's a bug in cset.c:sccs_patch
# where the assert(gfile) is getting hit because no deltas are being
# selected.
touch foo
bk new $Q foo
bk commit $Q -yfoo
cd ..
bk clone $Q project2 copy2
bk clone $Q copy2 again2
cd again2
bk edit $Q foo
bk delta $Q -fyfoo foo
bk commit $Q -yfoo
bk _rm SCCS/s.foo
bk -r check -ag | bk gone - 2> ERR
bk commit $Q -ygone
bk push $Q
cd ../copy2
bk -r check -aggg | bk gone - 2> ERR
bk commit $Q -ygone
bk push $Q 2> ERR || {
	echo "failed (bug 2007-03-13-002)"
	cat ERR
	exit 1
}
echo OK

echo $N Demonstrate users pushing deleted goned files ...............$NL
cd "$HERE"
rm -rf project copy1 copy2
commercial project
bk clone $Q . ../copy2 || exit 1
touch foo
bk new $Q foo || exit 1
bk commit $Q -yadd || exit 1
cd ..
bk clone $Q project copy1 || exit 1
cd copy1
KEY=`bk prs -r1.0 -hnd:KEY: foo`
bk rm  foo || exit 1
bk commit $Q -yrm || exit 1
#bk push $Q || exit 1
SFILE=`bk sfiles BitKeeper/deleted`
rm -rf BitKeeper/deleted
bk _rm -f "$SFILE"
bk gone $Q "$KEY" || exit 1
bk commit $Q -ygone || exit 1
bk push $Q || exit 1
cd ../copy2
# without this cset the following pull will error like this:
# cset: cannot find
#	ROOTKEY
#	SCCS/s.foo
# File named by key
#	CSETKEY
#	is missing and key is not in a committed gone delta, aborting.
#adler32 aborting
#cmd_pull_part2: makepatch failed; status = 1
#----------------------------------------------------------------------------
#ChangeSet: 3 deltas
#BitKeeper/etc/gone takepatch.c:1962: fnext: No such file or directory
#
#=================================== ERROR ====================================
#takepatch: missing checksum line in patch, aborting.
#==============================================================================
#
bk pull -q 2>ERR || exit 1
cat <<EOF > WANT
Marked gone (bk help chk1): foo
EOF
checkfiles ERR WANT
echo OK

## OUTSOURCING test

echo $N Create initial repository for outsourcing ...................$NL
cd "$HERE"
rm -fr project staging contractor
commercial project
mkdir secret public
for i in A B C D E F G
do	echo $i > secret/$i
	echo $i > public/$i
done
bk -xr new $Q
bk commit $Q -ysetup
echo OK

echo $N Set up staging tree .........................................$NL
BK_GONE=BitKeeper/etc/gone-outsource
export BK_GONE
cd "$HERE"
bk clone $Q project staging || exit 1
cd staging
sfilelist=`bk sfiles secret`
bk _rm $sfilelist
rm -rf secret
bk -r check -ag | bk gone $Q -
bk get $Q -S $BK_GONE
test -f $BK_GONE || {
	echo failed to create $BK_GONE
	exit 1
}
# bk new $Q BitKeeper/etc/gone-outsource
bk commit $Q -yOutsource
echo OK

echo $N Test contractor clone and commit ............................$NL
cd "$HERE"
bk clone $Q staging contractor
cd contractor/public
bk edit $Q
for i in ?
do	echo nice cheap outsource >> $i
done
bk -cr ci $Q -y'Nothing but the highest quality here'
bk commit $Q -y'Contractors-R-Us goodness'
echo OK

echo $N Test push to staging ........................................$NL
bk push $Q || exit 1
echo OK

echo $N Test push to main ...........................................$NL
cd "$HERE/staging"
bk push $Q || exit 1
echo OK

echo $N Make a cset in the full tree ................................$NL
(
BK_GONE=
export BK_GONE
cd "$HERE/project/secret"
bk edit $Q
for i in ?
do	echo Buy American >> $i
done
bk -cr ci $Q -y'I got yer quality right here, Buddy'
bk commit $Q -y"Proud to be an 'Merican"
)
echo OK

echo $N Push to staging .............................................$NL
cd "$HERE/project"
# This only works because it is a file system push
# The remote side needs BK_GONE_OK
BK_GONE_OK=1 bk push $Q "$HERE/staging" || exit 1
echo OK

echo $N Pull from staging to contractor .............................$NL
cd "$HERE/contractor"
bk pull $Q || exit 1
echo OK
