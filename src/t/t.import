# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Copyright (c) 1999 Andrew Chang
# %K%

echo $N Test import of a plain file .................................$NL
no_logging project
cd $HERE
mkdir -p import_dir/src
echo foo > X
bk undos X > import_dir/src/foo.c
rm -f X
touch import_dir/src/boo.c
trap 'echo some command failed to exit 0; cat $HERE/import.out' 0
set -e
( echo plain; echo no ) | bk import import_dir project > import.out 2>&1
cd $HERE/project/src
[ -f SCCS/s.foo.c ]
bk get $Q foo.c
cmp -s foo.c $HERE/import_dir/src/foo.c
[ -f SCCS/s.boo.c ]
bk get $Q boo.c
cmp -s boo.c $HERE/import_dir/src/boo.c
echo OK
# XXX - we do not test for links pointing outside the tree
if [ $PLATFORM != "WIN32" ]
then
#----------------------------------------------------
echo $N Test import of a symbolic link ..............................$NL
cd $HERE
no_logging symlink
cd $HERE
mkdir -p symlink/src
echo foo > import_dir/src/foo.c
touch import_dir/src/boo.c
cd import_dir/src
ln -s foo.c link
cd $HERE
trap 'echo some command failed to exit 0; cat $HERE/import.out' 0
set -e
( echo plain; echo no ) | bk import import_dir symlink > import.out 2>&1
cd $HERE/symlink/src
test -f SCCS/s.foo.c
bk get $Q foo.c
cmp -s foo.c $HERE/import_dir/src/foo.c
test -f SCCS/s.boo.c
bk get $Q boo.c
cmp -s boo.c $HERE/import_dir/src/boo.c
test -f SCCS/s.link
bk get $Q link
cmp -s link $HERE/import_dir/src/foo.c
echo OK
echo $N Test import of a patch file .................................$NL
cd $HERE
mkdir -p import_new/src
echo "foo-new" > X
bk undos X >  $HERE/import_new/src/foo.c
diff -Nru import_dir import_new > test_patch || : # legitimately exits 1
( echo patch; echo no ) | bk import test_patch project > import.out 2>&1
cd $HERE/project/src
bk get $Q foo.c
diff -u foo.c $HERE/import_new/src/foo.c
cmp -s foo.c $HERE/import_new/src/foo.c
U=`bk prs -r+ -h -d:P: foo.c`
if [ X$U != Xpatch -a X$U != Xbk ] 
then
	echo "failed: bad user: $U"
	exit 1
fi
echo OK
cd $HERE
echo $N Test import of a patch file which deletes a file ............$NL
cd $HERE/project
bk export ../export
cd ..
cp -rp export export2
rm export2/src/foo.c
diff -Nru export export2 > test_patch || : # legitimately exits 1
( echo patch; echo no ) | bk import test_patch project > import.out 2>&1
cd project
if [ -f src/SCCS/s.foo ]
then	echo Failed to remove file
	exit 1
fi
ls BitKeeper/deleted/SCCS | grep -q "^s..del-foo.c" 
if [ $? -ne 0 ]
then	echo Can not find deleted file
	exit 1
fi
echo OK
#----------------------------------------------------
fi	# Win32
echo $N Test import of an sccs file .................................$NL
cd $HERE
mkdir -p import_sccs/src
cd $HERE/import_sccs/src
echo bar > bar.c
bk ci $Q -i -l bar.c
echo "bar-new" > bar.c
bk ci $Q -y bar.c
cd $HERE
( echo SCCS; echo no ) | bk import import_sccs project  > import.out 2>&1
cd $HERE/project/src
bk get $Q bar.c $HERE/import_sccs/src/bar.c
cmp -s bar.c $HERE/import_sccs/src/bar.c
echo OK
if [ $PLATFORM != "WIN32" ]
then #----------------------------------------------------------------
echo $N Test import of an sccs file with meta char in file name .....$NL
cd $HERE
mkdir -p import_sccs2/src
cd $HERE/import_sccs2/src
echo star > '*.c'
bk ci $Q -i -l '*.c'
echo "bar-new" > '*.c'
bk ci $Q -y '*.c'
cd $HERE
( echo SCCS; echo no ) | bk import import_sccs2 project  > import.out 2>&1
cd $HERE/project/src
bk get $Q '*.c' $HERE/import_sccs2/src/'*.c'
cmp -s '*.c' $HERE/import_sccs2/src/'*.c'
echo OK
fi   #----------------------------------------------------------------
set +e
trap '' 0

cd $HERE
rm -rf project A B
echo $N Create initial repository ...................................$NL
echo "logging: logging@openlogging.org" > $HERE/c
echo "logging_ok: a@b" >> $HERE/c
echo "logging_ok: b@b" >> $HERE/c
echo "logging_ok: c@b" >> $HERE/c
echo "logging_ok: d@b" >> $HERE/c
echo "description: BitKeeper Test repository" >> $HERE/c
echo "email:		nobody@nowhere.bk" >> $HERE/c
bk setup -f -c$HERE/c project
cd project 
touch BitKeeper/etc/SCCS/x.marked
ls > LS
bk new $Q LS
bk _loggingaccepted
bk commit $Q -ywhatever 
echo OK

echo $N Import a patch which deletes the logging_ok file ............$NL
bk export -x $HERE/A
bk export -x $HERE/B
cd $HERE
rm B/BitKeeper/etc/logging_ok
diff -Nur A B > P
rm -rf SAVE
cp -rp project SAVE
echo no | bk import $Q -tpatch P project > OUT 2>&1
grep -q 'Bitkeeper is aborting this commit' OUT || {
	echo failed to produce error message
	cat OUT
	exit 1
}
cd $HERE
echo yes | bk import -tpatch P SAVE > OUT 2>&1
grep -q 'Creating changeset for P' OUT || {
	echo failed to produce OK message
	cat OUT
	exit 1
}
cd SAVE/BitKeeper
test -f etc/SCCS/s.logging_ok || {
	echo failed to preserve logging ok file
	exit 1
}
echo OK

test -d /home/bk/tmp/import_data && {
echo $N Multiple parallel imports ...................................$NL
cd $HERE
no_logging import
cd ..
LIST="1 2 3 4 5 6"
for i in $LIST
do	cp -rp import import$i
done
mv import import0
for i in 0 $LIST
do	( cd import$i && bk import -tplain -f $Q /home/bk/tmp/import_data . ) &
done; wait
cd import0
bk sfiles | sort > ../LIST
cd ..
for i in $LIST
do	cd import$i
	bk sfiles | sort > ../MINE
	cmp -s ../LIST ../MINE || {
		echo different lists of files in import$i
		diff ../LIST ../MINE
		exit 1
	}
	cd ..
done
echo OK
}
exit 0
