# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Copyright (c) 1999 Andrew Chang
# %K%

echo $N Test import of a plain file .................................$NL
no_logging project
cd $HERE
mkdir -p import_dir/src
echo foo > X
bk undos X > import_dir/src/foo.c
rm -f X
touch import_dir/src/boo.c
( echo plain; echo no ) | bk import import_dir project > import.out 2>&1 || {
	echo Failed
	cat $HERE/import.out
	exit 1
}
cd $HERE/project/src
test -f SCCS/s.foo.c || exit 1
bk get $Q foo.c
cmp -s foo.c $HERE/import_dir/src/foo.c
test -f SCCS/s.boo.c || exit 1
bk get $Q boo.c
cmp boo.c $HERE/import_dir/src/boo.c || exit 1
echo OK

echo $N Test import of a patch into a tree with edited BK files .....$NL
cd $HERE
no_logging EDIT
cat > foo <<EOF
A
B
C
D
EOF
cat > bar <<EOF
A
B
C
D
EOF
bk new $Q foo bar
bk commit $Q -ywhatever foo
cd $HERE
tar cf TAR EDIT
cd EDIT
bk edit $Q foo bar
cat >> foo <<EOF
E
F
G
EOF
bk diffs -u > BitKeeper/tmp/P
bk unedit $Q foo
bk edit $Q foo
bk import $Q -tpatch BitKeeper/tmp/P . || exit 1
echo OK

echo $N Test import of a patch into a tree with modified BK files ...$NL
cd $HERE
rm -rf EDIT
tar xf TAR
cd EDIT
bk edit $Q foo bar
cat >> foo <<EOF
E
F
G
EOF
bk diffs -u > BitKeeper/tmp/P
bk unedit $Q foo
bk edit $Q foo
echo hi mom >> foo
cp foo BitKeeper/tmp
bk import -tpatch BitKeeper/tmp/P . > BitKeeper/tmp/PLOG 2>&1 && {
	echo Patch should have failed because the file was modified
	cat BitKeeper/tmp/PLOG
	exit 1
}
grep -q 'File foo seems to be modified already' BitKeeper/tmp/PLOG || {
	echo Failed to flag that foo was modified
	cat BitKeeper/tmp/PLOG
	exit 1
}
test -w foo || {
	echo Failed to leave foo writeable
	exit 1
}
cmp -s foo BitKeeper/tmp/foo || {
	echo failed to leave foo contents
	diff foo BitKeeper/tmp/foo
	echo PATCH
	cat BitKeeper/tmp/PLOG
	exit 1
}
echo OK

echo $N Make sure a patch creating a file does not overwrite ........$NL
cd $HERE/EDIT
mkdir a b
echo 'I am the patch file being imported.' > a/extra
diff -Nur a b > BitKeeper/tmp/P
rm -rf a b
echo hi mom > extra
cp extra BitKeeper/tmp
bk import -tpatch BitKeeper/tmp/P . > BitKeeper/tmp/PLOG 2>&1 && {
	echo Patch should have failed because the file exists
	cat BitKeeper/tmp/PLOG
	exit 1
}
grep -q 'File extra is not under BitKeeper control' BitKeeper/tmp/PLOG || {
	echo Failed to flag that extra is not a BK file
	cat BitKeeper/tmp/PLOG
	exit 1
}
test -w extra || {
	echo Failed to leave extra writeable
	exit 1
}
cmp -s extra BitKeeper/tmp/extra || {
	echo failed to leave extra contents
	diff extra BitKeeper/tmp/extra
	echo PATCH
	cat BitKeeper/tmp/PLOG
	exit 1
}
echo OK

echo $N Test import of an email patch ...............................$NL
cd $HERE
rm -rf EDIT
tar xf TAR
cd EDIT/BitKeeper/etc
bk edit $Q config
echo "license: $BK_LIC_P" > config
echo "licsign1: $BK_LIC_P1" >> config
echo "licsign2: $BK_LIC_P2" >> config
echo "licsign3: $BK_LIC_P3" >> config
echo "logging: none" >> config
echo "logging_ask: no" >> config
bk delta $Q -yprivate
bk commit $Q -yprivate
bk multiuser >/dev/null 2>&1
cd $HERE/EDIT
bk edit $Q foo bar
cat >> foo <<EOF
E
F
G
EOF
bk diffs -hu > BitKeeper/tmp/P
bk unedit foo
cat > BitKeeper/tmp/E <<EOF
From akushner@bitmover.com  Fri May 25 13:48:55 2001
Delivery-Date: Fri May 25 10:23:31 2001
Return-Path: <akushner@bitmover.com>
Received: from adsl-63-193-121-233.dsl.snfc21.pacbell.net (adsl-63-193-121-233.dsl.snfc21.pacbell.net [63.193.121.233])
        by bitmover.com (8.8.7/8.8.7) with ESMTP id KAA01840
        for <lm@bitmover.com>; Fri, 25 May 2001 10:18:34 -0700
Received: from localhost (localhost [127.0.0.1])
        by adsl-63-193-121-233.dsl.snfc21.pacbell.net (Postfix) with ESMTP id EA417400E
        for <lm@bitmover.com>; Fri, 25 May 2001 10:18:34 -0700 (PDT)
Date: Fri, 25 May 2001 10:18:34 -0700 (PDT)
From: Aaron Kushner <akushner@bitmover.com>
X-X-Sender:  <akushner@vermin.dsl.snfc21.pacbell.net>
To: Larry McVoy <lm@bitmover.com>
Subject: citool cursor fix
Message-ID: <Pine.LNX.4.33.0105251015230.3751-100004@vermin.dsl.snfc21.pacbell.net>
MIME-Version: 1.0

Comment line 1
Comment line 2
Comment line 3
Comment line 4
EOF
cat BitKeeper/tmp/P >> BitKeeper/tmp/E
bk import -temail < BitKeeper/tmp/E > BitKeeper/tmp/PLOG 2>&1 || {
	echo import failed
	cat BitKeeper/tmp/PLOG
	exit 1
}
bk get $Q foo
grep -q G foo || {
	echo failed to apply patch
	exit 1
}
U=`bk getuser`
test "`bk prs -hr+ -nd:P:@:HOST: foo`" = akushner@bitmover.com\[$U\] || {
	echo did not pick up email address
	bk prs -nd:P:@:HOST: foo
	exit 1
}
bk changes -r+ > C
grep -q 'citool cursor fix' C || {
	echo Did not pick up subject line
	cat C
	exit 1
}
for i in 1 2 3 4
do	grep -q "Comment line $i" C || {
		echo did not pick up line $i
		cat C
		exit 1
	}
done
echo OK

# XXX - we do not test for links pointing outside the tree
if [ $PLATFORM != "WIN32" ]
then
#----------------------------------------------------
echo $N Test import of a symbolic link ..............................$NL
cd $HERE
no_logging symlink
cd $HERE
mkdir -p symlink/src
echo foo > import_dir/src/foo.c
touch import_dir/src/boo.c
cd import_dir/src
ln -s foo.c link
cd $HERE
trap 'echo some command failed to exit 0; cat $HERE/import.out' 0
set -e
( echo plain; echo no ) | bk import import_dir symlink > import.out 2>&1
cd $HERE/symlink/src
test -f SCCS/s.foo.c
bk get $Q foo.c
cmp -s foo.c $HERE/import_dir/src/foo.c
test -f SCCS/s.boo.c
bk get $Q boo.c
cmp -s boo.c $HERE/import_dir/src/boo.c
test -f SCCS/s.link
bk get $Q link
cmp -s link $HERE/import_dir/src/foo.c
echo OK

echo $N Test import of a patch which modifies a file ................$NL
cd $HERE
mkdir -p import_new/src
echo "foo-new" > X
bk undos X >  $HERE/import_new/src/foo.c
rm import_dir/src/link
diff -Nru import_dir import_new > test_patch || : # legitimately exits 1
( echo patch; echo no ) | bk import test_patch project > import.out 2>&1
cd $HERE/project/src
bk get $Q foo.c
diff -u foo.c $HERE/import_new/src/foo.c
cmp -s foo.c $HERE/import_new/src/foo.c
U=`bk prs -r+ -h -d:P: foo.c`
if [ X$U != Xpatch -a X$U != Xbk ] 
then
	echo "failed: bad user: $U"
	exit 1
fi
echo OK

echo $N Test import of a patch file which deletes a file ............$NL
cd $HERE/project
bk export ../export
cd ..
cp -rp export export2
rm export2/src/foo.c
diff -Nru export export2 > test_patch || : # legitimately exits 1
( echo patch; echo no ) | bk import test_patch project > import.out 2>&1
cd project
if [ -f src/SCCS/s.foo ]
then	echo Failed to remove file
	exit 1
fi
ls BitKeeper/deleted/SCCS | grep -q "^s..del-foo.c" 
if [ $? -ne 0 ]
then	echo Can not find deleted file
	exit 1
fi
echo OK

#----------------------------------------------------
fi	# Win32

echo $N Verify checkout:get with plain import .......................$NL
cd $HERE
no_logging projc
bk edit $Q BitKeeper/etc/config
echo checkout:get >> BitKeeper/etc/config
cd $HERE
mkdir -p import1/src
echo foo > import1/src/foo.c
bk import -tplain $Q -f import1 projc || exit 1
test -f projc/src/foo.c || exit 1
echo OK

echo $N Verify checkout:get with patch import .......................$NL
cd $HERE
cp -rp import1 import2
echo bar >> import2/src/foo.c
echo baz > import2/src/baz.c
diff -Nur import1 import2 > patch || : # legitimately exits 1
bk clean $Q projc/src/foo.c || exit 1
bk import -tpatch $Q -f patch projc || exit 1
test -f projc/src/foo.c || exit 1
test -f projc/src/baz.c || exit 1
rm -rf import1 import2 projc
echo OK

echo $N Test import of an sccs file .................................$NL
cd $HERE
mkdir -p import_sccs/src
cd $HERE/import_sccs/src
echo bar > bar.c
bk ci $Q -i -l bar.c
echo "bar-new" > bar.c
bk ci $Q -y bar.c
cd $HERE/project
bk edit $Q BitKeeper/etc/config
echo checkout:get >> BitKeeper/etc/config
cd $HERE
( echo SCCS; echo no ) | bk import import_sccs project  > import.out 2>&1
cd $HERE/project/src
test -f bar.c || exit 1
bk get $Q bar.c $HERE/import_sccs/src/bar.c
bk undos bar.c > X
bk undos $HERE/import_sccs/src/bar.c > Y
cmp -s X Y
echo OK

if [ $PLATFORM != "WIN32" ]
then #----------------------------------------------------------------
echo $N Test import of an sccs file with meta char in file name .....$NL
cd $HERE
mkdir -p import_sccs2/src
cd $HERE/import_sccs2/src
echo star > '*.c'
bk ci $Q -i -l '*.c'
echo "bar-new" > '*.c'
bk ci $Q -y '*.c'
cd $HERE
( echo SCCS; echo no ) | bk import import_sccs2 project  > import.out 2>&1
cd $HERE/project/src
bk get $Q '*.c' $HERE/import_sccs2/src/'*.c'
cmp -s '*.c' $HERE/import_sccs2/src/'*.c'
echo OK

fi   #----------------------------------------------------------------
set +e
trap '' 0

cd $HERE
rm -rf project A B
echo $N Create initial repository ...................................$NL
echo "logging: logging@openlogging.org" > $HERE/c
echo "logging_ok: a@b" >> $HERE/c
echo "logging_ok: b@b" >> $HERE/c
echo "logging_ok: c@b" >> $HERE/c
echo "logging_ok: d@b" >> $HERE/c
echo "description: BitKeeper Test repository" >> $HERE/c
echo "email:		nobody@nowhere.bk" >> $HERE/c
bk setup -f -c$HERE/c project
cd project 
touch BitKeeper/etc/SCCS/x.marked
ls > LS
bk new $Q LS
bk _loggingaccepted
bk commit $Q -ywhatever 
echo OK


echo $N Import a patch which deletes the logging_ok file ............$NL
bk export -S $HERE/A
bk export -S $HERE/B
cd $HERE
rm B/BitKeeper/etc/logging_ok
diff -Nur A B > P
rm -rf SAVE
cp -rp project SAVE
echo no | bk import $Q -tpatch P project > OUT 2>&1
grep -q 'Bitkeeper is aborting this commit' OUT || {
	echo failed to produce error message
	cat OUT
	exit 1
}
cd $HERE
echo yes | bk import -tpatch P SAVE > OUT 2>&1
grep -q 'Creating changeset for P' OUT || {
	echo failed to produce OK message
	cat OUT
	exit 1
}
cd SAVE/BitKeeper
test -f etc/SCCS/s.logging_ok || {
	echo failed to preserve logging ok file
	exit 1
}
echo OK

echo $N Import a patch into a tree with versioned .rej files ........$NL
cd $HERE
no_logging rej
ls > foo.rej
cat > data <<EOF
A
B
C
D
EOF
bk new $Q foo.rej data
bk commit $Q -ywah
cat > $HERE/patch <<EOF
diff -Nru a/data b/data
--- a/data   Sun Mar  3 21:37:06 2002
+++ b/data   Sun Mar  3 21:37:17 2002
@@ -1,4 +1,4 @@
 A
 B
-C
+XYZ
 D
EOF
bk import -tpatch $HERE/patch . < /dev/null > $HERE/OUT 2>&1
bk cat data | grep -q XYZ || {
	echo failed to apply patch
	cat $HERE/OUT
	exit 1
}
echo OK

echo $N Make sure that patch rejects are still caught ...............$NL
cat > $HERE/patch <<EOF
diff -Nru a/data b/data
--- a/data   Sun Mar  3 21:37:06 2002
+++ b/data   Sun Mar  3 21:37:17 2002
@@ -1,4 +1,4 @@
 A
 B
-C
+This should fail!
 D
EOF
bk import -R -tpatch $HERE/patch . < /dev/null > $HERE/OUT 2>&1 && {
	echo failed to exit with an error
	cat $HERE/OUT
	exit 1
}
bk cat data | grep -q 'This should fail!' && {
	echo failed to reject patch
	cat $HERE/OUT
	exit 1
}
echo OK

echo $N Catch read only destinations ................................$NL
bk setup -f -c$HERE/c $HERE/dest
chmod 555 $HERE/dest
mkdir $HERE/data
cd $HERE/data
for i in 1 2 3 4 5 6
do	echo hi mom > data$i
done
bk import -tplain $HERE/data $HERE/dest >OUT 2>&1 && {
	echo failed to exit with an error
	cat OUT
	exit 1
}
grep -q 'not writable' OUT || {
	echo failed to warn about write permission
	cat OUT
	exit 1
}
chmod 777 $HERE/dest
echo OK

TESTDATA=/home/bk/test_data

test -d $TESTDATA/lmbench && {
echo $N Make sure that traditional RCS imports works ................$NL
cd $HERE
no_logging import-lmbench
bk import $Q -ftRCS $TESTDATA/lmbench . || exit 1
test -f results/SCCS/s.Makefile || exit 1
echo OK
}

test -d $TESTDATA/import-RCS+x && {
echo $N Make import w/ undos does not lose execute bits .............$NL
cd $HERE
no_logging import-RCS+x
bk import -quftRCS $TESTDATA/import-RCS+x .
bk get -q 
test -x ixadm.cgi || {
	echo lost execute bits on ixadm.cgi
	exit 1
}
test -x ixupdate.pl || {
	echo lost execute bits on ixupdate.pl
	exit 1
}
echo OK

echo $N Make sure RCS/CVS imports set RCS flag ......................$NL
bk flags ixupdate.pl > F
grep -q RCS F || {
	echo bad flags
	cat F
	exit 1
}
echo OK
}

test -d $TESTDATA/import-CVS.1 && {

echo $N Make sure that import -A imports Attic files ................$NL
cd $HERE
no_logging import-CVS.1
bk import -AquftCVS $TESTDATA/import-CVS.1 .
bk get -q
test -f pkginfo || {
	echo failed to get pkginfo from the Attic
	exit 1
}
test -f COPYING || {
	echo failed to import COPYING
	exit 1
}
grep -q 'GNU General Public License' COPYING && {
	echo the Attic one overwrote the existing one
	cat COPYING
	exit 1
}
echo OK

echo $N Make sure that import -tCVS works with checkout:get .........$NL
cd $HERE
rm -rf import-CVS.1
no_logging import-CVS.1
bk edit $Q BitKeeper/etc/config
echo checkout:get >> BitKeeper/etc/config
bk import -AquftCVS $TESTDATA/import-CVS.1 .
test -f COPYING || {
	echo failed to get COPYING after import
	exit 1
}
echo OK

}

test -d $TESTDATA/import_data && {
echo $N Multiple parallel imports ...................................$NL
cd $HERE
no_logging import
cd ..
LIST="1 2 3 4 5 6"
for i in $LIST
do	cp -rp import import$i
done
mv import import0
for i in 0 $LIST
do	( cd import$i && bk import -tplain -f $Q $TESTDATA/import_data . ) &
done; wait
cd import0
bk sfiles | sort > ../LIST
cd ..
for i in $LIST
do	cd import$i
	bk sfiles | sort > ../MINE
	cmp -s ../LIST ../MINE || {
		echo different lists of files in import$i
		diff ../LIST ../MINE
		exit 1
	}
	cd ..
done
echo OK
}
exit 0
