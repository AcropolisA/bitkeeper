# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

if [ "$PLATFORM" = "WIN32" ]
then
	echo "bk lclone is not supportted on win32: skipped"
	exit 0
fi

# Tests for pull, push, and clone.
echo $N Create initial repository ...................................$NL
no_logging project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -f SCCS/s.ChangeSet ]; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
mkdir src
cd src
echo foo > 'F!O#O$ B%A^R&RR(R)RR'
echo bar > bar.c
echo h > h.h
bk ci $Q -i 'F!O#O$ B%A^R&RR(R)RR' bar.c h.h
if [ ! -f SCCS/s.'F!O#O$ B%A^R&RR(R)RR' ]; then echo failed to create history; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 15 ]; then echo wrong pending result $P; bk pending; exit 1; fi
bk commit $S -a -yCset
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo failed to clear pending list; bk pending; exit 1; fi
echo OK
cores

echo $N Clone repository ............................................$NL
mkdir -p $HERE/tst
cd $HERE/tst
bk clone -l $Q $HERE/project || { echo failed; exit 1; }
[ -f $HERE/tst/project/src/SCCS/s.'F!O#O$ B%A^R&RR(R)RR' ] || \
							{ echo failed; exit 1; }
cd $HERE
bk clone -l $Q $HERE/project $HERE/copy || { echo failed; exit 1; }
[ -f copy/src/SCCS/s.'F!O#O$ B%A^R&RR(R)RR' ] || { echo failed; exit 1; }
[ -f copy/BitKeeper/log/parent ] || { echo no parent; exit 1; }
parent=`cat copy/BitKeeper/log/parent`
host=`bk gethost`
[ x$parent = xfile:/$HERE/project ] || \
					{ echo wrong parent $parent; exit 1; }
cd $HERE/project; checkLocks; cd $HERE/copy; checkLocks
echo OK

echo $N Clone a nested repository ...................................$NL
cd $HERE/project/src
bk clone -l $Q $HERE/project sub_proj
if [ ! -d $HERE/project/src/sub_proj ]; then echo failed; exit 1; fi
cd $HERE/project; checkLocks; cd $HERE/project/src/sub_proj; checkLocks
echo OK

echo $N Check that checkout:get works ...............................$NL
cd $HERE/project/BitKeeper/etc
bk edit $Q config
echo "checkout:get" >> config
bk delta $Q -ycheckout config
bk commit $Q -ycheckout
cd $HERE
bk clone $Q -l project checkout
test -f checkout/src/'F!O#O$ B%A^R&RR(R)RR' || {
	echo failed to check out user file in src
	exit 1
}
echo OK

echo $N Check that post-clone trigger works .........................$NL
cd $HERE/project/BitKeeper
test -d triggers || mkdir triggers
cd triggers
cat > post-outgoing <<EOF
#!/bin/sh

echo hi mom > $HERE/post-outgoing
EOF
chmod +x post-outgoing
cd $HERE
rm -f $HERE/post-outgoing
bk clone $Q -l project trigger
test -f $HERE/post-outgoing || {
	echo failed to run trigger
	exit 1
}
echo OK

echo $N Check that clone -l -r works ................................$NL
bk clone $Q -l -r1.1 $HERE/project $HERE/undo
cd $HERE/undo || exit 1
REV=`bk prs -hr+ -d:I: ChangeSet`
test X$REV = X1.1 || {
	echo failed to roll backwards
	exit 1
}
echo OK

echo $N Check that x.files are picked up ............................$NL
echo foo > $HERE/project/BitKeeper/etc/SCCS/x.dummy
bk clone $Q -l $HERE/project $HERE/markers
test -f $HERE/markers/BitKeeper/etc/SCCS/x.dummy || {
	echo failed to pick up file
	exit 1
}
echo OK

echo $N Check the s.file updates break links ........................$NL
# I wish we could use 'test file1 -ef file2' to verify that the
# files are really linked and unlinked, but that is not portable.
cd $HERE
h1=project/src/SCCS/s.h.h
h2=markers/src/SCCS/s.h.h
h3=trigger/src/SCCS/s.h.h
cmp -s $h1 $h2 || exit 1
cmp -s $h2 $h3 || exit 1
cd project
bk admin -Zgzip src/h.h
cd $HERE
cmp -s $h1 $h2 && { 
	echo failed to break link
	exit 1
}
cmp $h2 $h3 || exit 1
echo OK
