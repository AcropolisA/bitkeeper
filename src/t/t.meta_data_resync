# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Copyright (c) 1999 Andrew Chang
# %K%

echo $N Create initial repository ...................................$NL
HERE=`${CWD}`
${ECHO} "logging: none" > $HERE/c
bk setup -f -n'BitKeeper Test repository' -c$HERE/c project
if [ ! -d project ]; then echo failed to make top level directory; exit 1; fi
cd project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -f SCCS/s.ChangeSet ]; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
echo OK
echo $N Create some data ............................................$NL
mkdir src
cd src
echo foo > foo.c
echo bar > bar.c
echo h > h.h
bk ci $Q -i foo.c bar.c h.h
if [ ! -f SCCS/s.foo.c ]; then echo failed to create history; exit 1; fi
echo OK
echo $N Check pending ...............................................$NL
P=`bk pending | wc -l`
if [ $P -ne 18 ]; then echo wrong pending result $P; bk pending; exit 1; fi
echo OK
echo $N Create a change set .........................................$NL
bk commit $S -f -yCset
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo failed to clear pending list; bk pending; exit 1; fi
echo OK
cores
echo $N Create a copy of the project ................................$NL
cd $HERE
bk resync $Q project copy
if [ ! -d copy ]; then echo failed to make top level directory; exit 1; fi
cd copy
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -f SCCS/s.ChangeSet ]; then echo failed to make ChangeSet; exit 1; fi
echo OK
echo $N Check propagation of permission .............................$NL
cd $HERE/project/src
bk admin -m-rwx------ foo.c
bk commit $S -yperm1
bk resync $Q $HERE/project $HERE/copy
bk resolve -t $Q $HERE/copy
cd $HERE/copy/src
diff $HERE/project/src/SCCS/s.foo.c  $HERE/copy/src/SCCS/s.foo.c
if [ $? -ne 0 ]; then echo failed to propagate permissions; exit 1; fi
echo OK
echo $N Check permission conflict ...................................$NL
cd $HERE/project/src
bk admin -m-rwxr----- foo.c
bk commit $S -yperm2
cd $HERE/copy/src
bk admin -m-rwx-w---- foo.c
bk commit $S -yperm3
bk resync $Q $HERE/project $HERE/copy
bk resolve -t $Q $HERE/copy 2>/dev/null 1>&2 <<EOF
r
u
EOF
MODE=`bk prs -h -r1.4 -d":MODE:" foo.c`
if [ "$MODE" != "100740" ]
then	echo failed with mode $MODE
	bk prs -h -d':REV: :MODE:' foo.c
	exit 1
fi
echo OK
echo $N Check propagation of symbol .................................$NL
cd $HERE/project/src
bk admin $Q -SBASE_LINE:1.1 bar.c
P=`bk pending | wc -l`
if [ $P -eq 0 ]; then echo "failed (Known bug)"; else echo OK; fi
echo $N Check propagation of flags ..................................$NL
cd $HERE
${RM} -rf $HERE/copy
bk clone $Q $HERE/project $HERE/copy
cd $HERE/project/src
bk admin $Q -fEXPAND1 -fRCS -fYEAR4 bar.c
bk commit $Q -yabc
bk resync $Q $HERE/project $HERE/copy
bk resolve -t $Q $HERE/copy
cd $HERE/copy/src
diff $HERE/project/src/SCCS/s.bar.c  $HERE/copy/src/SCCS/s.bar.c
if [ $? -ne 0 ]; then echo failed; exit 1; fi
cd $HERE/project/src
bk admin $Q -FRCS -FYEAR4 bar.c
bk commit $Q -yabc
bk resync $Q $HERE/project $HERE/copy
bk resolve -t $Q $HERE/copy
cd $HERE/copy/src
diff $HERE/project/src/SCCS/s.bar.c  $HERE/copy/src/SCCS/s.bar.c
if [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK
echo $N Check propagation of flags \& permission .....................$NL
cd $HERE/project/src
bk admin $Q -fRCS -m-rwx-r--r-- bar.c
bk commit $Q -yabc
bk resync $Q $HERE/project $HERE/copy
bk resolve -t $Q $HERE/copy
cd $HERE/copy/src
diff $HERE/project/src/SCCS/s.bar.c  $HERE/copy/src/SCCS/s.bar.c
if [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK
echo $N Check propagation of text field .............................$NL
cd $HERE/project/src
echo "this is a text entry line 1" > text
echo "this is a text entry line 2" >> text
bk admin -ttext h.h
bk commit $Q -yabc
bk resync $Q $HERE/project $HERE/copy
bk resolve -t $Q $HERE/copy
cd $HERE/copy/src
diff $HERE/project/src/SCCS/s.h.h  $HERE/copy/src/SCCS/s.h.h
if [ $? -ne 0 ]; then echo failed; exit 1; fi
cd $HERE/project/src
bk admin -T h.h
bk commit $Q -yabc
bk resync $Q $HERE/project $HERE/copy
bk resolve -t $Q $HERE/copy
cd $HERE/copy/src
diff $HERE/project/src/SCCS/s.h.h  $HERE/copy/src/SCCS/s.h.h
if [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK
echo $N Check propagation of text, flags \& permission ...............$NL
cd $HERE/project/src
bk admin -ttext -fYEAR4 -m-rwx-w--w- h.h
bk commit $Q -yabc
bk resync $Q $HERE/project $HERE/copy
bk resolve -t $Q $HERE/copy
cd $HERE/copy/src
diff $HERE/project/src/SCCS/s.h.h  $HERE/copy/src/SCCS/s.h.h
if [ $? -ne 0 ]; then echo failed; exit 1; fi
bk prs -r+ -h -d":MODE:\n:FD:" h.h > CMP1
${CAT} > CMP2 <<EOF
100722
this is a text entry line 1
this is a text entry line 2
EOF
cmp CMP1 CMP2
if [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK
echo $N Check flags conflict ........................................$NL
cd $HERE/project/src
bk admin $Q -fEXPAND1 -fRCS -fYEAR4 foo.c
bk commit $S -yperm2
cd $HERE/copy/src
bk admin $Q -fEXPAND1 foo.c
bk commit $S -yperm3
bk resync $Q $HERE/project $HERE/copy
bk resolve -t $Q $HERE/copy 2>/dev/null 1>&2 <<EOF
r
u
EOF
FLAGS=`bk prs -h -r1.4 -d:FLAGS: foo.c`
if [ "$FLAGS" != "BITKEEPER,YEAR4,RCS,SCCS,EXPAND1,CSETMARKED" ]
then	echo failed with mode $FLAGS
	bk prs -h -d':REV:\t:FLAGS:' foo.c
	#cat SCCS/s.foo.c
	exit 1
fi
echo OK
