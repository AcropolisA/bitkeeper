
# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Copyright (c) 2002 Andrew chang
# %K%

commercial project
echo $N Test bk mvdir ...............................................$NL
mkdir foo
cd foo
echo "bar" > edited
echo "bar" > edited_no_gfile
echo "bar" > readonly
echo "bar" > readonly_no_gfile
bk new $Q edited edited_no_gfile readonly readonly_no_gfile
bk edit $Q edited edited_no_gfile
bk get $Q readonly
rm -f edited_no_gfile readonly_no_gfile
echo "bar-new" > edited
echo "comment" > SCCS/c.edited
echo "extra" > extra
# make some bad c.file
mkdir -p SCCS/junk
echo XXX > SCCS/junk/c.junk
mkdir -p junk/SCCS
echo XXX > junk/SCCS/c.junk
echo XXX > c.junk
cd ..
# Note: edited_no_gfile will be converted to a readonly file due to 
# autofix in bk -r check -a
bk mv foo foo2
bk -r check -a || { echo failed; exit 1; }
if [ ! -d foo2 ]; then echo failed; exit 1; fi
if [ -d foo ]; then echo failed; exit 1; fi
cd foo2
if [ ! -f readonly ]; then echo failed; exit 1; fi
if [ ! -w edited ]; then echo failed; exit 1; fi
if [ -w readonly ]; then echo failed; exit 1; fi
if [ -f readonly_no_gfile ]; then echo failed; exit 1; fi
if [ ! -f SCCS/s.edited ]; then echo failed; exit 1; fi
if [ ! -f SCCS/c.edited ]; then echo failed; exit 1; fi
if [ ! -f SCCS/p.edited ]; then echo failed; exit 1; fi
if [ ! -f SCCS/d.edited ]; then echo failed d; exit 1; fi
if [ ! -f SCCS/s.edited_no_gfile ]; then echo failed; exit 1; fi
if [ ! -f SCCS/s.readonly ]; then echo failed; exit 1; fi
if [ ! -f SCCS/d.readonly ]; then echo failed; exit 1; fi
if [ -f SCCS/p.readonly ]; then echo failed; exit 1; fi
if [ ! -f SCCS/s.readonly_no_gfile ]; then echo failed; exit 1; fi
if [ -f SCCS/p.readonly_no_gfile ]; then echo failed; exit 1; fi
if [ ! -f extra ]; then echo failed; exit 1; fi
bk -r check -a || { echo failed; exit 1; }
echo OK
echo $N Test bk mvdir with -x -i ....................................$NL
cd "$HERE/project/foo2"
bk delta $Q -ynew_content edited
REV=`bk prs -hnr+ -d:I: edited`
if [ "$REV" != 1.3 ]; then echo failed; exit 1; fi
bk edit $Q -i1.1 -x1.2 edited
echo "comment" > SCCS/c.edited
cp SCCS/p.edited "$HERE/pfile"
cd ..
bk mvdir foo2 foo3
cd foo3
if [ ! -w edited ]; then echo failed; exit 1; fi
if [ ! -f SCCS/s.edited ]; then echo failed; exit 1; fi
if [ ! -f SCCS/c.edited ]; then echo failed; exit 1; fi
if [ ! -f SCCS/p.edited ]; then echo failed; exit 1; fi
if [ ! -f SCCS/d.edited ]; then echo failed d; exit 1; fi
grep -q '^1.4 1.5' SCCS/p.edited || { echo failed 1; exit 1; }
grep -q ' -i1.1 -x1.2$' SCCS/p.edited || { echo failed 1; exit 1; }
bk -r check -a || { echo failed; exit 1; }
echo OK
echo $N Test bk mvdir with -x -i to exitsing dir ....................$NL
cd "$HERE/project/foo3"
bk delta $Q -ynew_content edited
REV=`bk prs -hnr+ -d:I: edited`
if [ "$REV" != 1.5 ]; then echo failed; exit 1; fi
bk edit $Q -i1.1 -x1.2 edited
echo "comment" > SCCS/c.edited
cp SCCS/p.edited "$HERE/pfile"
cd ..
mkdir foo4
bk mv foo3 foo4
cd foo4/foo3
if [ ! -w edited ]; then echo failed; exit 1; fi
if [ ! -f SCCS/s.edited ]; then echo failed; exit 1; fi
if [ ! -f SCCS/c.edited ]; then echo failed; exit 1; fi
if [ ! -f SCCS/p.edited ]; then echo failed; exit 1; fi
if [ ! -f SCCS/d.edited ]; then echo failed d; exit 1; fi
grep -q '^1.6 1.7' SCCS/p.edited || { echo failed 1; exit 1; }
grep -q ' -i1.1 -x1.2$' SCCS/p.edited || { echo failed 1; exit 1; }
bk -r check -a || { echo failed; exit 1; }
echo OK

echo $N mvdir should not delta things in the target directory .......$NL
commercial project
mkdir -p dir/sub
mkdir lib
touch dir/sub/a dir/sub/b lib/c
bk new $Q dir/sub/a dir/sub/b lib/c
bk commit $Q -y'added stuff'
cd dir
bk mv sub/ ../lib
cd ../lib
REV=`bk log -r+ -nd:REV: c`
test "$REV" != "1.1" && {
	echo failed
	bk log -r+ c
	exit 1
}
echo OK
exit 0
