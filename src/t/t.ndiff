# Note in these tests we can't use cmpfiles as it will ignore \r's

dumpdiffs() {
	echo
	echo --- WANT ---
	cat WANT
	echo --- OD WANT ---
	od -a WANT
	echo --- GOT ---
	cat GOT
	echo --- OD GOT ---
	od -a GOT
}

echo $N Basic........................................................$NL
cd "$HERE"
echo a > A
echo b > B
cat >WANT <<EOF
1c1
< a
---
> b
EOF
bk ndiff A B > GOT && fail Expected diffs
cmp -s WANT GOT || {
	dumpdiffs
	fail
}
echo OK

echo $N Test no newline at end of file...............................$NL
cat <<EOF >>A
A
B
C
D
EOF
cat <<EOF >B
A
1
B
D
EOF
echon "2" >> B
bk ndiff A B > GOT && fail Expected diffs
bk diff A B >WANT
cmp -s WANT GOT || {
	dumpdiffs
	fail
}
echo OK

echo $N Test no newline makes it through.............................$NL
echo bar > A
echo bar > B
printf "foo\r" >> B
bk diff A B > WANT
bk ndiff A B > GOT
cmp -s WANT GOT || {
	dumpdiffs
	fail
}
echo OK

echo $N Test no new line at end of file does not match other lines...$NL
cat <<EOF >A
A
B
C
2
D
EOF
cat <<EOF >B
A
EOF
printf "2" >> B
cat <<EOF > WANT
2,5c2
< B
< C
< 2
< D
---
> 2
\ No newline at end of file
EOF
bk ndiff --strip-trailing-cr A B > GOT
cmp -s WANT GOT || {
	dumpdiffs
	fail Different results
}
echo OK

echo $N Test our wacky --ignore-tailing-cr...........................$NL
echo a > A
printf "a\n\r" > B
bk diff --ignore-trailing-cr A B >WANT && fail
bk ndiff --ignore-trailing-cr A B >GOT && {
	dumpdiffs
	fail
}
cmp -s WANT GOT || {
	dumpdiffs
	fail Different results
}
echo a > A
echon a > B
bk diff --ignore-trailing-cr A B > WANT && fail
bk ndiff --ignore-trailing-cr A B > GOT && {
	dumpdiffs
	fail
}
cmp -s WANT GOT || {
	dumpdiffs
	fail Different results
}
printf "\ra\r\n" > A
printf "\ra\r\r\r\n" > B
bk diff --ignore-trailing-cr A B > WANT || fail $?
bk ndiff --ignore-trailing-cr A B > GOT || fail $?
cmp -s WANT GOT || {
	dumpdiffs
	fail Different results
}
printf 'data\r\n' > A
echo 'data' > B
bk diff --ignore-trailing-cr A B > WANT || fail $?
bk ndiff --ignore-trailing-cr A B > GOT || fail $?
cmp -s WANT GOT || {
	dumpdiffs
	fail Different results
}
echo 'data' > A
echo 'data' > B
printf 'last line\r\n' >> B
bk diff --ignore-trailing-cr A B > WANT && fail $?
bk ndiff --ignore-trailing-cr A B > GOT && fail $?
cmp -s WANT GOT || {
	dumpdiffs
	fail
}
printf "bar\r\n" > A
printf "bar\r\nfoo\r" > B
bk diff --ignore-trailing-cr A B > WANT
bk ndiff --ignore-trailing-cr A B > GOT
cmp -s WANT GOT || {
	dumpdiffs
	fail
}
printf "bar\r\n" > A
printf "bar\r\nfoo\r\n" > B
bk diff --ignore-trailing-cr A B > WANT
bk ndiff --ignore-trailing-cr A B > GOT
cmp -s WANT GOT || {
	dumpdiffs
	fail
}
printf "a\nb\nc\r\r\r\r" > A
printf "a\n1\nc\r\r\r" > B
bk diff --ignore-trailing-cr A B > WANT
bk ndiff --ignore-trailing-cr A B >GOT
cmp -s WANT GOT || {
	dumpdiffs
	fail
}
echo OK

echo $N Test binary detection........................................$NL
echo baseline > A
cp A B
echo 'There is a null right here X>' | tr X '\000' >> B
echo "" >> B
echo and another line after that >> B
bk diff --ignore-trailing-cr A B > WANT && fail $?
bk ndiff --ignore-trailing-cr A B > GOT && fail $?
cmp -s WANT GOT || {
	dumpdiffs
	fail Different results
}
echo OK


echo $N Asymetric test...............................................$NL
cat > A <<EOF
#
#
#
#

#
#
#
#



EOF
cat > B <<EOF

#
EOF
cat > WANT <<EOF
1,4d0
< #
< #
< #
< #
7,12d2
< #
< #
< #
< 
< 
< 
EOF
bk ndiff A B > GOT && fail Expected diffs
cmp -s WANT GOT || fail Different results
echo OK

echo $N Test ndiff -p................................................$NL
cat <<EOF > A
#include <stdio.h>

int
main(int ac, char **av)
{
	int a, b, c;
	int d, e, f;

	/* this is where code would go */
	return (0);
}
EOF
cat <<EOF > B
#include <stdio.h>

int
main(int ac, char **av)
{
	int a, b, c;
	int d, e, f;

	/* this is where code would go */
	return (1);
}
EOF
cat <<EOF > WANT
--- A
+++ B
@@ -7,5 +7,5 @@ main(int ac, char **av)
 	int d, e, f;
 
 	/* this is where code would go */
-	return (0);
+	return (1);
 }
EOF
bk ndiff -up A B | sed -e 's/^--- A.*/--- A/g' -e 's/^+++ B.*/+++ B/g' > GOT
cmp -s WANT GOT || fail Different results
echo OK

echo $N Try -p again but with a longer function......................$NL
sed 's/main/huge_function_name_more_than_40_characters_long/g' A > LA
sed 's/main/huge_function_name_more_than_40_characters_long/g' B > LB
cat <<EOF > WANT
--- LA
+++ LB
@@ -7,5 +7,5 @@ huge_function_name_more_than_40_characte
 	int d, e, f;
 
 	/* this is where code would go */
-	return (0);
+	return (1);
 }
EOF
bk ndiff -up LA LB | sed -e 's/^--- LA.*/--- LA/g' \
		-e 's/^+++ LB.*/+++ LB/g' > GOT
cmp -s WANT GOT || fail Different results
echo OK

echo $N Test -p with multiple functions..............................$NL
cat <<EOF > A
int
foo(int arg)
{
	/* code */
}








int
bar(int arg)
{



	/* other code */
}
EOF
cat <<EOF > B
int
foo(int arg)
{
	/* code */
}








int
bar(int arg)
{



	/* changed code */
}
EOF
bk diff -up A B > WANT
bk ndiff -up A B > GOT
cmp -s WANT GOT || {
	dumpdiffs
	fail
}
echo OK

echo $N Test -b option...............................................$NL
cat <<EOF > A
int
main(int ac, char **av)
{
	printf("this is a line\n");
	printf("this is a line\n");
	printf("this is a line\n");
}
EOF
cat <<EOF > B
int
main(int ac, char **av)
{
	printf("this is a line\n");
	if (foo) {
		printf("this is a line\n");
	}
	printf("this is a line\n");
}
EOF
cat <<EOF >WANT
4a5
> 	if (foo) {
5a7
> 	}
EOF
bk ndiff -b A B > GOT
cmpfiles WANT GOT
echo OK

echo $N Test -w option...............................................$NL
cat <<EOF > A
int
main(int ac, char **av)
{
	printf("this is a line\n");
}
EOF
cat <<EOF > B
int
main(int ac, char **av)
{
	printf("this is aline\n");
}
EOF
cat <<EOF > WANT
4c4
< 	printf("this is a line\n");
---
> 	printf("this is aline\n");
EOF
bk ndiff -b A B > GOT
cmpfiles WANT GOT
bk ndiff -w A B > GOT
rm -f WANT
touch WANT
cmpfiles WANT GOT
echo OK
