# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2002 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
#
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Tests for populate/unpopulate


echo $N Create an ensemble...........................................$NL
nested project
# add some files
cd "$HERE/project/gcc"
for i in 1 2 3 4 5
do
	touch file$i
	echo "stuff $i" > file$i
	bk new $Q -y"add" file$i
done
bk commit $Q -y"Add $i to file$i"
cd "$HERE/project" && bk commit $Q -y"Commit cset in gcc"
cd "$HERE/project/gdb"
for i in 1 2 3 4 5
do
	touch file$i
	echo "stuff $i" > file$i
	bk new $Q -y"add" file$i
	bk commit $Q -y"add file $i"
done
cd "$HERE/project"
echo hi > bam
bk new $Q -b bam || exit 1
bk commit $Q -y"add csets to gdb"
echo OK

echo $N Set up some components.......................................$NL
cd "$HERE/project"
echo > "$HERE/empty"
for i in 1 2 3 4 5 6 7 8 9 10
do	bk setup -fc"$HERE/empty" comp$i
done
bk alias new -C odd comp1 comp3 comp5 comp7 comp9
bk alias new -C even comp2 comp4 comp6 comp8 comp10
bk alias new -C primes comp2 comp3 comp5 comp7
bk commit $Q -y"adding components and aliases"
cd "$HERE"
bk clone $Q -seven -sodd -sprimes project copy
bk clone $Q -sodd project odd
echo OK

echo $N Unpopulate even and primes...................................$NL
cd "$HERE/copy"
bk components rm $Q even primes || {
	echo failed
	exit 1
}
bk components here > GOT
cat <<EOF > WANT
comp1
comp3
comp5
comp7
comp9
EOF
cmpfiles GOT WANT
bk alias show here > GOT
echo odd > WANT
cmpfiles GOT WANT
echo OK

echo $N Populate them back from a repo that does not have them ......$NL
bk components add $Q -@../odd even primes || fail
cat <<EOF > WANT
even
odd
primes
EOF
bk alias show here > GOT
cmpfiles GOT WANT
bk components here > GOT
cat <<EOF > WANT
comp1
comp10
comp2
comp3
comp4
comp5
comp6
comp7
comp8
comp9
EOF
cmpfiles GOT WANT
echo OK

echo $N Unpopulate odd...............................................$NL
bk components rm $Q odd || {
	echo failed
	exit 1
}
bk components here > GOT
# gotta love our ordering :)
cat <<EOF > WANT
comp10
comp2
comp3
comp4
comp5
comp6
comp7
comp8
EOF
cmpfiles GOT WANT
cat <<EOF > WANT
even
primes
EOF
bk alias show here > GOT
cmpfiles GOT WANT
echo OK

echo $N Unpopulate even..............................................$NL
bk components rm $Q even || {
	echo failed
	exit 1
}
bk components here > GOT
cat <<EOF > WANT
comp2
comp3
comp5
comp7
EOF
cmpfiles GOT WANT
echo primes > WANT
bk alias show here > GOT
cmpfiles GOT WANT
echo OK

echo $N Unpopulate alias not populated is an error...................$NL
bk components rm default 2>ERR && exit 1
grep -q "can't remove" ERR || {
	echo failed
	cat ERR
	exit 1
}
bk components rm all 2> ERR && exit 1
grep -q "can't remove" ERR || {
	echo failed
	cat ERR
	exit 1
}
echo OK

echo $N Populate special alias \'all\' and unpopulate it...............$NL
bk components add $Q -l all || exit 1
bk components here > GOT
cat <<EOF > WANT
comp1
comp10
comp2
comp3
comp4
comp5
comp6
comp7
comp8
comp9
gcc
gdb
EOF
cmpfiles GOT WANT
cat <<EOF > WANT
all
primes
EOF
bk alias show here > GOT
cmpfiles GOT WANT
bk components rm $Q all || exit 1
bk components here > GOT
cat <<EOF > WANT
comp2
comp3
comp5
comp7
EOF
cmpfiles GOT WANT
cat <<EOF > WANT
primes
EOF
bk alias show here > GOT
cmpfiles GOT WANT
echo OK

echo $N Populate a glob and unpopulate it............................$NL
bk components add $Q './g*' || exit 1
bk components here > GOT
cat <<EOF > WANT
comp2
comp3
comp5
comp7
gcc
gdb
EOF
cmpfiles GOT WANT
(echo primes; cd gcc; bk id; cd ../gdb; bk id) | bk _sort > WANT
bk alias show here > GOT
cmpfiles GOT WANT
bk components rm $Q './g*' || exit 1
bk components here > GOT
cat <<EOF > WANT
comp2
comp3
comp5
comp7
EOF
cmpfiles GOT WANT
cat <<EOF > WANT
primes
EOF
bk alias show here > GOT
cmpfiles GOT WANT
echo OK

echo $N Unpopulate primes............................................$NL
bk components rm $Q primes || exit 1
bk components here > GOT
cat <<EOF > WANT
EOF
cmpfiles GOT WANT
bk alias show here > GOT
cmpfiles GOT WANT
echo OK

echo $N Unpopulate a component with changes should fail..............$NL
bk components add $Q primes || exit 1
bk components here > GOT
cat <<EOF > WANT
comp2
comp3
comp5
comp7
EOF
cmpfiles GOT WANT
cat <<EOF > WANT
primes
EOF
bk alias show here > GOT
cmpfiles GOT WANT
cd comp2
touch foobar
bk new $Q foobar
cd ..
bk components rm primes 2> ERR && exit 1
grep -q 'Non-committed file' ERR || {
	echo failed
	cat ERR
	exit 1
}
bk components here | grep -q comp2 || {
	echo failed
	exit 1
}
echo OK

echo $N Add a deep nest and populate it..............................$NL
SP=""
for i in 2 3 5 7
do	cd "$HERE/project/comp$i"
	bk setup -fc"$HERE/empty" sub$i
	SP="$SP comp$i/sub$i"
done
cd "$HERE/project"
bk alias new subprimes $SP
cd "$HERE/copy"
bk pull $Q || exit 1
bk components add $Q subprimes || exit 1
bk components here > GOT
cat <<EOF > WANT
comp2
comp2/sub2
comp3
comp3/sub3
comp5
comp5/sub5
comp7
comp7/sub7
EOF
cmpfiles GOT WANT
echo OK

echo $N Unpopulate subprimes.........................................$NL
bk components rm $Q subprimes || exit 1
bk components here > GOT
cat <<EOF > WANT
comp2
comp3
comp5
comp7
EOF
cmpfiles GOT WANT
echo OK

echo $N Remove enclosing and populate subcomponents should work......$NL
bk _rm comp2/SCCS/s.foobar  # crud from above test
bk components set $Q subprimes || exit 1
bk components here > GOT
cat <<EOF > WANT
comp2/sub2
comp3/sub3
comp5/sub5
comp7/sub7
EOF
bk components add $Q primes || {
	echo failed
	exit 1
}
bk components here > GOT
cat > WANT <<EOF
comp2
comp2/sub2
comp3
comp3/sub3
comp5
comp5/sub5
comp7
comp7/sub7
EOF
cmpfiles GOT WANT
echo OK

echo $N Unpopulate of subcomponents should work......................$NL
bk components rm $Q primes || exit 1
cat > WANT <<EOF
subprimes
EOF
bk alias show here > GOT
cmpfiles GOT WANT
bk components here > GOT
cat > WANT <<EOF
comp2/sub2
comp3/sub3
comp5/sub5
comp7/sub7
EOF
cmpfiles GOT WANT
echo OK

echo $N Conflict in deep nest should be detected.....................$NL
touch comp2/sub23
bk components add $Q primes 2> ERR && {
	echo should fail
	cat ERR
	exit 1
}
grep -q "comp2 exists and is not empty" ERR || fail -f ERR wrong error message
bk alias show here > GOT
echo subprimes > WANT
cmpfiles GOT WANT
bk components here > GOT
cat > WANT <<EOF
comp2/sub2
comp3/sub3
comp5/sub5
comp7/sub7
EOF
cmpfiles GOT WANT
rm -f comp2/sub23
echo OK

echo ---- Test very deeply nested deep nests........................
echo $N Setup the repo...............................................$NL
cd "$HERE/project"
for i in 1 2 3 4 5
do	bk setup -C -fc"$HERE/empty" deep$i
	cd deep$i
done
cd "$HERE/project"
bk commit $Q -y"add deep stuff" || exit 1
cd "$HERE/copy"
# should only have subprimes currently
bk alias show here > GOT
echo subprimes > WANT
cmpfiles GOT WANT
bk pull $Q || exit 1
bk components rm $Q subprimes || exit 1
# make sure the pull did not bring the deeps stuff
# since it's not in our aliases file
bk components here > GOT
cat > WANT <<EOF
EOF
cmpfiles GOT WANT
bk alias show here > GOT
cmpfiles GOT WANT
echo OK

# now start the deep nest fun
echo $N Populate deep1/deep2/deep3/deep4/deep5.......................$NL
bk components add $Q ./deep1/deep2/deep3/deep4/deep5 || exit 1
bk components here > GOT
cat > WANT <<EOF
deep1/deep2/deep3/deep4/deep5
EOF
cmpfiles GOT WANT
echo OK

echo $N Populate deep1/deep2.........................................$NL
bk components add $Q ./deep1/deep2 || exit 1
bk components here > GOT
cat > WANT <<EOF
deep1/deep2
deep1/deep2/deep3/deep4/deep5
EOF
cmpfiles GOT WANT
echo OK

echo $N Populate deep1/deep2/deep3 with a conflict...................$NL
touch deep1/deep2/deep3/conflict
bk components add $Q ./deep1/deep2/deep3 >ERR 2>&1 && {
	echo failed
	exit 1
}
rm deep1/deep2/deep3/conflict
bk components here > GOT
cat > WANT <<EOF
deep1/deep2
deep1/deep2/deep3/deep4/deep5
EOF
cmpfiles GOT WANT
echo OK

echo $N Unpopulate deep1/deep2 should work...........................$NL
bk components rm $Q ./deep1/deep2 || exit 1
bk components here > GOT
cat > WANT <<EOF
deep1/deep2/deep3/deep4/deep5
EOF
cmpfiles GOT WANT
echo OK

echo $N Repopulate deep1/deep2 with conflict should fail.............$NL
mkdir deep1/deep2/conflict || exit 1
bk components add $Q ./deep1/deep2 > ERR 2>&1 && {
	echo failed
	exit 1
}
bk components here > GOT
cat > WANT <<EOF
deep1/deep2/deep3/deep4/deep5
EOF
cmpfiles GOT WANT
echo OK

echo $N Remove the conflict, now it works............................$NL
rmdir deep1/deep2/conflict || exit 1
bk components add $Q ./deep1/deep2
bk components here > GOT
cat > WANT <<EOF
deep1/deep2
deep1/deep2/deep3/deep4/deep5
EOF
cmpfiles GOT WANT
echo OK

if [ $WINDOWS = NO ]; then
echo $N Populate with a symlink -- fails.............................$NL
bk components rm $Q ./deep1/deep2/deep3/deep4/deep5 || exit 1
test -d deep1/deep2/deep3/deep4/deep5 && exit 1
rmdir deep1/deep2/deep3/deep4 || exit 1
ln -s ../../../../deep1 deep1/deep2/deep3/deep4
bk components add $Q ./deep1/deep2/deep3 > ERR 2>&1 && {
	echo failed
	exit 1
}
bk components here > GOT
cat > WANT <<EOF
deep1/deep2
EOF
cmpfiles GOT WANT
# clean
rm -f deep1/deep2/deep3/deep4 || exit 1
echo OK

echo $N Populate with a symlink in a deeper component -- passes......$NL
mkdir deep1/deep2/deep3/deep4 || exit 1
ln -s ../../../../deep1 deep1/deep2/deep3/deep4/deep5
bk components add $Q ./deep1/deep2/deep3 > ERR 2>&1 || {
	echo failed
	exit 1
}
bk components here > GOT
cat > WANT <<EOF
deep1/deep2
deep1/deep2/deep3
EOF
cmpfiles GOT WANT
echo OK
fi

echo ---- Test unmapped repos ......................................
echo $N Create an not-remapped component ............................$NL
cd "$HERE/copy"
BK_NO_REMAP=1 bk setup -fc../empty not-remapped || exit 1
test -d not-remapped/SCCS || exit 1
test -d not-remapped/.bk && exit 1
echo OK

echo $N Try to unpopulate it -- should fail because no parent .......$NL
bk components rm $Q not-remapped > GOT 2>&1 && exit 1
cat <<'EOF' > WANT
components: No other sources for not-remapped known
components: unable to remove not-remapped
EOF
cmpfiles WANT GOT
echo OK

echo $N Try to force unpopulate it ..................................$NL
bk components rm $Q -f not-remapped || exit 1
echo OK
