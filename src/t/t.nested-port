# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2008 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
#
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

echo $N Create some ensembles sharing components ....................$NL
fresh_commercial bash-sa
echo hi > foo
bk new $Q foo || exit 1
bk commit $Q -y'add foo' || exit 1
cd ..
nested project
bk attach $Q ../bash-sa bash
cd bash
bk edit $Q foo || exit 1
echo stuff in project >> foo || exit 1
bk commit -y'update foo in project/bash' $Q || exit 1
bk -P commit -y'update foo in project' $Q || exit 1
cd ../..
commercial standalone
echo sa1 > sa_file
bk new $Q sa_file || exit 1
bk commit -y'add sa_file' $Q || exit 1
cd ..
fresh_commercial project2
echo default > BitKeeper/log/HERE
touch BitKeeper/etc/aliases
bk new $Q BitKeeper/etc/aliases
bk commit $Q -y"add aliases file"
bk newroot -P $Q || exit 1
cd ../project2
bk attach $Q ../bash-sa mybash
bk attach $Q ../standalone sa2
cd ../project
bk attach $Q ../standalone sa1
cd ..
bk clone $Q project project-copy || exit 1
echo OK

echo $N Test the api for bk portal, leaving project2 a portal .......$NL
# Not in a product
cd "$HERE"
bk portal 2> ERR && { echo failed; exit 1; }
grep -q "bk: Cannot find product root" ERR || { echo wrong msg; exit 1; }
bk portal . 2> ERR && { echo failed; exit 1; }
grep -q "bk: Cannot find product root" ERR || { echo wrong msg; exit 1; }
# In a product
cd project2
bk portal > OUT && { echo failed; exit 1; }
grep -q "This is not a portal" OUT || { echo wrong msg; exit 1; }
bk portal -q && { echo failed; exit 1; }
# Now a portal
bk portal $Q . || { echo failed; exit 1; }
bk portal > OUT || { echo failed; exit 1; }
grep -q "This is a portal" OUT || { echo wrong msg; exit 1; }
bk portal -q || { echo failed; exit 1; }
# remove it
bk portal rm > OUT || exit 1
grep -q "This is no longer a portal" OUT || exit 1
bk portal rm > OUT || exit 1
grep -q "This is not a portal" OUT || exit 1
bk portal . > OUT || { echo failed; exit 1; }
grep -q "This is now a portal" OUT || exit 1
bk portal . > OUT || { echo failed; exit 1; }
grep -q "This is already a portal" OUT || exit 1
echo OK

echo $N Port csets from standalone repo to component ................$NL
cd "$HERE"/standalone
echo hi > file1
bk new $Q file1 || exit 1
bk commit $Q -y'add file1' || exit 1
cd ../project2/sa2
bk portal $Q rm || exit 1
bk pull $Q ../../standalone 2> ERR && {
	echo this should fail
	cat ERR
	exit 1
}
bk portal $Q . || exit 1
bk pull $Q ../../standalone 2> ERR && {
	echo this should fail
	cat ERR
	exit 1
}
grep -q 'pull: component-only pulls are not allowed.' ERR || {
	echo wrong error message
	cat ERR
	exit 1
}
cd ..
# Check :SPN: because :DPN: doesn't really print the path for ChangeSet.
test "`bk prs -hnd:SPN: -r+ sa2/ChangeSet`" = sa2/SCCS/s.ChangeSet || {
     echo wrong pathnname before port
     exit 1
}
cd sa2
bk portal $Q rm || exit 1
bk port $Q ../../standalone 2> ERR && exit 1
grep -q 'port: destination is not a portal.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
bk portal $Q . || exit 1
bk port $Q ../../standalone || exit 1
cd ..
test "`bk prs -hnd:SPN: -r+ sa2/ChangeSet`" = sa2/SCCS/s.ChangeSet || {
     echo wrong pathnname after port
     bk changes -r+
     exit 1
}
bk -r check -ac || exit 1
bk sfiles -pAC > GOT
cat <<EOF > WANT
sa2/SCCS/s.ChangeSet|1.4
sa2/SCCS/s.ChangeSet|1.2.1.1
EOF
cmpfiles GOT WANT
bk log -C1.3 -d:JOIN::I: sa2/ChangeSet > WANT
printf "1.3,1.2,1.1,1.0" > GOT
cmpfiles GOT WANT
# Commit to product.
bk commit $Q -y'port from standalone' || exit 1
# Make sure another port comes back empty.
cd sa2
bk port $Q ../../standalone || exit 1
test "`bk changes -r+ -nd':REV: :GFILE:'`" = "1.4 ChangeSet" || exit 1
bk port $Q -r+ ../../standalone || exit 1
test "`bk changes -r+ -nd':REV: :GFILE:'`" = "1.4 ChangeSet" || exit 1
echo OK

echo $N Port csets from component in portal to standalone repo ......$NL
# We want to run this test twice, once where the source component is
# in a portal and once when it is not, so save off the standalone repo
# so we can restore it below.
cd "$HERE"
tar cf standalone.tar standalone
cd standalone
bk pull $Q ../project2/sa2 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q 'component-only pulls are not allowed.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
test "`bk changes -r+ -nd:REV:`" = 1.3 || exit 1
bk port $Q ../project2/sa2 || exit 1
# We should get two csets from the component, and see a null cset
# that sets the ChangeSet path.
bk changes -e -d':JOIN::REV:' > GOT || exit 1
grep -q '^1.5,1.4,1.2.1.1,1.3,1.2,1.1,1.0$' GOT || exit 1
# Check :SPN: because :DPN: doesn't really print the path for ChangeSet.
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || {
	echo wrong pathnname after port
	exit 1
}
bk port $Q ../project2/sa2 || exit 1
test "`bk changes -r+ -nd:REV:`" = 1.5 || exit 1
echo OK

echo $N Port csets from component not in portal to standalone repo ..$NL
# Just like the above test but where the component is not in a portal.
cd "$HERE"
rm -rf standalone
tar xf standalone.tar
cd project2
bk portal $Q rm || exit 1
cd ../standalone
bk pull $Q ../project2/sa2 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q 'component-only pulls are not allowed.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
test "`bk changes -r+ -nd:REV:`" = 1.3 || exit 1
bk port $Q ../project2/sa2 || exit 1
# We should get two csets from the component, and see a null cset
# that sets the ChangeSet path.
bk changes -e -d':JOIN::REV:' > GOT || exit 1
grep -q '^1.5,1.4,1.2.1.1,1.3,1.2,1.1,1.0$' GOT || exit 1
# Check :SPN: because :DPN: doesn't really print the path for ChangeSet.
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || {
	echo wrong pathnname after port
	exit 1
}
bk port $Q ../project2/sa2 || exit 1
test "`bk changes -r+ -nd:REV:`" = 1.5 || exit 1
cd "$HERE/project2"
bk portal $Q . || exit 1
echo OK

echo $N Port csets from component in portal to detached repo ........$NL
# We want to run this test twice, once where the source component is
# in a portal and once when it is not, so save off the detached repo
# and the product it came from so we can restore them in the next test below.
cd "$HERE/project2"
bk detach $Q sa2 "$HERE/sa2-detached" || exit 1
cd "$HERE"
tar cf sa2-detached.tar sa2-detached || exit 1
tar cf project2.tar project2 || exit 1
cd "$HERE/sa2-detached"
# Check :SPN: because :DPN: doesn't really print the path for ChangeSet.
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || {
	echo wrong pathnname after detach
	exit 1
}
bk pull $Q ../project2/sa2 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q 'component-only pulls are not allowed.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
test "`bk changes -r+ -nd:REV:`" = 1.5 || exit 11
bk port $Q "$HERE/project2/sa2" || exit 12
test "`bk changes -r+ -nd:REV:`" = 1.5 || exit 13
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || exit 14
# Add a cset to the component.
cd "$HERE/project2/sa2"
echo hi > sa2-new
bk new $Q sa2-new || exit 15
bk commit $Q -y'add sa2-new' || exit 16
# Port to the detached repo.
cd "$HERE/sa2-detached"
bk port $Q "$HERE/project2/sa2" || exit 17
bk changes -e -d':JOIN::REV:' > GOT || exit 18
grep -q '^1.6,1.4.1.1,1.5,1.4,1.2.1.1,1.3,1.2,1.1,1.0$' GOT || exit 19
bk port $Q "$HERE/project2/sa2" || exit 1
test "`bk changes -r+ -nd:REV:`" = 1.6 || exit 1
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || exit 1
echo OK

echo $N Port csets from component not in portal to detached repo ....$NL
# Like the above test but the portal is removed from project2.
cd "$HERE"
rm -rf sa2-detached project2
tar xf sa2-detached.tar sa2-detached || exit 1
tar xf project2.tar project2 || exit 1
cd "$HERE/project2"
bk portal $Q rm || exit 1
cd "$HERE/sa2-detached"
# Check :SPN: because :DPN: doesn't really print the path for ChangeSet.
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || {
	echo wrong pathnname after detach
	exit 1
}
bk pull $Q ../project2/sa2 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q 'component-only pulls are not allowed.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
test "`bk changes -r+ -nd:REV:`" = 1.5 || exit 11
bk port $Q "$HERE/project2/sa2" || exit 12
test "`bk changes -r+ -nd:REV:`" = 1.5 || exit 13
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || exit 14
# Add a cset to the component.
cd "$HERE/project2/sa2"
echo hi > sa2-new
bk new $Q sa2-new || exit 15
bk commit $Q -y'add sa2-new' || exit 16
# Port to the detached repo.
cd "$HERE/sa2-detached"
bk port $Q "$HERE/project2/sa2" || exit 17
bk changes -e -d':JOIN::REV:' > GOT || exit 18
grep -q '^1.6,1.4.1.1,1.5,1.4,1.2.1.1,1.3,1.2,1.1,1.0$' GOT || exit 19
bk port $Q "$HERE/project2/sa2" || exit 1
test "`bk changes -r+ -nd:REV:`" = 1.6 || exit 1
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || exit 1
cd "$HERE/project2"
bk portal $Q . || exit 1
echo OK

echo $N Port csets from detached repo to component ..................$NL
cd "$HERE/project2"
test "`bk prs -hnd:SPN: -r+ sa2/ChangeSet`" = sa2/SCCS/s.ChangeSet || exit 1
bk detach $Q sa2 ../sa2-detached-2
cd "$HERE/sa2-detached-2"
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = SCCS/s.ChangeSet || exit 1
cd "$HERE/project2/sa2"
test "`bk changes -r+ -nd:REV:`" = 1.5 || exit 1
# We should get the detach cset and a merge cset.
bk port $Q "$HERE/sa2-detached-2" || exit 1
bk changes -e -d':JOIN::REV:' > GOT || exit 1
grep -q '^1.7,1.6,1.5,1.4,1.2.1.1,1.3,1.2,1.1,1.0$' GOT || exit 1
# Add a cset to the detached repo.
cd "$HERE/sa2-detached-2"
echo hi > sa2-new-2
bk new $Q sa2-new-2 || exit 1
bk commit $Q -y'add sa2-new-2' || exit 1
# Port to the component.
cd "$HERE/project2/sa2"
bk pull $Q ../project2/sa2 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q 'component-only pulls are not allowed.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = sa2/SCCS/s.ChangeSet || exit 1
bk port $Q "$HERE/sa2-detached-2" || exit 1
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = sa2/SCCS/s.ChangeSet || exit 1
bk changes -e -d':JOIN::REV:' > GOT || exit 1
grep -q '^1.8,1.6.1.1,1.7,1.6,1.5,1.4,1.2.1.1,1.3,1.2,1.1,1.0$' GOT || exit 1
# Nothing else should come over.
bk port $Q "$HERE/sa2-detached-2" || exit 1
test "`bk prs -hnd:SPN: -r+ ChangeSet`" = sa2/SCCS/s.ChangeSet || exit 1
test "`bk changes -r+ -nd:REV:`" = 1.8 || exit 1
# Commit to the product.
cd ..
bk commit $Q -y'ports from sa2-detached-2' || exit 1
echo OK

echo $N Port csets from standalone repo to detached repo ............$NL
# Create all new repos since re-using the ones used above gets
# too complicated to easily follow.
cd "$HERE"
commercial standalone-3
cd "$HERE/project2"
bk attach $Q ../standalone-3 sa3 || exit 1
bk detach $Q sa3 ../detached-3 || exit 1
# Detached should have the attach and detach csets.
cd ../detached-3
bk changes -e -d':JOIN::REV:' > GOT || exit 1
grep -q '^1.3,1.2,1.1,1.0$' GOT || exit 1
# Add a cset to standalone-3 and port it to detached-3.
cd "$HERE/standalone-3"
echo hi > sa3-file
bk new $Q sa3-file || exit 1
bk commit $Q -y'add sa3-file' || exit 1
cd ../detached-3
bk pull $Q ../standalone-3 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
grep -q 'You are trying to pull from an unrelated package.' ERR || {
	echo bad error message
	cat ERR
	exit 1
}
# This case shouldn't require a portal.
bk port $Q ../standalone-3 2> ERR 1>&2 || {
	echo should have worked
	cat ERR
	exit 1
}
bk changes -e -d':JOIN::REV:' > GOT || exit 1
grep -q '^1.4,1.1.1.1,1.3,1.2,1.1,1.0$' GOT || exit 1
# Another immediate port shouldn't get anything new.
bk port $Q ../standalone-3 || exit 1
bk changes -e -d':JOIN::REV:' > GOT || exit 1
grep -q '^1.4,1.1.1.1,1.3,1.2,1.1,1.0$' GOT || exit 1
echo OK

echo $N Port csets from detached repo to standalone repo ............$NL
cd "$HERE/standalone-3"
bk pull $Q ../detached-3 2> ERR 1>&2 && {
	echo should have failed
	cat ERR
	exit 1
}
# Should get the attach and detach csets, the sa3-file cset on a branch
# with its merge cset, and that's it (no null cset on top for ChangeSet
# file path fix-up).
bk port $Q ../detached-3 || exit 1
bk changes -e -d':JOIN::REV:' > GOT || exit 1
grep -q '^1.4,1.1.1.1,1.3,1.2,1.1,1.0$' GOT || exit 1
echo OK

echo $N Test port of matching components in different products ......$NL
cd "$HERE/project2"
test "`bk prs -hnd:DPN: -r+ mybash/ChangeSet`" = ChangeSet || {
     echo wrong pathnname before port
     exit 1
}
cd mybash
echo junk > bar
bk new $Q bar || exit 1
bk commit $Q -y'add bar' || exit 1
bk -P commit $Q -y'bar to bash' || exit 1
echo junk2 > baz
bk new $Q baz || exit 1
bk commit $Q -y'add baz' || exit 1

bk port $Q ../../project/bash || exit 1
cd ..
bk sfiles -pAC > GOT
cat <<EOF > WANT
mybash/SCCS/s.ChangeSet|1.4
mybash/SCCS/s.ChangeSet|1.2.1.3
mybash/SCCS/s.ChangeSet|1.3
EOF
cmpfiles GOT WANT
bk commit $Q -ymkcset
bk log -C+ -nd":SFILE:|:I:" mybash/ChangeSet > GOT
cmpfiles GOT WANT
echo OK

echo $N Test port of special graph to stress sccs_csetBoundary ......$NL
cd "$HERE"
commercial branch
touch foo
bk new $Q foo
bk commit $Q -yfoo
cd ..
bk clone $Q branch branch2
cd branch
bk edit $Q foo
bk delta $Q -fyfoo foo
bk commit $Q -yfoo
cd ../project
bk attach $Q ../branch branch
cd ../project2
bk attach $Q ../branch2 branch2
cd branch2
bk port $Q ../../project/branch || exit 1
cd ..
printf "1.2.1.1,1.2,1.1,1.0" > WANT
bk log -C1.2 -d:JOIN::I: branch2/ChangeSet > GOT
cmpfiles GOT WANT
bk commit $Q -y'cset on branch'
bk log -C1.2 -d:JOIN::I: branch2/ChangeSet > GOT
cmpfiles GOT WANT
echo OK

echo $N Try to port csets between matching products..................$NL
cd "$HERE"/project-copy/bash
bk portal $Q .
bk port $Q ../../project/bash 2>ERR && {
	echo should have failed
	cat ERR
	exit 1
}
cat <<EOF >WANT
port: may not port components with identical products
EOF
cmpfiles WANT ERR
echo OK

echo $N Try to port a product .......................................$NL
cd "$HERE"/project-copy
bk port $Q ../project 2>ERR && {
	echo should have failed
	cat ERR
	exit 1
}
cat <<EOF >WANT
pull: port not allowed with product.
EOF
cmpfiles WANT ERR
echo OK

echo $N Try to port csets between standalone repos ..................$NL
cd "$HERE"
bk clone $Q standalone standalone-clone || exit 1
cd standalone-clone
echo new >another
bk new $Q another || exit 2
bk commit $Q -yanother || exit 3
cd ../standalone
bk port $Q ../standalone-clone 2> ERR && exit 4
grep -q 'may not port between identical repositories' ERR || exit 5
echo OK
