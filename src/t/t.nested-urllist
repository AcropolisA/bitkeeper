echo $N Setup .......................................................$NL
cd "$HERE"
nested product
cd "$HERE"
bk bkd -q -aPORT -ikill || fail
P=`cat PORT`
trap "bk _kill bk://localhost:$P" 0
echo OK

echo $N Check that component cset prunes urllist.....................$NL
bk clone $Q product clone || fail
cd clone
bk here where gcc | grep -q "$HERE/product" || fail 2
cd gcc
echo new > new-file
bk new $Q new-file || fail 3
bk commit $Q -y'add new-file' || fail 4
bk -P commit $Q -y'add new-file' || fail 5
cd ..
test -z "`bk here where gcc`" || fail 6
cd ..
rm -rf clone
echo OK

echo $N Local clone propagates urllist for cloned components ........$NL
cd "$HERE/product"
# product urllist should be empty
test -z "`bk here where`" || fail
cd ..
bk clone $Q product clone1 || fail 2
cd clone1
# clone1 urllist should have product
bk comps -h | sort >GOT
cat <<EOF >WANT
./gcc
./gdb
EOF
cmpfiles GOT WANT
bk here where gcc | grep -q "$HERE/product" || fail 3
bk here where gdb | grep -q "$HERE/product" || fail 4
cd ..
bk clone $Q clone1 clone2 || fail 10
cd clone2
# clone2 urllist should have product and clone1
bk comps -h | sort >GOT
cat <<EOF >WANT
./gcc
./gdb
EOF
cmpfiles GOT WANT
bk here where gcc | grep -q "$HERE/product" || fail 11
bk here where gcc | grep -q "$HERE/clone1"  || fail 12
bk here where gdb | grep -q "$HERE/product" || fail 13
bk here where gdb | grep -q "$HERE/clone1"  || fail 14
cd ..
echo OK

echo $N Component rm fails if component not found in urllist ........$NL
bk clone $Q clone1 cloneA || fail
# Make a cset in cloneA/gcc to remove gcc from cloneA's urllist.
cd cloneA/gcc
echo new >new
bk new $Q new || fail 2
bk commit $Q -y'add new' || fail 3
cd ..
test -z "`bk here where gcc`" || fail 4
cd "$HERE"
# After this, for gcc only cloneA is in cloneB's urllist.
bk clone $Q cloneA cloneB || fail 5
cd cloneB
bk here where gcc | grep -q "$HERE/cloneA" || fail 6
bk here where gcc | grep -q "$HERE/clone1" && fail 65
cd ..
# Remove cloneA/gcc and then try to remove cloneB/gcc (it should fail).
rm -rf cloneA/gcc
cd cloneB
bk alias set $Q HERE `bk comps -h` || fail 7
bk here rm $Q gcc 2>ERR && fail 8
cat <<EOF > WANT
here: No other sources for ./gcc known
here: unable to remove ./gcc
EOF
cmpfiles ERR WANT
cd ..
rm -rf cloneA cloneB
echo OK

echo $N Component rm prunes url if repo lacks component .............$NL
cd "$HERE"
bk clone $Q product cloneA || fail
# Make a cset in cloneA/gcc to remove gcc from its urllist.
cd cloneA/gcc
echo new >new
bk new $Q new || fail 2
bk commit $Q -y'add new' || fail 3
bk -P commit $Q -y'add new' || fail 4
cd ../..
bk clone $Q cloneA cloneB || fail 5
# Remove gcc from cloneB.
cd cloneB
bk here where gcc | grep -q "$HERE/cloneA" || fail 6
bk alias set $Q HERE `bk comps -h` || fail 7
bk here rm $Q gcc || fail 8
bk here where gcc | grep -q "$HERE/cloneA" || fail 9
cd ..
# Force remove gcc from cloneA.
cd cloneA
bk alias set $Q HERE `bk comps -h` || fail 10
bk here rm $Q -f gcc || fail 11
cd ..
# An add of gcc to cloneB should fail and remove cloneA from cloneB's urllist.
cd cloneB
bk here where gcc | grep -q "$HERE/cloneA" || fail 12
bk here add $Q gcc 2>ERR && fail 13
grep -q 'No other sources for ./gcc known' ERR || fail -f ERR
bk here where gcc | grep -q "$HERE/cloneA" && fail 15
cd ..
rm -rf cloneA cloneB
echo OK

echo $N Component rm prunes url if repo lacks needed rev ............$NL
cd "$HERE"
bk clone $Q product cloneA || fail
# Make a cset in cloneA/gcc.  We will roll it back after cloning to cloneB.
cd cloneA/gcc
echo new >new
bk new $Q new || fail 3
bk commit $Q -y'add new' || fail 4
bk -P commit $Q -y'add new' || fail 5
cd ../..
bk clone $Q cloneA cloneB || fail 6
# Roll back the cset.  Now cloneB/gcc can't be populated from cloneA.
cd cloneA
bk undo $Q -r+ -f || fail 7
cd ..
# Remove gcc from cloneB, then try to re-add which should fail and
# remove cloneA from cloneB's urllist.
cd cloneB
bk alias set $Q HERE `bk comps -h` || fail 8
bk here rm $Q -f gcc || fail 9
bk here where gcc | grep -q "$HERE/cloneA" || fail 10
bk here add $Q gcc 2>ERR && fail 11
grep -q 'No other sources for ./gcc known' ERR || fail -f ERR
bk here where gcc | grep -q "$HERE/cloneA" && fail 13
cd ..
rm -rf cloneA cloneB
echo OK

echo $N Component rm does not prune url if dest repo unreachable ....$NL
cd "$HERE"
bk bkd -q -aPORT -ikill || fail
P2=`cat PORT`
bk clone $Q bk://localhost:$P2/product cloneA || fail 2
bk _kill bk://localhost:$P2
# Force remove gcc from cloneA.
cd cloneA
bk here where gcc | grep -q "bk://.*:$P2/product" || fail 3
bk alias set $Q HERE `bk comps -h` || fail 4
bk here rm $Q -f gcc || fail 5
bk here where gcc | grep -q "bk://.*:$P2/product" || fail 6
# Attempt to populate cloneA/gcc from the now-now-existent bkd.
# This should fail and NOT prune cloneA's urllist.
bk here add gcc 2>ERR && fail 7
grep -q "connect failure" ERR || fail -f ERR
bk here where gcc | grep -q "bk://.*:$P2/product" || fail 9
cd ..
rm -rf cloneA
echo OK

echo $N Check component rm with -@ ..................................$NL
# Like above but use -@ in the bk here rm to make it succeed.
cd "$HERE"
bk clone $Q clone1 cloneA || fail
cd cloneA/gcc
echo new >new
bk new $Q new || fail 2
bk commit $Q -y'add new' || fail 3
cd "$HERE"
bk clone $Q cloneA cloneB || fail 4
rm -rf cloneA/gcc
cd cloneB
bk alias set $Q HERE `bk comps -h` || fail 5
bk here rm $Q -@"$HERE/product" ./gcc || fail 6
bk here where gcc | grep -q "$HERE/product" || fail 7
cd ..
rm -rf cloneA cloneB
echo OK

echo $N Check component add with -@ .................................$NL
cd "$HERE"
nested product2
cd ..
bk clone $Q product2 cloneA || fail
bk clone $Q product2 cloneB || fail 2
# Remove gcc from cloneA.  This succeeds b/c product2 has it.
cd cloneA
bk alias set $Q HERE `bk comps -h` || fail 3
bk here rm $Q gcc || fail 4
bk here where gcc | grep -q "$HERE/product2" || fail 5
# Remove product2 and try to add gcc (this should fail).
rm -rf ../product2
bk here add $Q gcc 2>ERR && fail 6
grep -q 'here: No other sources for ./gcc known' ERR || fail -f ERR
# Now try to add gcc with -@ from cloneB (this should work).
bk here add $Q -@../cloneB gcc || fail 8
bk here where gcc | grep -q "$HERE/cloneB" || fail 9
cd ..
rm -rf cloneA cloneB
echo OK

echo $N Local clone propagates urllist for unwanted components ......$NL
cd "$HERE"
bk clone $Q -sgcc clone1 clone3 || fail
cd clone3
# clone3 urllist should have product and clone1
bk comps -h | sort >GOT
cat <<EOF >WANT
./gcc
EOF
cmpfiles GOT WANT
bk here where gcc | grep -q "$HERE/product" || fail 2
bk here where gcc | grep -q "$HERE/clone1"  || fail 3
bk here where gdb | grep -q "$HERE/product" || fail 4
bk here where gdb | grep -q "$HERE/clone1"  || fail 5
cd ..
echo OK

echo $N Push adds dest to urllist for all pushed components .........$NL
cd "$HERE"
bk clone $Q clone1 clone7 || fail
bk clone $Q clone1 clone8 || fail 2
# Make a cset in clone7/gcc.
cd clone7/gcc
echo new >new
bk new $Q new || fail 3
bk commit $Q -y'add new' || fail 4
bk -P commit $Q -y'add new' || fail 5
# This cset removes gcc from clone7's urllist.
cd "$HERE/clone7"
bk here where gcc | grep -q "$HERE/clone1" && fail 6
bk here where gdb | grep -q "$HERE/clone1" || fail 7
# clone8 should still have clone1 for gcc and gdb.
cd "$HERE/clone8"
bk here where gcc | grep -q "$HERE/clone1" || fail 8
bk here where gdb | grep -q "$HERE/clone1" || fail 9
# The clone7->clone8 push should add clone8 to clone7's urllist for
# all components.
cd "$HERE/clone7"
bk push $Q "$HERE/clone8" || fail 10
bk here where gcc | grep -q "$HERE/clone1" && fail 11
bk here where gcc | grep -q "$HERE/clone8" || fail 12
bk here where gdb | grep -q "$HERE/clone1" || fail 13
bk here where gdb | grep -q "$HERE/clone8" || fail 14
# check that it saves timestamps
grep "$HERE/clone8" BitKeeper/log/urllist | grep -q '|' || \
	fail -f BitKeeper/log/urllist no time_t
echo OK

echo $N Push does not add dest for non-present components ...........$NL
cd "$HERE"
bk clone $Q clone1 clone9 || fail
bk clone $Q -sgcc clone1 cloneA || fail 2
cd clone9/gcc
echo new >new
bk new $Q new || fail 4
bk commit $Q -y'add new' || fail 5
bk -P commit $Q -y'add new' || fail 6
# This cset removes gcc from clone9's urllist.
cd ..
bk here where gcc | grep -q "$HERE/clone1" && fail 7
bk here where gdb | grep -q "$HERE/clone1" || fail 8
# The clone9->cloneA push should add cloneA to clone9's urllist only for
# the components present in cloneA, so gdb should not be added.
cd "$HERE/clone9"
bk push $Q "$HERE/cloneA" || fail 10
bk here where gcc | grep -q "$HERE/clone1" && fail 11
bk here where gcc | grep -q "$HERE/clone9" && fail 12
bk here where gdb | grep -q "$HERE/clone1" || fail 13
bk here where gdb | grep -q "$HERE/clone9" && fail 14
echo OK

echo $N Pull with merge does not add component to urllist ...........$NL
cd "$HERE"
bk clone $Q clone1 cloneB || fail
cd clone1/gcc
echo new1 >new1
bk new $Q new1 || fail 2
bk commit $Q -y'add new1' || fail 3
bk -P commit $Q -y'add new1' || fail 4
cd ../../cloneB/gcc
echo new2 >new2
bk new $Q new2 || fail 5
bk commit $Q -y'add new2' || fail 6
bk -P commit $Q -y'add new2' || fail 7
# This pull has a merge in gcc so gcc should not be re-added to
# cloneB's urllist.
cd ..
test -z "`bk here where gcc`" || fail 8
bk pull $Q ../clone1 || fail 9
test -z "`bk here where gcc`" || fail 10
echo OK

echo $N Pull without merge updates present component in urllist .....$NL
cd "$HERE"
bk clone $Q clone1 cloneC || fail
bk clone $Q clone1 cloneD || fail 2
bk clone $Q clone1 cloneE || fail 3
# Add cloneD to cloneC's urllist (gcc and gdb).
cd cloneC
bk here check -@../cloneD $Q || fail
cd ..
# Create a cset in cloneE/gcc.
cd cloneE/gcc
echo new2 >new2
bk new $Q new2 || fail 4
bk commit $Q -y'add new2' || fail 5
bk -P commit $Q -y'add new2' || fail 6
# Pull cloneE->cloneC.  The pull should remove all urls for gcc and add
# cloneE (the pull parent).
cd ../../cloneC
bk here where gcc | grep -q "$HERE/clone1" || fail 7
bk here where gcc | grep -q "$HERE/cloneD" || fail 8
bk pull $Q ../cloneE || fail 9
bk here where gcc | grep -q "$HERE/cloneE" || fail 10
bk here where gcc | grep -q "$HERE/cloneD" && fail 11
bk here where gcc | grep -q "$HERE/clone1" && fail 12
cd "$HERE"
rm -rf cloneC cloneD cloneE
echo OK

echo $N Pull without merge updates missing component in urllist .....$NL
cd "$HERE"
bk clone $Q -sgcc clone1 cloneC || fail
bk clone $Q clone1 cloneD || fail 2
bk clone $Q clone1 cloneE || fail 3
# Add cloneD to cloneC's urllist (gcc and gdb).
cd cloneC
bk here check -@../cloneD $Q || fail
cd ..
# Create a cset in cloneE/gcc.
cd cloneE/gcc
echo new2 >new2
bk new $Q new2 || fail 4
bk commit $Q -y'add new2' || fail 5
bk -P commit $Q -y'add new2' || fail 6
# Pull cloneE->cloneC.  The pull should add cloneE for gdb.
# we don't have gdb.
cd ../../cloneC
bk here where gdb | grep -q "$HERE/clone1" || fail 7
bk here where gdb | grep -q "$HERE/cloneD" || fail 8
bk pull --unsafe $Q ../cloneE || fail 9
bk here where gdb | grep -q "$HERE/cloneE" || fail 10
bk here where gdb | grep -q "$HERE/cloneD" || fail 11
bk here where gdb | grep -q "$HERE/clone1" || fail 12
cd "$HERE"
rm -rf cloneC cloneD cloneE
echo OK

echo $N Same but with present component not involved in merge .......$NL
cd "$HERE"
bk clone $Q clone1 cloneC || fail
bk clone $Q clone1 cloneD || fail 2
bk clone $Q clone1 cloneE || fail 3
# Add cloneD to cloneC's urllist (gcc and gdb).
cd cloneC
bk here check -@../cloneD $Q || fail
cd ..
# Create a cset in cloneE/gcc.
cd cloneE/gcc
echo new2 >new2
bk new $Q new2 || fail 4
bk commit $Q -y'add new2' || fail 5
bk -P commit $Q -y'add new2' || fail 6
# Pull cloneE->cloneC.  The pull should add cloneE for gdb even though
# we don't have gdb.
cd ../../cloneC
bk here where gdb | grep -q "$HERE/clone1" || fail 7
bk here where gdb | grep -q "$HERE/cloneD" || fail 8
bk pull $Q ../cloneE || fail 9
bk here where gdb | grep -q "$HERE/cloneE" || fail 10
bk here where gdb | grep -q "$HERE/cloneD" || fail 11
bk here where gdb | grep -q "$HERE/clone1" || fail 12
cd "$HERE"
rm -rf cloneC cloneD cloneE
echo OK

echo $N Same but with local changes in component ....................$NL
cd "$HERE"
bk clone $Q clone1 cloneC || fail
bk clone $Q clone1 cloneD || fail 2
bk clone $Q clone1 cloneE || fail 3
# Add cloneD to cloneC's urllist (gcc and gdb).
cd cloneC
bk here check -@../cloneD $Q || fail
cd ..
# Create a cset in cloneE/gcc.
cd "$HERE/cloneE/gcc"
echo new2 >new2
bk new $Q new2 || fail 4
bk commit $Q -y'add new2' || fail 5
bk -P commit $Q -y'add new2' || fail 6
# Create a cset in cloneC/gdb.
cd "$HERE/cloneC/gdb"
echo new >new
bk new $Q new || fail 7
bk commit $Q -y'add new' || fail 8
bk -P commit $Q -y'add new' || fail 9
# Pull cloneE->cloneC.  The pull should add nothing for gdb since
# it has local changes.
cd "$HERE/cloneC"
test -z "`bk here where gdb`" || fail 10
bk pull $Q ../cloneE || fail 11
# This next line is a regression test for a bug where the product
# rootkey got into the urllist.
bk here where | grep -q '^\.' && fail 12
test -z "`bk here where gdb`" || fail 13
cd "$HERE"
rm -rf cloneC cloneD cloneE
echo OK

echo $N Remote clone propagates urllist for cloned components .......$NL
cd "$HERE"
bk clone $Q product clone4 || fail
bk clone $Q clone4 bk://localhost:$P/clone5 || fail 2
cd clone5 || fail 3
bk comps -h | sort >GOT
cat <<EOF >WANT
./gcc
./gdb
EOF
cmpfiles GOT WANT
# clone5 should inherit clone4's urllist.
bk here where gcc | grep -q "$HERE/product" || fail 4
bk here where gdb | grep -q "$HERE/product" || fail 5
cd ..
echo OK

echo $N Remote clone propagates urllist for unwanted components .....$NL
cd "$HERE"
bk clone $Q -sgcc clone4 bk://localhost:$P/clone6 || fail
cd clone6
bk comps -h | sort >GOT
cat <<EOF >WANT
./gcc
EOF
cmpfiles GOT WANT
# clone6 should inherit clone4's urllist.
bk here where gcc | grep -q "$HERE/product" || fail 2
bk here where gdb | grep -q "$HERE/product" || fail 3
cd ..
echo OK

echo $N Urllist check: stand-alone repo .............................$NL
cd "$HERE"
commercial standalone
bk here check 2>ERR && fail
grep -q "must be in a nested" ERR || fail 2
echo OK

echo $N Urllist check: repo with no components ......................$NL
cd "$HERE"
bk setup -P -fc"$BK_CACHE/commercial.config" prod-empty || fail
cd prod-empty
bk here check $Q || fail 2
cd ..
echo OK

echo $N Urllist check: url of deleted repo ..........................$NL
cd "$HERE"
rm -rf clone clone2
bk clone $Q product clone || fail
# Clear out clone's urllist.
cd clone
bk here where rm || fail 2
cd ..
bk clone $Q clone clone2 || fail 3
cd clone2
bk here where gcc | grep -q "$HERE/clone" || fail 4
bk here where gdb | grep -q "$HERE/clone" || fail 5
cd ..
# Delete clone, then check the urllist of clone2 and verify that
# clone gets removed from clone2's urllist (leaving it empty).
rm -rf clone
cd clone2
bk here check $Q || fail 6
test -z "`bk here where gcc`" || fail 7
echo OK

echo $N Urllist check: url of missing component .....................$NL
cd "$HERE"
rm -rf clone clone2
bk clone $Q product clone || fail
# Clear out clone's urllist.
cd clone
bk here where rm || fail 2
cd ..
bk clone $Q clone clone2 || fail 3
cd clone2
bk here where gcc | grep -q "$HERE/clone" || fail 4
bk here where gdb | grep -q "$HERE/clone" || fail 5
cd ..
# Remove clone/gcc, then check the urllist of clone2 and verify that
# clone gets removed from clone2's urllist for gcc.
cd clone
bk alias set $Q HERE `bk comps -h` || fail 6
bk here rm $Q -f gcc || fail 7
cd ../clone2
bk here check $Q || fail 8
test -z "`bk here where gcc`" || fail 9
bk here where gdb | grep -q "$HERE/clone" || fail 10
echo OK

echo $N Urllist check: url of non-existent bkd ......................$NL
cd "$HERE"
rm -rf clone clone2
bk bkd -q -aPORT -ikill || fail
P2=`cat PORT`
bk clone $Q bk://localhost:$P2/product clone || fail 2
bk _kill bk://localhost:$P2
# Force remove gcc from clone.
cd clone
bk here where gcc | grep -q "bk://.*:$P2/product" || fail 3
bk alias set $Q HERE `bk comps -h` || fail 4
bk here rm $Q -f gcc || fail 5
bk here where gcc | grep -q "bk://.*:$P2/product" || fail 6
# Check clone's urllist.  Should get error msgs but urllist
# should not be pruned.
bk here check 2>ERR && fail 7
grep -q "connect failure" ERR || fail 8
grep -q "no valid urls found" ERR || fail 9
bk here where gcc | grep -q "bk://.*:$P2/product" || fail 10
bk here where gdb | grep -q "bk://.*:$P2/product" || fail 11
echo OK

echo $N Urllist check -c: url of non-existent bkd ...................$NL
cd "$HERE"
rm -rf clone clone2
bk bkd -q -aPORT -ikill || fail
P2=`cat PORT`
bk clone $Q bk://localhost:$P2/product clone || fail 2
bk _kill bk://localhost:$P2
# Force remove gcc from clone.
cd clone
bk here where gcc | grep -q "bk://.*:$P2/product" || fail 3
bk alias set $Q HERE `bk comps -h` || fail 4
bk here rm $Q -f gcc || fail 5
bk here where gcc | grep -q "bk://.*:$P2/product" || fail 6
# Check -c clone's urllist.  Should get error msgs and urllist
# should be pruned.
bk here check -c 2>ERR && fail 7
grep -q "connect failure" ERR || fail -f ERR
grep -q "no valid urls found" ERR || fail -f ERR
test -z "`bk here where`" || fail 10
bk here check 2>ERR && fail 11
grep -q "no valid urls found" ERR || fail -f ERR
echo OK

echo $N Demonstrate component named rm problem.......................$NL
cd "$HERE"
cd product
bk setup -a -f rm || fail
bk comps -h | grep -q rm || fail
cd "$HERE"
bk clone $Q product clone-rm
cd clone-rm
bk here where rm | grep -q "$HERE/product" && fail you fixed a bug
echo failed \(bug comp named rm\)

echo $N Test ordering of multiple URLS in populate ..................$NL
cd "$HERE"/product
RK=`(cd gdb; bk id -S)`
bk here set -f $Q ./gcc || fail

cat <<EOF > BitKeeper/log/urllist
@$RK
rsh://bad.bitkeeper.com:1/
ssh://localhost:1/
http://localhost:1/
bk://localhost:1/
bk://!junkurl:1/
$HERE/junk
bk://bad1.bitkeeper.com:1/|3000
bk://bad2.bitkeeper.com:1/|1000
bk://bad3.bitkeeper.com:1/|2000
http://bad.bitkeeper.com:1/
EOF
bk here add -@ssh://bad2.bitkeeper.com:1/ ./gdb 2> ERR && {
   fail -f ERR should have failed
}
cat <<EOF > WANT
here: searching ssh://bad2.bitkeeper.com:1/...connect failure
here: searching $HERE/junk...repo gone
here: searching bk://localhost:1/...connect failure
here: searching http://localhost:1/...connect failure
here: searching bk://bad1.bitkeeper.com:1/...connect failure
here: searching bk://bad3.bitkeeper.com:1/...connect failure
here: searching bk://bad2.bitkeeper.com:1/...connect failure
here: searching http://bad.bitkeeper.com:1/...connect failure
here: searching ssh://localhost:1/...connect failure
here: searching rsh://bad.bitkeeper.com:1/...connect failure
here: searching bk://!junkurl:1/...unknown failure
here: No other sources for ./gdb known
EOF
cmpfiles WANT ERR
echo OK

echo $N Demonstrate pull from a repo with no urllist ................$NL
cd "$HERE"
nested project2
rm -f BitKeeper/log/urllist
cd "$HERE"
bk clone $Q project2 project2-clone
cd project2
touch gcc/foo gdb/bar
bk new $Q gcc/foo gdb/bar
bk -e commit $Q -y'added files'
cd "$HERE"
bk bkd -q -aPORT -ikill || fail
P2=`cat PORT`
cd project2-clone
bk pull $Q bk://localhost:$P2/project2 >ERR 2>&1 || fail
# echo 'failed (bug: empty urllist)'
bk _kill bk://localhost:$P2
echo OK
