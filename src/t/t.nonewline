# Copyright 2000,2004-2006,2010-2011 BitMover, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Test the checkin and propogation of
#	1.1 file with newline
#	1.2 file without newline
#
#	1.1 file without newline
#	1.2 file with newline

echo $N Create initial repository ...................................$NL
commercial project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
echo OK

echo $N Create files with and without newlines ......................$NL
echo foo > X; 
bk undos -n X > foo.c
cp foo.c SAVEfoo.c
echo $N bar$NL > bar.c; cp bar.c SAVEbar.c
bk ci $Q -i foo.c bar.c 
if bk _test ! -f SCCS/s.foo.c; then echo failed to create history; exit 1; fi
if bk _test ! -f SCCS/s.bar.c; then echo failed to create history; exit 1; fi
bk get $Q foo.c bar.c
cmp -s foo.c SAVEfoo.c || { echo foo.c is wrong; diff foo.c SAVEfoo.c; exit 1; }
cmp -s bar.c SAVEbar.c || { echo bar.c is wrong; diff bar.c SAVEbar.c; exit 1; }
echo OK

echo $N Create a change set .........................................$NL
bk commit $S -ywhatever
echo OK
cores

echo $N Create a copy of the project ................................$NL
cd "$HERE"
bk clone $Q project copy
if [ ! -d copy ]; then echo failed to make top level directory; exit 1; fi
cd copy
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
echo OK

echo $N Check resynced files for newline status .....................$NL
echo foo > X
bk undos -n X > SAVEfoo.c
echo $N bar$NL > SAVEbar.c
if bk _test ! -f SCCS/s.foo.c; then echo failed to resync history; exit 1; fi
if bk _test ! -f SCCS/s.bar.c; then echo failed to resync history; exit 1; fi
bk get $Q foo.c bar.c
cmp -s foo.c SAVEfoo.c || { echo foo.c is wrong; diff foo.c SAVEfoo.c; exit 1; }
cmp -s bar.c SAVEbar.c || { echo bar.c is wrong; diff bar.c SAVEbar.c; exit 1; }
echo OK

echo $N Check including no newline deltas ...........................$NL
bk get $Q -e foo.c bar.c
echo $N trunk$NL >> foo.c
echo >> bar.c
echo $N trunk$NL >> bar.c
bk delta $Q -ytrunk foo.c bar.c
bk _get $Q -e -r1.1 foo.c bar.c
echo $N branch$NL >> foo.c
echo >> bar.c
echo $N branch$NL >> bar.c
bk delta $Q -ybranch foo.c bar.c
echo branch >> SAVEfoo.c
echo $N trunk$NL >> SAVEfoo.c
echo >> SAVEbar.c
echo branch >> SAVEbar.c
echo bar >> SAVEbar.c
echo $N trunk$NL >> SAVEbar.c
bk get $Q -e -M1.1.1.1 foo.c
bk get $Q -e -M1.1.1.1 bar.c
bk undos -n SAVEfoo.c > X
bk undos -n SAVEbar.c > Y
cmp -s foo.c X || { echo foo.c is wrong; diff foo.c SAVEfoo.c; exit 1; }
cmp -s bar.c Y || { echo bar.c is wrong; diff bar.c SAVEbar.c; exit 1; }
bk delta $Q -ymerge foo.c bar.c
bk get $Q foo.c bar.c
cmp -s foo.c X || { echo foo.c is wrong; diff foo.c SAVEfoo.c; exit 1; }
cmp -s bar.c Y || { echo bar.c is wrong; diff bar.c SAVEbar.c; exit 1; }
bk checksum foo.c bar.c || fail
echo OK

bk commit $S -ywhatever
echo $N Check for no newline changes back to project ................$NL
cd "$HERE/project"
bk pull $Q ../copy
cd "$HERE"
cp copy/X project/SAVEfoo.c
cp copy/Y project/SAVEbar.c
cd project
bk get $Q foo.c bar.c
cmp -s foo.c SAVEfoo.c || { echo foo.c is wrong; diff foo.c X; exit 1; }
cmp -s bar.c SAVEbar.c || { echo bar.c is wrong; diff bar.c Y; exit 1; }
echo OK

# This test more meaningful on WIN32 since diff is output to stdout
# and redirected to a file as 'text' altering '\r\n' to '\n' leading
# the output of normal diff to get translated.  Fix to io.c in same cset.
echo $N Last line carraige return with no linefeed ..................$NL
cd "$HERE"
commercial commercial
echo a > x
bk new $Q x
bk edit $Q x
printf "\r" >> x
bk delta $Q -fynone x || fail
SER=`bk prs -r+ -hnd:DS: x`
# XXX nice to have a better test.  When we get the check in the code: use it.
bk _scat x | grep -q '^.E '$SER'$' || {
	echo Fail
	echo Blank line tagged no newline
	exit 1
}
echo OK

echo $N No newline corner case with closing E after delete ..........$NL
cd "$HERE/project"
printf "a\nb" > afterdel
bk new $Q afterdel
bk edit $Q afterdel
printf "a\nc\n" > afterdel
bk delta $Q -y1.2 afterdel || fail
bk edit $Q afterdel
printf "a\nc\nd\n" > afterdel
bk delta $Q -y1.3 afterdel || fail
bk edit $Q -x1.2 afterdel
bk delta $Q -y1.4 afterdel || fail
bk _cp SCCS/s.afterdel afterdel.bkup
bk edit $Q afterdel
printf "a\nb\n" > afterdel
cp afterdel WANT
bk delta $Q -y1.4 afterdel || fail
bk get $Q afterdel
checkfiles WANT afterdel
bk checksum afterdel || fail
# run through it again, with gzipped sfile
bk _cp afterdel.bkup SCCS/s.afterdel
bk admin -Zgzip afterdel
bk edit $Q afterdel
printf "a\nb\n" > afterdel
bk delta $Q -y1.4 afterdel || fail
bk get $Q afterdel
checkfiles WANT afterdel
bk checksum afterdel || fail
echo OK

echo $N No newline corner case with closing E before delete .........$NL
# this mimics what customers hit - a merge case
# comes from fm3tool adding a newline at end of merge
# when it ideally should not.
# Also test that a line that starts with ^A gets right checksum
printf "a\n" > beforedel
bk new $Q beforedel
bk get $Q -e beforedel
printf "a\nb\n" > beforedel
bk delta $Q -ynewline beforedel
bk _get $Q -e -r1.1 beforedel
printf "a\n\001c" > beforedel
bk delta $Q -ynonewline beforedel
bk _cp SCCS/s.beforedel beforedel.bkup
bk get $Q -e -M1.1.1.1 beforedel
printf "a\n\001c\n" > beforedel
cp beforedel WANT
bk delta $Q -y'merge and delete end' beforedel
bk get $Q beforedel
checkfiles WANT beforedel
bk checksum beforedel || fail
# run through it again, with gzipped sfile
bk _cp beforedel.bkup SCCS/s.beforedel
bk admin -Zgzip beforedel
bk get $Q -e -M1.1.1.1 beforedel
printf "a\n\001c\n" > beforedel
bk delta $Q -y'merge and delete end' beforedel
bk get $Q beforedel
checkfiles WANT beforedel
bk checksum beforedel || fail
echo OK
