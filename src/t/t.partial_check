# Copyright (c) 2002 Wayne Scott
# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2002 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.
#
CHECKED=BitKeeper/log/checked

IDCACHE=BitKeeper/log/x.id_cache

echo $N Create initial repository ...................................$NL
commercial project
bk edit $Q BitKeeper/etc/config
BK_CONFIG='partial_check:yes!' bk config > c
cat c > BitKeeper/etc/config
bk ci $Q -yy BitKeeper/etc/config
echo 'keywords: %''A%' > keywords
bk new $Q keywords
bk commit $Q -yy
echo OK

echo $N Do rename on a pull and verify the idcache ..................$NL
echo hi > file
bk new $Q file
bk commit $Q -yy
cd ..
bk clone $Q project copy
cd copy
bk mv file file2
bk commit $Q -yy
cd ../project
# update the check timestamp
bk -r check -ac || exit 1
bk pull $Q ../copy || exit 1
bk _cat $IDCACHE | grep -q '|file|.* file2' || {
	echo idcache not updated!
}
echo OK

echo $N Clone and make sure we did not mess up keywords .............$NL
cd "$HERE"
BK_CONFIG='checkout:edit!' bk clone -l $Q project clone
cd clone
bk get -qp keywords > WANT
cmp -s WANT keywords && {
	echo failed to unexpand keywords
	exit 1
}
echo OK

echo $N Make sure partial check is partial at 23 hours old ..........$NL
# the patch only changes "file" so remove s.keyword
# so a partial check will pass and a full test will fail.
cd "$HERE/project"
bk unpull $Q -f
mv BitKeeper/tmp/unpull.patch PATCH
bk _mv SCCS/s.keywords x
touch NOW
CUR=`_mtime NOW`
# save this setup for the following tests
cd ..
tar cf TAR project
# okay, do this test
THEN=`expr $CUR - \( 23 \* 3600 \)`
cd project
bk takepatch -af PATCH || exit 1
echo OK

echo $N Make sure partial check is full at 25 hours old .............$NL
cd "$HERE"
rm -fr project
tar xf TAR
cd project
THEN=`expr $CUR - \( 25 \* 3600 \)`
bk _touch -t $THEN $CHECKED
bk takepatch -af PATCH 2> ERR && exit 1
grep -q "Missing file.*keywords" ERR || exit 1
echo OK

echo $N check_frequency = 13 days and test 12 days 23 hours - P .....$NL
cd "$HERE"
rm -fr project
tar xf TAR
cd project
THEN=`expr $CUR - \( 13 \* 24 \* 3600 \) + 3600`
bk _touch -t $THEN $CHECKED
BK_CONFIG="check_frequency: 13! " bk takepatch -af PATCH || exit 1
echo OK

echo $N check_frequency = 13 days and test 13 days 1 hour - F .......$NL
cd "$HERE"
rm -fr project
tar xf TAR
cd project
THEN=`expr $CUR - \( 13 \* 24 \* 3600 \) - 3600`
bk _touch -t $THEN $CHECKED
BK_CONFIG="check_frequency: 13! " bk takepatch -af PATCH 2> ERR && exit 1
grep -q "Missing file.*keywords" ERR || exit 1
echo OK

echo $N check_frequency = 15 days and test 13 days 23 hours - P .....$NL
cd "$HERE"
rm -fr project
tar xf TAR
cd project
THEN=`expr $CUR - \( 14 \* 24 \* 3600 \) + 3600`
bk _touch -t $THEN $CHECKED
BK_CONFIG="check_frequency: 15! " bk takepatch -af PATCH || exit 1
echo OK

echo $N check_frequency = 15 days and test 14 days 1 hour - F .......$NL
cd "$HERE"
rm -fr project
tar xf TAR
cd project
THEN=`expr $CUR - \( 14 \* 24 \* 3600 \) - 3600`
bk _touch -t $THEN $CHECKED
BK_CONFIG="check_frequency: 15! " bk takepatch -af PATCH 2> ERR && exit 1
grep -q "Missing file.*keywords" ERR || exit 1
echo OK

# For clone performance, check out an n-dim matrix of
#  partial check on or off
#  no DFILE marker on source side
#  pending / no pending files as part of clone
#  revision - none, tip, lower

cd "$HERE"
rm -fr project copy
RESULTS="$HERE/RESULTS"

theTest() {
	cd ..
	rm -f SLOW RAN_CHECK
	_BK_RAN_CHECK=../RAN_CHECK _BK_SLOW_WALK=../SLOW \
	    bk clone $Q ${1+$1} project copy || fail
	rm -fr copy
	cd project
}

echo $N Matrix clone tests to check performance assumptions .........$NL
# make 2 files (foo, bar) 1 cset (foo) 2 ready to be pending (foo, bar)
commercial project
touch foo bar
bk new $Q foo bar
bk commit $Q --tag=BASE -yfiles
bk edit $Q foo
echo foo > foo
bk delta $Q -yjustfoo foo
bk commit $Q -yjustfoo
# leave edited ready to make pending
bk edit $Q foo bar
echo life >> foo
echo life >> bar

for partial_check in off on; do
    BK_CONFIG="partial_check: $partial_check! "
    export BK_CONFIG
    for dfile in 0 1; do
	for rev in -r+ -rBASE "" -lrBASE -l; do
            for pending in 1 0; do
		bk -r check -ac
		if [ $dfile = 1 ]
		then	bk _touch BitKeeper/etc/SCCS/x.dfile
		else	bk _rm -f BitKeeper/etc/SCCS/x.dfile
		fi
	        test $pending = 1 && bk delta $Q -yboth foo bar
		theTest $rev
		printf "partial:$partial_check\t$rev\tD:$dfile P:$pending\t" \
		    >> "$RESULTS"
		test -f ../SLOW && printf "slow" >> "$RESULTS"
		test -f ../RAN_CHECK && printf "\tran-check" >> "$RESULTS"
		echo >> "$RESULTS"
	        test $pending = 1 && bk fix foo bar
	    done
        done
    done
done
cat <<'EOF' > WANT
partial:off	-r+	D:0 P:1	slow	ran-check
partial:off	-r+	D:0 P:0	slow	ran-check
partial:off	-rBASE	D:0 P:1	slow	ran-check
partial:off	-rBASE	D:0 P:0	slow	ran-check
partial:off		D:0 P:1	slow	ran-check
partial:off		D:0 P:0	slow	ran-check
partial:off	-lrBASE	D:0 P:1	slow	ran-check
partial:off	-lrBASE	D:0 P:0	slow	ran-check
partial:off	-l	D:0 P:1	slow	ran-check
partial:off	-l	D:0 P:0	slow	ran-check
partial:off	-r+	D:1 P:1		ran-check
partial:off	-r+	D:1 P:0		ran-check
partial:off	-rBASE	D:1 P:1		ran-check
partial:off	-rBASE	D:1 P:0		ran-check
partial:off		D:1 P:1		ran-check
partial:off		D:1 P:0		ran-check
partial:off	-lrBASE	D:1 P:1		ran-check
partial:off	-lrBASE	D:1 P:0		ran-check
partial:off	-l	D:1 P:1		ran-check
partial:off	-l	D:1 P:0		ran-check
partial:on	-r+	D:0 P:1	slow	ran-check
partial:on	-r+	D:0 P:0	slow
partial:on	-rBASE	D:0 P:1	slow	ran-check
partial:on	-rBASE	D:0 P:0	slow	ran-check
partial:on		D:0 P:1	slow	ran-check
partial:on		D:0 P:0	slow
partial:on	-lrBASE	D:0 P:1	slow	ran-check
partial:on	-lrBASE	D:0 P:0	slow	ran-check
partial:on	-l	D:0 P:1	slow	ran-check
partial:on	-l	D:0 P:0	slow
partial:on	-r+	D:1 P:1		ran-check
partial:on	-r+	D:1 P:0	
partial:on	-rBASE	D:1 P:1		ran-check
partial:on	-rBASE	D:1 P:0		ran-check
partial:on		D:1 P:1		ran-check
partial:on		D:1 P:0	
partial:on	-lrBASE	D:1 P:1		ran-check
partial:on	-lrBASE	D:1 P:0		ran-check
partial:on	-l	D:1 P:1		ran-check
partial:on	-l	D:1 P:0	
EOF
cmpfiles WANT "$RESULTS"
echo OK
