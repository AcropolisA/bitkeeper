# Theory of operation: start out with a clean single repository
# and chop it up a number of times into a nested collection and
# see if it has all the properities we want.
# 
#   src - a b c
#   doc - a b c
# 
# With the understanding that src and doc will be components,
# do some moves between src and doc and src and repo root.
# Then make src and doc a component.

set -e

echo $N Create initial repository ...................................$NL
commercial project
mkdir src doc
cd src
mkdir -p deep/prune/path/starts/here
touch a b c deep/prune/path/starts/here/a
bk new $Q a b c deep/prune/path/starts/here/a
cd ../doc
touch a b c
bk new $Q a b c
cd ..
bk commit $Q -SROOT -ybaseline
bk mv src/a a
bk commit $Q -ymoveit
# use for scompress verification
touch doc/tip
bk new $Q doc/tip
bk commit $Q -ydoc-tip
bk tag $Q TIP
cd ..
cat <<EOF > mapfile
# The source component
src

# The doc component
doc

# The deep component
src/deep/prune/path
src/deep/prune/path/starts/here
EOF
cat <<"EOF" > badmap
$HERE/project/src
$HERE/project/doc
EOF
echo OK

echo $N Test out command line .......................................$NL
bk partition 2> ERR && exit 1
grep -q "partition: must specify a -C<file> list" ERR || exit 1
bk partition a b 2> ERR && exit 1
grep -q "partition: must specify a -C<file> list" ERR || exit 1
bk partition -Cnotthere a b 2> ERR && exit 1
grep -q "partition: component list 'notthere' does not exist" ERR || exit 1
bk partition -Cmapfile notthere b 2> ERR && exit 1
grep -q "partition: source 'notthere' does not exist" ERR || exit 1
bk partition -Cmapfile project project 2> ERR && exit 1
grep -q "partition: destination 'project' exists" ERR || exit 1
echo OK

echo $N Run a simple test ...........................................$NL
bk partition $Q -Cmapfile project copy || exit 1
TOP=`cd copy && bk changes -r+ -nd:DS:`
COMP=`cd copy/doc && bk changes -r+ -nd:DS:`
test "$TOP" -gt "$COMP" || {
	echo failed scompress $TOP $COMP
	exit 1
}
cd copy/BitKeeper/etc
bk get $Q -S config
test -s config || echo empty config
cd ../../src/BitKeeper/etc
bk get $Q -S config
test -s config && echo non-empty config
# Check idache
cd "$HERE"/copy/src/deep/prune/path/starts/here
bk log -r+ -nd:ROOTKEY: ChangeSet > "$HERE"/dnrk
cd "$HERE"/copy
cat ../dnrk | bk key2path > GOT
echo src/deep/prune/path/starts/here/ChangeSet > WANT
checkfiles WANT GOT
cd "$HERE"
echo OK

echo $N See that bk names removes empty directories .................$NL
test -d copy/src/src && {
	echo failed
	find copy/src/src
	exit 1
}
echo OK

echo $N See that tags only happen in the product repo ...............$NL
cd copy/src
test 0 -eq `bk changes -r+ -nd'$if(:TAG:){tagged}' | wc -l` || {
	echo failed tags in component
	exit 1
}
cd ../doc
test 0 -eq `bk changes -r+ -nd'$if(:TAG:){tagged}' | wc -l` || {
	echo failed tags in component
	exit 1
}
cd ..
test 1 -eq `bk changes -r+ -nd'$if(:TAG:){tagged}' | wc -l` || {
	echo failed wrong number of tags in product
	exit 1
}
cd ..
echo OK

echo $N Test that files are checked out according to checkout .......$NL
test -f copy/src/b && {
	echo failed
	echo file checked out when none expected
	exit 1
}
rm -fr copy
_BK_DEVELOPER="" BK_CONFIG="checkout: get! " \
    bk partition $Q -Cmapfile project copy || exit 1
test -f copy/src/b || {
	echo failed
	echo no file checked out when one expected
	exit 1
}
echo OK

echo $N Test rollback without -X means src/a is there ...............$NL
cd copy
bk undo $Q -sfaROOT || exit 1
bk _test -f src/SCCS/s.a || {
	echo not there
	exit 1
}
cd ..
echo OK

echo $N Test rollback with -X means src/a is not there ..............$NL
bk partition $Q -X -Cmapfile project xcomps || exit 1
cd xcomps
bk undo $Q -sfaROOT || exit 1
bk _test -f src/SCCS/s.a && {
	echo there
	exit 1
}
cd ..
echo OK

echo $N Add a cset, run again, push to first partition ..............$NL
cd project
bk edit $Q a
bk delta $Q -fynull a
bk commit $Q -ya
cd ..
bk partition $Q -Cmapfile project copy2 || exit 1
cd copy2
bk push $Q ../copy 2> ERR || {
   echo push failed
   cat ERR
   exit 1
}
echo OK

echo $N Move a file between components and push again ...............$NL
# We need to prune history such that the first cset that shows
# up is a user space name as opposed to being created in the deleted
# directory as is now down.  This needs to be a part of csetprune
# and cset marks need to be regenerated for those files / csets.
cd "$HERE/project"
bk mv src/b doc/was-src-b
bk commit $Q -ya
cd ..
bk partition $Q -Cmapfile project copymv || exit 1
cd copymv
bk push $Q ../copy || {
	echo failed
	exit 1
}
echo OK

echo $N Remove empty components .....................................$NL
cd "$HERE"
echo empty/repo > emptymap
bk partition $Q -Cemptymap project empty || exit 1
test -d empty/empty && {
	echo failed
	exit 1
}
echo OK

echo $N Make a diamond graph moving a file into comp on trunk .......$NL
# This core dumped without accompanying fix
# The trick is to have a file born out of the component (in root)
# then move to the component, then have a newer cset change the
# file in its original out of component place.  In filterWeave()
# this will test parent and merge and both will be false.
cd "$HERE"
commercial trunk
touch foo
bk new $Q foo
bk commit $Q -yfoo
bk clone $Q . ../branch
mkdir src
bk mv foo src
bk commit $Q -yfoo
cd ../branch
bk edit $Q foo
bk delta $Q -fyfoo foo
bk commit $Q -yfoo
bk pull $Q
cd ..
echo src > map
bk partition $Q -X -Cmap branch parted
echo OK
