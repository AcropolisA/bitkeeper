# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.


# Copyright (c) 2001 Andrew Chang
# %K%

echo $N Create initial repository ...................................$NL
commercial project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -f SCCS/s.ChangeSet ]; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
echo OK

echo $N Create some data ............................................$NL
mkdir src
cd src
echo foo > foo.c
echo bar > bar.c
echo h > h.h
bk ci $Q -i foo.c bar.c h.h
echo OK

echo $N checkout:GET w admin ........................................$NL
bk edit $Q $HERE/project/BitKeeper/etc/config
echo "checkout:GET" >> $HERE/project/BitKeeper/etc/config
bk get $Q foo.c
sleep 1
bk admin -fRCS foo.c
bk commit $Q -ynew_stuff
if [ ! -f foo.c ]; then echo failed; exit 1; fi
if [ -w foo.c ]; then echo failed; exit 1; fi
if [ -f SCCS/p.foo.c ]; then echo failed; exit 1; fi
find SCCS -newer foo.c | grep SCCS/s.foo.c > /dev/null
if [ $? -eq 0 ]; then echo failed; exit 1; fi
echo OK

echo $N checkout:EDIT w admin .......................................$NL
bk unedit $HERE/project/BitKeeper/etc/config
bk edit $Q $HERE/project/BitKeeper/etc/config
echo "checkout:EDIT" >> $HERE/project/BitKeeper/etc/config
bk edit $Q foo.c
sleep 1
bk admin -FRCS foo.c
bk commit $Q -ynew_stuff
if [ ! -f foo.c ]; then echo failed; exit 1; fi
if [ ! -w foo.c ]; then echo failed; exit 1; fi
if [ ! -f SCCS/p.foo.c ]; then echo failed; exit 1; fi
find SCCS -newer foo.c | grep SCCS/s.foo.c > /dev/null
if [ $? -eq 0 ]; then echo failed; exit 1; fi
echo OK

echo $N checkout:EDIT w delta .......................................$NL
echo new >> foo.c
bk delta $Q -ynew foo.c
bk commit $Q -ynew_stuff
if [ ! -f foo.c ]; then echo failed; exit 1; fi
if [ ! -w foo.c ]; then echo failed; exit 1; fi
if [ ! -f SCCS/p.foo.c ]; then echo failed; exit 1; fi
find SCCS -newer foo.c | grep SCCS/s.foo.c > /dev/null
if [ $? -eq 0 ]; then echo failed; exit 1; fi
echo OK

echo $N checkout:GET w delta ........................................$NL
bk unedit $HERE/project/BitKeeper/etc/config
if [ ! -w $HERE/project/BitKeeper/etc/config ]; then echo failed; exit 1; fi
echo "checkout:GET" >> $HERE/project/BitKeeper/etc/config
sleep 1
bk admin -FSCCS foo.c
echo new2 >> foo.c
bk delta $Q -ynew foo.c
bk commit $Q -ynew_stuff
if [ ! -f foo.c ]; then echo failed; exit 1; fi
if [ -w foo.c ]; then echo failed; exit 1; fi
if [ -f SCCS/p.foo.c ]; then echo failed; exit 1; fi
find SCCS -newer foo.c | grep SCCS/s.foo.c > /dev/null
if [ $? -eq 0 ]; then echo failed; exit 1; fi
echo OK

echo $N checkout:GET w clone ........................................$NL
bk delta $Q -ycheckout_GET $HERE/project/BitKeeper/etc/config
bk commit $Q -ycheckout_GET
bk clone $Q $HERE/project $HERE/copy
if [ ! -f $HERE/copy/src/foo.c ]; then echo failed; exit 1; fi
if [ -w $HERE/copy/src/foo.c ]; then echo failed; exit 1; fi
if [ -f $HERE/copy/src/SCCS/p.foo.c ]; then echo failed; exit 1; fi
echo OK

echo $N checkout:GET w chmod ........................................$NL
test -x foo.c && { echo failed; exit 1; }
bk chmod 775 foo.c || exit 1
if [ ! -f foo.c ]; then echo failed; exit 1; fi
if [ -w foo.c ]; then echo failed; exit 1; fi
if [ -f SCCS/p.foo.c ]; then echo failed; exit 1; fi
test `bk prs -hr+ -nd:RWXMODE: foo.c` = "-rwxrwxr-x" || {
	echo failed
	bk prs -hr+ -nd:RWXMODE: foo.c
	exit 1
}
test "$PLATFORM" != "WIN32" && {
	test -x foo.c || { echo failed; exit 1; }
}
find SCCS -newer foo.c | grep SCCS/s.foo.c > /dev/null
if [ $? -eq 0 ]; then echo failed; exit 1; fi
bk stripdel $Q -r+ foo.c
echo OK

echo $N checkout:GET w bk admin -fSCCS ..............................$NL
bk edit $Q foo.c
echo '%M%' > foo.c
bk ci $Q -y'add keyword' foo.c || exit 1
bk admin -fSCCS foo.c || exit 1
f=`cat foo.c`
if [ X$f != Xfoo.c ]
then	echo 'failed (bug 2002-10-31-003)'
else	echo 'bug 2002-10-31-003 fixed! update test.'
	exit 1
fi

echo $N checkout:EDIT w clone .......................................$NL
bk undo -sqfr+ || exit 1
bk unedit $HERE/project/BitKeeper/etc/config
bk edit $Q $HERE/project/BitKeeper/etc/config
echo "checkout:EDIT" >> $HERE/project/BitKeeper/etc/config
bk delta $Q -ycheckout_EDIT $HERE/project/BitKeeper/etc/config
bk commit $Q -ycheckout_EDIT
bk clone $Q $HERE/project $HERE/copy2
if [ ! -f $HERE/copy2/src/foo.c ]; then echo failed 1; exit 1; fi
if [ ! -w $HERE/copy2/src/foo.c ]; then echo failed 2; exit 1; fi
if [ ! -f $HERE/copy2/src/SCCS/p.foo.c ]; then echo failed; exit 1; fi
echo OK

echo $N checkout:EDIT w chmod .......................................$NL
# 'unedit' will actually get the file to be check out edit (plocked)
bk unedit foo.c
test -w foo.c || { echo failed; exit 1; }
test -x foo.c && { echo failed; exit 1; }
bk chmod 775 foo.c || exit 1
if [ ! -f foo.c ]; then echo failed; exit 1; fi
if [ ! -w foo.c ]; then echo failed; exit 1; fi
if [ ! -f SCCS/p.foo.c ]; then echo failed; exit 1; fi
test `bk prs -hr+ -nd:RWXMODE: foo.c` = "-rwxrwxr-x" || {
	echo failed
	bk prs -hr+ -nd:RWXMODE: foo.c
	exit 1
}
test "$PLATFORM" != "WIN32" && {
	test -x foo.c || { echo failed; exit 1; }
}
find SCCS -newer foo.c | grep SCCS/s.foo.c > /dev/null
if [ $? -eq 0 ]; then echo failed; exit 1; fi
bk chmod 400 foo.c 2> CHMOD_WARN || {
	echo failed
	echo chmod 400 stderr:
	cat CHMOD_WARN
	exit 1
}
if [ ! -f foo.c ]; then echo failed; exit 1; fi
if [ ! -w foo.c ]; then echo failed; exit 1; fi
if [ ! -f SCCS/p.foo.c ]; then echo failed; exit 1; fi
test -x foo.c && { echo failed; exit 1; }
find SCCS -newer foo.c | grep SCCS/s.foo.c > /dev/null
echo OK


echo $N checkout:EDIT w resolve simple content change ...............$NL
cd $HERE/project
bk unedit BitKeeper/etc/config
bk edit $Q BitKeeper/etc/config
echo "checkout:EDIT" >> BitKeeper/etc/config
bk delta $Q -yEDIT BitKeeper/etc/config
bk commit $Q -yEDIT 
cd $HERE
bk clone $Q project edit_1
bk clone $Q project edit_2
cd $HERE/edit_1/src
echo new2 >> foo.c
bk delta $Q -ynew2 foo.c
bk commit $Q -ynew2
cd $HERE/edit_2/src
if [ ! -f $HERE/edit_2/src/foo.c ]; then echo failed 1; exit 1; fi
bk pull $Q $HERE/edit_1 || exit 1
if [ ! -f $HERE/edit_2/src/foo.c ]; then echo failed 1; exit 1; fi
if [ ! -w $HERE/edit_2/src/foo.c ]; then echo failed 2; exit 1; fi
if [ ! -f $HERE/edit_2/src/SCCS/p.foo.c ]; then echo failed; exit 1; fi
echo OK

echo $N checkout:EDIT w resolve simple flag change ..................$NL
cd $HERE/edit_1/src
bk admin $Q -fEXPAND1 foo.c
bk commit $Q -yflags_chg
cd $HERE/edit_2/src
bk pull $Q $HERE/edit_1
if [ ! -f $HERE/edit_2/src/foo.c ]; then echo failed 1; exit 1; fi
if [ ! -w $HERE/edit_2/src/foo.c ]; then echo failed 2; exit 1; fi
if [ ! -f $HERE/edit_2/src/SCCS/p.foo.c ]; then echo failed; exit 1; fi
echo OK

echo $N checkout:EDIT w resolve simple rename change ................$NL
cd $HERE/edit_1/src
bk mv foo.c foo1.c
bk commit $Q -yrename
cd $HERE/edit_2/src
bk pull $Q $HERE/edit_1
if [ ! -f $HERE/edit_2/src/foo1.c ]; then echo failed 1; exit 1; fi
if [ ! -w $HERE/edit_2/src/foo1.c ]; then echo failed 2; exit 1; fi
if [ ! -f $HERE/edit_2/src/SCCS/p.foo1.c ]; then echo failed; exit 1; fi
echo OK

echo $N checkout:EDIT w resolve automerge content change ............$NL
cd $HERE/edit_1/src
echo new3 >> foo1.c
bk delta $Q -ynew2 foo1.c
bk commit $Q -ynew2
cd $HERE/edit_2/src
grep -v "^new$" foo1.c > foo.tmp
cp foo.tmp foo1.c
bk delta $Q -ydelete_line_1 foo1.c
bk commit $Q -ydelete_line_1
bk pull $Q $HERE/edit_1
if [ ! -f $HERE/edit_2/src/foo1.c ]; then echo failed 1; exit 1; fi
if [ ! -w $HERE/edit_2/src/foo1.c ]; then echo failed 2; exit 1; fi
if [ ! -f $HERE/edit_2/src/SCCS/p.foo1.c ]; then echo failed; exit 1; fi
echo OK

echo $N checkout:EDIT w resolve automerge flag change ...............$NL
cd $HERE/edit_1/src
bk admin $Q -FEXPAND1 foo1.c
bk commit $Q -yflags_chg
cd $HERE/edit_2/src
bk admin -fEOLN_NATIVE foo1.c
bk commit $Q -yflags_chg
bk pull $Q $HERE/edit_1
if [ ! -f $HERE/edit_2/src/foo1.c ]; then echo failed 1; exit 1; fi
if [ ! -w $HERE/edit_2/src/foo1.c ]; then echo failed 2; exit 1; fi
if [ ! -f $HERE/edit_2/src/SCCS/p.foo1.c ]; then echo failed; exit 1; fi
echo OK

echo $N checkout:EDIT w resolve rename conflict .....................$NL
# remove some csets to bring it below limit in the regression env
cd $HERE/edit_1
bk undo $Q -sfa1.2 || exit 1
cd $HERE/edit_2
bk undo $Q -sfa1.2 || exit 1
cd $HERE/edit_1/src
bk mv foo.c foo2.c
bk commit $Q -yrename
cd $HERE/edit_2
bk unedit BitKeeper/etc/config
bk edit $Q BitKeeper/etc/config
echo "checkout:EDIT" >> BitKeeper/etc/config
cd src
bk mv foo.c foo3.c
bk commit $Q -yrename
bk pull -t $Q $HERE/edit_1 2> /dev/null <<EOF
r
EOF
if [ ! -f $HERE/edit_2/src/foo2.c ]; then echo failed 1; exit 1; fi
if [ ! -w $HERE/edit_2/src/foo2.c ]; then echo failed 2; exit 1; fi
if [ ! -f $HERE/edit_2/src/SCCS/p.foo2.c ]; then echo failed; exit 1; fi
echo OK

echo $N checkout:EDIT w undo ........................................$NL
cd $HERE/project
echo hi > hi
bk new $Q hi || exit 1
if [ ! \( -w hi -a -f SCCS/p.hi \) ]; then echo checkout failed; exit 1; fi
bk commit $Q -yaddhi || exit 1
echo bye >> hi
bk delta $Q -ybye hi || exit 1
if [ ! \( -w hi -a -f SCCS/p.hi \) ]; then echo checkout failed; exit 1; fi
bk commit $Q -yappendhi || exit 1
bk undo $Q -fr+ || exit 1
if [ ! \( -w hi -a -f SCCS/p.hi \) ]; then echo checkout failed; exit 1; fi
echo OK

echo $N checkout:EDIT w stripdel ....................................$NL
echo bye >> hi
bk delta $Q -ybye hi || exit 1
if [ ! \( -w hi -a -f SCCS/p.hi \) ]; then echo checkout failed; exit 1; fi
bk stripdel $Q -r+ hi || exit 1
if [ ! \( -w hi -a -f SCCS/p.hi \) ]; then echo checkout failed; exit 1; fi
echo OK

echo $N checkout:EDIT w names .......................................$NL
bk clean $Q hi
mv SCCS/s.hi SCCS/s.junk
bk -r names $Q
if [ ! \( -w hi -a -f SCCS/p.hi \) ]; then echo checkout failed; exit 1; fi
echo OK

echo $N checkout:EDIT w pull ........................................$NL
cd $HERE/copy2
bk pull $Q || exit 1
if [ ! -w hi ]
then	echo 'failed (bug 2002-05-10-002)'
	exit 1
fi
echo OK

echo $N checkout:EDIT w pull failure ................................$NL
cd $HERE/project/src
bk -Uur edit $Q
echo ss >> bar.c
echo dd >> foo.c
bk ci $Q -yy bar.c foo.c || exit 1
bk commit $Q -ydf || exit 1
cd $HERE/copy2/src
echo fff >> bar.c
bk pull $Q 2>OUT
if [ ! -w foo.c ]
then	echo 'failed (bug 2002-05-10-002)'
	exit 1
fi
bk abort -f 2> OUT
echo OK

echo $N checkout:EDIT w pull again ..................................$NL
bk unedit bar.c
bk pull $Q
if [ ! -w foo.c ]
then	echo failed
	exit 1
fi
if [ ! -w bar.c ]
then	echo failed
	exit 1
fi
echo OK

echo $N checkout:EDIT w fix -c ......................................$NL
bk fix -c 2> ERR || exit 1
test -s ERR && {
	echo ERR should be empty
	exit 1
}
x=`bk sfiles -c`
test "X$x" = "XSCCS/s.bar.c SCCS/s.foo.c" && {
	echo files not edited
	exit 1
}
test -f ../SCCS/p.ChangeSet && {
	echo ChangeSet file shouldn\'t be locked
	exit 1
}
bk sfiles -c | bk delta $Q -C -
bk commit -Y../SCCS/c.ChangeSet $Q || exit 1
echo OK

echo $N checkout:EDIT w bk cset -x ..................................$NL
bk cset $Q -x+ || exit 1
test -w foo.c -a -f SCCS/p.foo.c || {
	echo checkout of foo.c failed
	exit 1
}
echo OK

echo $N checkout:EDIT w bk unrm .....................................$NL
bk rm foo.c || exit 1
bk unrm -f foo.c > /dev/null || exit 1
test -w foo.c -a -f SCCS/p.foo.c || {
	echo checkout of foo.c failed
	exit 1
}
echo OK

echo $N checkout:none w pull ........................................$NL
cd $HERE
commercial pp
cd $HERE
bk clone $Q pp cc || exit 1
cd $HERE/pp
echo hi > file1
echo bye > file2
bk new $Q file1 file2
bk commit $Q -yy || exit 1
cd $HERE/cc
bk pull $Q || exit
if [ -f file1 -o -f file2 ]
then	echo files should not be fetched
	exit 1
fi
cd $HERE/pp
bk edit $Q file1
echo junk >> file1
bk ci $Q -yy file1
bk commit $Q -yy || exit 1
cd $HERE/cc
bk pull $Q || exit
if [ -f file1 -o -f file2 ]
then	echo files should not be fetched
	exit 1
fi
echo OK

echo $N verify BK_CONFIG overrides ..................................$NL
BK_CONFIG='foo:bar; foo2  : bar2 ; checkout : delete '
export BK_CONFIG
test X`bk _preference foo`X != XbarX && {
	echo override failed
	exit 1
}
test X`bk _preference foo2`X != Xbar2X && {
	echo override failed
	exit 1
}
test X`bk _preference checkout`X != XdeleteX && {
	echo override failed
	exit 1
}
unset BK_CONFIG
echo OK
