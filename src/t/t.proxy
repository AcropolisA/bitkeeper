test_proxy() {
	http_proxy=$1
	export http_proxy

	BK_TRACE_REMOTE=1 bk changes -qrbk-3.2.5 -nd:MD5KEY: \
		http://proxytest:14690/bugfix >OUT 2>ERR || {
		echo should not have failed
		cat OUT
		cat ERR
		exit 1
	}
	# the md5key cset in bk-stable changes this answer
	# so we accept both
	GOT=`cat OUT`
	test "$GOT" = 42f14254IYxNQ5WXknkqGmR_SESatA -o \
	     "$GOT" = 42f14254DlrMo6smkgf-qL6nG6TcJg || fail -f OUT
	grep -q "trying PROXY data.bitmover.com:3128" ERR || {
		echo did not use proxy
		cat ERR
		exit 1
	}
	grep -q "direct connection" ERR && {
		echo used direct connection
		cat ERR
		exit 1
	}
}

echo $N Verify that bkd access works through a proxy ................$NL
test_proxy http://data.bitmover.com:3128
echo OK

echo $N Repeat without http:// ......................................$NL
test_proxy data.bitmover.com:3128
echo OK

echo $N Repeat with http://data.bitmover.com \(missing port\) .........$NL
http_proxy=http://data.bitmover.com
export http_proxy
bk changes -qrbk-3.2.5 -nd:MD5KEY: http://proxytest:14690/bk-3.2.x >OUT 2>ERR
grep -q 'bk: ignoring malformed proxy' ERR || {
	echo "wrong error message"
	cat ERR
	exit 1
}
# ends up using direct connection
echo OK

# XXX need to test proxy authentication (Oscar?)

echo --- Test http conections via local proxy
bk bkd -q -d -aPORT -ikill
P=`cat PORT`
trap "bk _kill bk://localhost:$P" 0
commercial project
cd ..
http_proxy=http://localhost:3128
export http_proxy
HOST=`bk gethost -r`

echo $N Test rclone .................................................$NL
bk clone $Q project http://$HOST:$P/copy || exit 1
echo OK

echo $N Test clone ..................................................$NL
bk clone $Q http://$HOST:$P/copy copy2 || exit 1
echo OK

echo $N Test pull ...................................................$NL
cd project
echo hi > file
bk new -b $Q file || exit 1
bk commit $Q -ybam || exit 2
cd ../copy
bk pull $Q http://$HOST:$P/project || exit 1
bk lock -U ../project
echo OK

echo $N Test push ...................................................$NL
bk push $Q http://$HOST:$P/copy2 || exit 1
bk lock -U
echo OK

echo $N Test changes -L .............................................$NL
cd ../project
echo hi > bar
bk new $Q bar || exit 1
bk commit $Q -ybar || exit 2
KEY1=`bk prs -hnd:KEY: -r+ ChangeSet`
cd ../copy
echo hi > baz
bk new $Q baz || exit 3
bk commit $Q -ybaz || exit 4
KEY2=`bk prs -hnd:KEY: -r+ ChangeSet`
KEY=`bk changes -qnd:KEY: -L http://$HOST:$P/project`
test "$KEY" = "$KEY2" || exit 5
echo OK

echo $N Test changes -R .............................................$NL
KEY=`bk changes -qnd:KEY: -R http://$HOST:$P/project`
test "$KEY" = "$KEY1" || exit 1
echo OK
