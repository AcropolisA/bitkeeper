# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Tests for pull, push, and clone.
echo $N Create initial repository ...................................$NL
HERE=`${CWD}`
${ECHO} "logging: none" > $HERE/c
bk setup -f -n'BitKeeper Test repository' -c$HERE/c project
if [ ! -d project ]; then echo failed to make top level directory; exit 1; fi
cd project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -f SCCS/s.ChangeSet ]; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
mkdir src
cd src
echo foo > foo.c
echo bar > bar.c
echo h > h.h
bk ci $Q -i foo.c bar.c h.h
if [ ! -f SCCS/s.foo.c ]; then echo failed to create history; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 18 ]; then echo wrong pending result $P; bk pending; exit 1; fi
bk commit $S -f -yCset
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo failed to clear pending list; bk pending; exit 1; fi
echo OK
cores
echo $N Clone repository ............................................$NL
cd $HERE
bk clone $Q $HERE/project $HERE/copy || { echo failed; exit 1; }
[ -f copy/src/SCCS/s.foo.c ] || { echo failed; exit 1; }
[ -f copy/BitKeeper/log/parent ] || { echo no parent; exit 1; }
parent=`cat copy/BitKeeper/log/parent`
host=`bk gethost`
[ x$parent = x${host}:$HERE/project ] || { echo wrong parent $parent; exit 1; }
cd $HERE/project; checkLocks; cd $HERE/copy; checkLocks
echo OK
echo $N Pull with no changes in child ...............................$NL
cd $HERE/project/src
get $Q -e foo.c
echo delta two >> foo.c
delta $Q -y2 foo.c
bk commit $Q -y2
cd $HERE/copy
bk pull -t $Q || { echo failed; exit 1; }
revs=`prs -hd:I: src/foo.c | wc -l`
[ $revs -eq 2 ] || { echo failed; exit 1; }
cd $HERE/project; checkLocks; cd $HERE/copy; checkLocks
echo OK
if [ $DO_REMOTE = YES ]; then
 cd $HERE/copy
 echo $N Pull with explicit remote parent ............................$NL
 bk pull $Q localhost:$HERE/project || { echo failed; exit 1; }
 revs=`prs -hd:I: src/foo.c | wc -l`
 [ $revs -eq 2 ] || { echo failed; exit 1; }
 cd $HERE/project; checkLocks; cd $HERE/copy; checkLocks
 echo OK
 echo $N Pull with explicit remote parent and username ...............$NL
 cd $HERE/copy
 bk pull $Q $USER@localhost:$HERE/project || { echo failed; exit 1; }
 revs=`prs -hd:I: src/foo.c | wc -l`
 [ $revs -eq 2 ] || { echo failed; exit 1; }
 cd $HERE/project; checkLocks; cd $HERE/copy; checkLocks
 echo OK
else
 echo Pull with explicit remote parent ............................skipped
 echo Pull with explicit remote parent and username................skipped
fi
echo $N Pull with explicit local parent .............................$NL
cd $HERE/copy
bk pull $Q $HOSTNAME:$HERE/project || { echo failed; exit 1; }
revs=`prs -hd:I: src/foo.c | wc -l`
[ $revs -eq 2 ] || { echo failed; exit 1; }
cd $HERE/project; checkLocks; cd $HERE/copy; checkLocks
echo OK
echo $N Pull with explicit local parent and username ................$NL
bk pull $Q $USER@$HOSTNAME:$HERE/project || { echo failed; exit 1; }
revs=`prs -hd:I: src/foo.c | wc -l`
[ $revs -eq 2 ] || { echo failed; exit 1; }
echo OK
echo $N Pull from subdirectory of repository ........................$NL
cd src
bk pull $Q || { echo failed; exit 1; }
revs=`prs -hd:I: foo.c | wc -l`
[ $revs -eq 2 ] || { echo failed; exit 1; }
echo OK
echo $N Pull with mergeable changes in child ........................$NL
get $Q -e bar.c
echo line three >>bar.c
delta $Q -ythree bar.c
bk commit $Q -ythree
cd $HERE/project/src
get $Q -e bar.c
mv bar.c bar.x
echo line zero >bar.c
cat bar.x >>bar.c
rm -f bar.x
delta $Q -yzero
bk commit $Q -y0
cd $HERE/copy
bk pull -t $Q || { echo failed; exit 1; }
cd src
${CAT} >ref-bar.c <<EOF
line zero
bar
line three
EOF
get $Q bar.c
cmp -s ref-bar.c bar.c
[ $? -eq 0 ] || { echo failed; diff ref-bar.c bar.c; exit 1; }
echo OK
clean 
echo $N Push with no upstream deltas ................................$NL
bk push $Q || { echo failed; exit 1; }
mv ref-bar.c $HERE/project/src
cd $HERE/project/src
get $Q bar.c
cmp -s ref-bar.c bar.c
[ $? -eq 0 ] || { echo failed; diff ref-bar.c bar.c; exit 1; }
cd $HERE/project; checkLocks; cd $HERE/copy; checkLocks
echo OK
clean 
rm -f ref-bar.c
echo $N Push with an unrelated upstream delta .......................$NL
cd $HERE/project
date > stamp
delta $Q -i stamp
bk commit $Q -ytime
KEY="`bk prs -hd:KEY: -r+ ChangeSet`"
cd $HERE/copy/src
get $Q -e h.h
sed 's/h/qwerty/' <h.h >h.x
mv h.x h.h
delta $Q -ydvorak h.h
cd ..
bk commit $Q -yzxcvbnm
bk push -a $Q || { echo push w/ autopull failed; exit 1; }
cd $HERE/project
KEY2="`bk prs -hd:KEY: -r+ ChangeSet`"
[ "$KEY" = "$KEY2" ] || { echo bad push; exit 1; }
cd $HERE/project; checkLocks; cd $HERE/copy; checkLocks
echo OK
echo $N Push with a conflicting upstream delta ......................$NL
cd $HERE/project/src
get $Q -e h.h
sed 's/h/yuhjklbn/' <h.h >h.x
mv h.x h.h
delta $Q -yrogue h.h
cd ..
bk commit $Q -yrogue
KEY="`bk prs -hd:KEY: -r+ ChangeSet`"
cd $HERE/copy
bk push -a $Q 2> resolve.out
test $? -ne 0 || { echo failed; cat resolve.out; exit 1; }
grep -q 'unresolved conflicts, nothing is applied' resolve.out ||
    { cat resolve.out; exit 1; }
KEY2="`bk prs -hd:KEY: -r+ $HERE/project/ChangeSet`"
[ "$KEY" = "$KEY2" ] || { echo bad push; exit 1; }
echo OK
echo $N Resolve by hand and push again ..............................$NL
bk resolve $Q -F -t <<EOF >resolve.out 2>&1
m
C
whatever
.
u
EOF
[ $? -eq 0 ] || { echo resolve failed; cat resolve.out; exit 1; }
L=`get $Q -p src/h.h | wc -l`
[ $L -eq 5 ] || { echo merge failed; exit 1; }
cd $HERE/project; checkLocks; cd $HERE/copy; checkLocks
cd $HERE
cp -rp project project2
cp -rp project project3
cd copy
KEY="`bk prs -hd:KEY: -r+ ChangeSet`"
bk push $Q || { echo failed; exit 1; }
KEY2="`cd $HERE/project && bk prs -hd:KEY: -r+ ChangeSet`"
[ "$KEY" = "$KEY2" ] || { echo no push; exit 1; }
cd $HERE/project; checkLocks; cd $HERE/copy; checkLocks
echo OK
if [ $DO_REMOTE = YES -a X$NO_TTY = X ]; then
 echo $N Push with explicit remote parent ............................$NL
 cd $HERE/copy
 bk push -g $Q localhost:$HERE/project2 || { echo failed; exit 1; }
 KEY2="`cd $HERE/project2 && bk prs -hd:KEY: -r+ ChangeSet`"
 [ "$KEY" = "$KEY2" ] || { echo no push; exit 1; }
 cd $HERE/project; checkLocks; cd $HERE/copy; checkLocks
 echo OK
else
 echo Push with explicit remote parent ............................skipped
fi
