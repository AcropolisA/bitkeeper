# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Tests for pull, push, and clone.
echo $N Create initial repository ...................................$NL
commercial project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -f SCCS/s.ChangeSet ]; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
mkdir src
cd src
echo foo > 'F!O#O$ B%A^R&RR(R)RR'
echo bar > bar.c
echo h > h.h
bk ci $Q -i 'F!O#O$ B%A^R&RR(R)RR' bar.c h.h
if [ ! -f SCCS/s.'F!O#O$ B%A^R&RR(R)RR' ]; then echo failed to create history; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 15 ]; then echo wrong pending result $P; bk pending; exit 1; fi
bk commit $S -yCset
echo OK

echo $N pull to a repo with edited files should fail ................$NL
bk clone $Q $HERE/project $HERE/copy
cd $HERE/project/src
bk edit $Q bar.c h.h
echo new > bar.c
echo new > h.h
bk delta $Q -ynew_stuff bar.c h.h
bk commit $S -ynew_stuff
bk mv h.h h.newname || exit 1
cd $HERE/copy/src
bk edit $Q bar.c h.h
echo new2 > bar.c
echo new2 > h.h
bk pull > pull.out 2>&1 && {
	echo should have failed
	cat pull.out
	exit 1
}
# We test the output in t.miscbugs
echo OK

echo $N push to a repo with edited files should fail ................$NL
cd $HERE/project
bk push $HERE/copy > push.out 2>&1 && {
	echo should have failed
	cat push.out
	exit 1
}
grep -q "The following files are modified locally and in" push.out || exit 1
grep -q "	src/bar.c" push.out || exit 1
echo OK

echo $N pull into repo with edited non-locked files overwrites.......$NL
cd $HERE
rm -rf *
commercial project
echo bar > bar
bk new $Q bar || exit 1
bk commit $Q -ywhat || exit 1
cd $HERE
bk clone $Q project copy
cd project
bk edit $Q bar
echo foo >> bar
bk delta $Q -ywhat2 bar || exit 1
bk commit $Q -ywhat3 || exit 1
cd $HERE/copy
bk get $Q bar
chmod +w bar
echo foo2 >> bar
chmod -w bar
bk pull $Q
if [ $? -eq 0 ]; then
	# local changes lost!
	echo 'failed (bug 2001-05-11-001)'
else
	echo 'buf 2001-05-11-001 passing! update testcase.'
	exit 1
fi

echo $N check pull into busted repo containing part of a change......$NL
cd $HERE
rm -rf *
commercial project
mkdir src
echo bar > src/bar
bk new $Q src/bar || exit 1
bk commit $Q -ywhat1 || exit 1
bk edit $Q src/bar || exit 1
echo foo >> src/bar
bk delta $Q -ysecond src/bar || exit 1
bk commit $Q -ywhat1 || exit 1
cd ..
bk clone $Q project copy
cd copy
bk stripdel $Q -Cr+ ChangeSet
bk pull $Q || exit 1
echo OK

OS=`uname -s`
if [ "$OS" = "Linux" ]
then #-----------------------------------------------------------------
echo $N Make sure pull via pipe does not leave zombie process .......$NL
bk clone $Q $HERE/project $HERE/copy2
cd $HERE/project
bk lock -U
bk lock -tw > L &
bk lock -L
LOCKURL=`cat L`
cd $HERE/copy2
bk pull $HERE/project > /dev/null 2>&1 &
PULL_PID=$!
# Wait for pull to lock the repo
bk lock -L
sleep 1
ps alxwwwww 2>/dev/null | grep ${PULL_PID} | grep -q "defunc" && {
	echo failed
	kill -9 ${PULL_PID}
	bk _kill $LOCKURL
	exit 1
}
bk _kill $LOCKURL
bk lock -U	# wait for pull
bk lock -U $HERE/project
cd $HERE
rm -rf copy2
echo OK
fi #---------------------------------------------------------------------

