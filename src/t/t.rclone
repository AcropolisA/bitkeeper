# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Because some proxy disallow proxy to localhost
unsetHttpProxy

echo $N Create initial repository ...................................$NL
no_logging project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -f SCCS/s.ChangeSet ]; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
mkdir src
cd src
echo foo > 'F!O#O$ B%A^R&RR(R)RR'
echo bar > bar.c
echo h > h.h
bk ci $Q -i 'F!O#O$ B%A^R&RR(R)RR' bar.c h.h
if [ ! -f SCCS/s.'F!O#O$ B%A^R&RR(R)RR' ]; then echo failed to create history; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 15 ]; then echo wrong pending result $P; bk pending; exit 1; fi
bk commit $S -a -yCset
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo failed to clear pending list; bk pending; exit 1; fi
bk level 3
echo OK
cores

echo $N rClone via pipe .............................................$NL
cd $HERE
if [ X$PLATFORM = X"WIN32" ]; then SLASH="//"; else SLASH="/"; fi
bk _rclone $Q $HERE/project file:$SLASH$HERE/copy || { echo failed; exit 1; }
[ -f copy/src/SCCS/s.'F!O#O$ B%A^R&RR(R)RR' ] || { echo failed; exit 1; }
bk _rclone $Q -r1.1 $HERE/project $HERE/copy2 || { echo failed; exit 1; }
[ -d copy2 ] || { echo failed; exit 1; }
[ ! -f copy2/src/SCCS/s.'F!O#O$ B%A^R&RR(R)RR' ] || { echo failed; exit 1; }
cd $HERE/copy2
if [ "`bk level`" != "Repository level is 3" ]; then echo failed; exit 1; fi
echo OK

# In this test we call the rclone code via the bk clone interface
echo $N rClone via bk:// ............................................$NL
cd $HERE
rm -rf copy copy2
P=50000
bk bkd -q -p$P -c8
while [ $? -eq 2 ]
do      P=`expr $P + 1`
        bk bkd -q -p$P -c8
done 

bk clone $Q $HERE/project bk://localhost:$P/$HERE/copy
[ -f copy/src/SCCS/s.'F!O#O$ B%A^R&RR(R)RR' ] || { echo failed; exit 1; }
cd $HERE/copy
if [ "`bk level`" != "Repository level is 3" ]; then echo failed; exit 1; fi
echo OK

echo $N rClone via http:// ..........................................$NL
cd $HERE
bk clone $Q $HERE/project http://localhost:$P/$HERE/copy2
[ -f copy2/src/SCCS/s.'F!O#O$ B%A^R&RR(R)RR' ] || { echo failed; exit 1; }
cd $HERE/copy2
if [ "`bk level`" != "Repository level is 3" ]; then echo failed; exit 1; fi
cd $HERE
bk clone -r1.1 $Q project http://localhost:$P/copy3
[ -d copy3 ] || { echo failed; exit 1; }
[ ! -f copy3/src/SCCS/s.'F!O#O$ B%A^R&RR(R)RR' ] || { echo failed; exit 1; }
bk clone -EBK_TESTVAR=XYZ $Q project http://localhost:$P/copy4
[ -d copy4 ] || { echo failed; exit 1; }
[ -f copy4/src/SCCS/s.'F!O#O$ B%A^R&RR(R)RR' ] || { echo failed; exit 1; }
echo OK
# TODO test virtual host/root support

echo $N rClone to illegal path ......................................$NL
bk clone $HERE/project http://localhost:$P//tmp/foozz.$$ 2> OUT && {
       echo should have failed
       exit 1
}
grep -q 'illegal cd' OUT || {
       echo bad error message
       cat OUT
       exit 1
}
echo OK
echo $N Make sure rclone respect checkout preference ................$NL
cd $HERE/project/BitKeeper/etc
bk edit $Q config
echo "checkout:get" >> config
bk delta $Q -ynew_preference config
bk commit $Q -ynew_preference
if [ X$PLATFORM = X"WIN32" ]; then SLASH="//"; else SLASH="/"; fi
bk _rclone $Q $HERE/project file:$SLASH$HERE/copy5 || { echo failed; exit 1; }
cd $HERE/copy5
if [ ! -f src/bar.c ]; then echo failed; exit 1; fi
echo OK
