# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.


# Copyright (c) 2002 Larry McVoy
# %K%

BK_NO_HARDLINK_CLONE=1
export BK_NO_HARDLINK_CLONE

echo $N Create initial repositories .................................$NL
commercial project
bk -r check -ac	# Add's rootlog
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
cd ..
bk clone -q project clone || exit 1
bk clone -q project clone2 || exit 1
bk clone -q project clone3 || exit 1
echo OK

# Pointless to check this on windows, it needs fslayer lovin.
test -d project/.bk -a "$PLATFORM" = "WIN32" && exit 0

echo $N Try to relink them ..........................................$NL
NFILE=`bk sfiles project | wc -l`
NFILE=`expr $NFILE + 0`	# trim the white space
bk relink clone project 2>OUT || {
	cat OUT
	exit 1
}
grep -q "relinked $NFILE/$NFILE files, 0 different, 0 already linked." OUT || {
	echo Bad status message
	cat OUT
	echo wanted
	echo relinked $NFILE/$NFILE files, 0 different, 0 already linked.
	exit 1
}
echo OK

echo $N Try to relink them again, should already be linked ..........$NL
bk relink clone project 2>OUT || {
	cat OUT
	exit 1
}
grep -q "relinked 0/$NFILE files, 0 different, $NFILE already linked." OUT || {
	echo Bad status message
	cat OUT
	exit 1
}
echo OK

echo $N Try to relink multiple repositories at once .................$NL
bk relink clone* project 2>OUT || {
	cat OUT
	exit 1
}
grep -q "relinked $NFILE/$NFILE files, 0 different, 0 already linked." OUT || {
	echo Bad status message
	cat OUT
	exit 1
}
grep -q "relinked 0/$NFILE files, 0 different, $NFILE already linked." OUT || {
	echo Bad status message
	cat OUT
	exit 1
}
echo OK

echo $N Try to relink with read lock in the from repo, should fail ..$NL
L=`cd clone ; bk lock -rt`
bk relink clone project 2>OUT && {
	bk _kill $L
	echo Should have failed
	cat OUT
	exit 1
}
bk _kill $L
grep -q "relink: unable to write lock clone" OUT || {
	echo Bad status message
	cat OUT
	exit 1
}
echo OK

echo $N Try to relink with write lock in the from repo, should fail .$NL
L=`cd clone ; bk lock -wt`
bk relink clone project 2>OUT && {
	bk _kill $L
	echo Should have failed
	cat OUT
	exit 1
}
bk _kill $L
grep -q "relink: unable to write lock clone" OUT || {
	echo Bad status message
	cat OUT
	exit 1
}
echo OK

echo $N Try to relink with read lock in the to repo, should work ....$NL
cp -rp project relink
L=`cd project ; bk lock -rt`
bk relink relink project 2>OUT || {
	bk _kill $L
	cat OUT
	exit 1
}
bk _kill $L
grep -q "relinked $NFILE/$NFILE files, 0 different, 0 already linked." OUT || {
	echo Bad status message
	cat OUT
	exit 1
}
echo OK

echo $N Make sure that no args means relink to the parent ...........$NL
cd "$HERE/clone"
bk -r admin -z
MINE=`bk _stat SCCS/s.ChangeSet | awk -F\| '{print $2}'`
PARENT=`bk _stat "$HERE/project/SCCS/s.ChangeSet" | awk -F\| '{print $2}'`
bk relink 2>OUT || exit 1
grep -q "relinked $NFILE/$NFILE files, 0 different, 0 already linked." OUT || {
	echo Bad status message
	cat OUT
	exit 1
}
echo OK

echo $N Make sure that no args means use the parent inode ...........$NL
INO=`bk _stat SCCS/s.ChangeSet | awk -F\| '{print $2}'`
test $MINE = $INO && {
	echo failed
	exit 1
}
test $PARENT -eq $INO || {
	echo failed to use parent
	exit 1
}
echo OK

echo $N Make sure that no args means relink to all the parents ......$NL
cd "$HERE/clone"
bk parent -aq ../clone2
bk -r admin -z
bk relink 2>OUT || exit 1
grep -q "relinked $NFILE/$NFILE files, 0 different, 0 already linked." OUT || {
	echo Bad status message
	cat OUT
	exit 1
}
test `wc -l < OUT` -eq 2 || {
	echo should have had two relink lines
	cat OUT
	exit 1
}
echo OK
