BK_CONFIG="license:$BKL_PRO;licsign1:$BKL_P1;licsign2:$BKL_P2;licsign3:$BKL_P3"
export BK_CONFIG

checkbk()
{
	FEAT="$1"/BitKeeper/log/features

	grep -q BKFILE "$FEAT" || fail $FEAT missing BKFILE
	ENC=`bk prs -hnd:ENCODING: -r+ "$1"/ChangeSet`
	test X"$ENC" = XBK,bweave || fail "$1" not BKfile $ENC
	bk _test -f "$1"/SCCS/1.ChangeSet || fail no heap @ $1
	test -d "$1"/.bk/SCCS || fail $1 no remap

	# call recursively for all components
	bk repotype -q "$1" && {
		for c in `bk --cd="$1" comps -h`
		do    checkbk "$1"/"$c"
		done
	}
	true
}

checkascii()
{
	FEAT="$1"/BitKeeper/log/features

	test -f "$FEAT" || return
	grep -q BKFILE "$FEAT" && fail $FEAT has BKFILE
	ENC=`bk prs -hnd:ENCODING: -r+ "$1"/ChangeSet`
	test X"$ENC" = Xascii,gzip || fail "$1" is BKfile $ENC
	bk _test -f "$1"/SCCS/1.ChangeSet && fail heap @ $1
	test -d "$1"/SCCS || fail $1 not SCCS

	# call recursively for all components
	bk repotype -q "$1" && {
		for c in `bk --cd="$1" comps -h`
		do    checkascii "$1"/"$c"
		done
	}
	true
}

echo $N Test that bk setup creates BK sfiles by default .............$NL
touch c
bk setup -a -cc -f repo.bk || fail
checkbk repo.bk

bk setup -a -cc -f --compat repo.ascii || fail
checkascii repo.ascii
echo OK

echo $N Test that bk clone creates BK sfiles at the right time ......$NL
for f in ascii bk; do
	for t in "" "--compat" "--upgrade-repo"; do
		bk clone $Q $t repo.$f clone.$f$t || fail
	done
done

# all of these are ascii
checkascii clone.ascii
checkascii clone.ascii--compat
checkascii clone.bk--compat

# all of these are BK
checkbk clone.bk
checkbk clone.ascii--upgrade-repo
checkbk clone.bk--upgrade-repo

echo OK

echo $N Attach an ascii and BK standalone to ascii and BK nested ....$NL
bk setup -P -a -cc -f nest.bk || fail
checkbk nest.bk

bk setup -P -a -cc -f --compat nest.ascii || fail
checkascii nest.ascii

cd "$HERE"
for NEST in bk ascii; do
	bk setup -f nest.$NEST/newcomp || fail
	for C in bk ascii; do
		bk attach $Q "$HERE"/repo.$C nest.$NEST/comp.$NEST.$C || fail
	done
done

checkascii nest.ascii
checkbk nest.bk
echo OK

echo $N Setup a mixed/broken nested repository ......................$NL
bk clone $Q nest.ascii nest.ascii.mixed || fail
cd nest.ascii.mixed/newcomp
bk -r admin -B || fail
cd ..
bk repocheck $Q 2>ERR && fail should fail
cd ..
bk clone $Q --compat nest.ascii.mixed nest.ascii.fixed || fail
checkascii nest.ascii.fixed
echo OK


echo $N Undocumented form of attach is supported ....................$NL
bk setup -a -cc -f --compat repo.ascii-2 || fail
bk clone $Q repo.ascii-2 nest.bk/comp.ascii-2 || fail
cd nest.bk
bk attach $Q -N comp.ascii-2 || fail
checkbk .
echo OK

echo $N Pull sfio ...................................................$NL
cd "$HERE"
bk clone $Q --upgrade-repo repo.ascii repo.bin-copy
cd repo.ascii
echo new file > foo
bk new $Q foo
bk commit $Q -yfoo
cd ../repo.bin-copy
bk pull $Q || fail
echo new file > bar
bk new $Q bar
bk commit $Q -ybar
cd ../repo.ascii
bk pull $Q ../repo.bin-copy || fail
echo OK

echo $N Show that check fixes files with the wrong format ...........$NL
for h in ascii bk; do
	cd "$HERE"/repo.$h
	echo hi > file1
	echo bye > file2
	bk new $Q file1 file2
	if [ $h = ascii ]
	then	bk admin -B file1 file2
		bk admin -Bnone file2
	else
		bk admin -Bnone file1 file2
		bk admin -B file2
	fi
	bk repocheck -q 2>ERR && fail -f ERR should fail
	test `wc -l < ERR` -eq 1 || fail -f ERR
	grep -q "format wrong file1" ERR || fail
	_BK_DEVELOPER= bk repocheck $Q || fail
	bk repocheck $Q || fail should pass now
done
echo OK

echo $N Do a clone --upgrade-repo from an non-bweave BK repo ........$NL
cd "$HERE"
bk clone $Q nest.ascii nest.oldbk || fail
cd nest.oldbk

# fake upgrade ascii repo to use BK sfiles (still with SCCS dirs)
echo BKFILE >> BitKeeper/log/features
_BK_DEVELOPER= bk repocheck $Q || fail

bk -e --headers prs -hnd:ENCODING: -r+ ChangeSet > GOT || fail
cat <<EOF > WANT
#### 1/4 comp.ascii.ascii ####
BK
#### 2/4 comp.ascii.bk ####
BK
#### 3/4 newcomp ####
BK
#### 4/4 . ####
BK
EOF
cmpfiles GOT WANT
cd ..

# show --upgrade-repo switches to remap and bweave
bk clone $Q --upgrade-repo nest.oldbk nest.bin2bweave || fail
checkbk nest.bin2bweave
echo OK

echo $N Show that bSFILEv1 is removed when formats change ...........$NL
cd "$HERE"
bk clone $Q repo.ascii repo.bsfile || fail

# repo old bSFILEv1 repo
cd repo.bsfile
echo bSFILEv1 >> BitKeeper/log/features
_BK_DEVELOPER= bk repocheck $Q || fail

# simple clone keeps old feature
bk clone $Q . ../repo.bsfile-copy ||fail
grep -q bSFILEv1 ../repo.bsfile-copy/BitKeeper/log/features || fail

# --upgrade-repo upgrades to BKFILE
bk clone $Q --upgrade-repo . ../repo.bsfile-upgrade-repo || fail
checkbk ../repo.bsfile-upgrade-repo
grep -q bSFILEv1 ../repo.bsfile-upgrade-repo/BitKeeper/log/features && fail

# --compat clears feature
bk clone $Q --compat . ../repo.bsfile-compat || fail
checkascii ../repo.bsfile-compat
# the file should be gone
test -f ../repo.bsfile-compat/BitKeeper/log/features && fail
echo OK

