# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.


# Copyright (c) 1999 Andrew Chang?
# %K%

HERE=`bk pwd`
echo $N Create initial repository ...................................$NL
no_logging project
bk admin -Z
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -f SCCS/s.ChangeSet ]; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
echo OK

echo $N Create some data ............................................$NL
mkdir src
cd src
echo foo > foo.c
echo bar > bar.c
echo h > h.h
bk ci $Q -i foo.c bar.c h.h
if [ ! -f SCCS/s.foo.c ]; then echo failed to create history; exit 1; fi
echo OK
echo $N Check pending ...............................................$NL
P=`bk pending | wc -l`
if [ $P -ne 15 ]; then echo wrong pending result $P; bk pending; exit 1; fi
echo OK
echo $N Create a change set with a symbol with spaces in it .........$NL
bk commit $S -a -yCset -S"Hi there this is a changeset"
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo failed to clear pending list; bk pending; exit 1; fi
bk -R get $S -p ChangeSet > TOT
bk -R get $S -pr"Hi there this is a changeset" ChangeSet > SYM
cmp -s TOT SYM
if [ $? != 0 ]
then	echo failed
	diff TOT SYM
	exit 1
fi
echo OK

echo $N Try to commit an empty cset .................................$NL
cd $HERE/project
bk edit $Q ChangeSet
bk commit $Q
# make sure "bk commit" did not change the mode of the ChangeSet file
writable ChangeSet || { echo failed; exit 1; }
echo OK

echo $N Try to commit via stdin .....................................$NL
cd $HERE/project/src
bk co $Q -l h.h
date > h.h
bk ci $Q -ytest_cmt1 h.h
date > t.c
bk ci $Q -ytest_cmt2 -i t.c
bk -R sfiles -C | bk commit $Q -ycmt3 -
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo wrong pending result $P; bk pending; exit 1; fi
cat > X <<EOF
ChangeSet${BK_FS}ChangeSet${BK_FS}1.2${BK_FS}ChangeSet${BK_FS}1.3
src/h.h${BK_FS}src/h.h${BK_FS}1.1${BK_FS}src/h.h${BK_FS}1.2
src/t.c${BK_FS}src/t.c${BK_FS}1.0${BK_FS}src/t.c${BK_FS}1.1
EOF
bk undos X > CMP1
bk -R rset -hr1.2,1.3 > CMP2
cmp -s CMP1 CMP2
if [ $? -ne 0 ]; then echo failed; cat CMP2; exit 1; fi
echo OK

echo $N Try to commit via -f ........................................$NL
cd $HERE/project/src
bk co $Q -l h.h
echo new-stuff > h.h
bk ci $Q -ytest_cmt1 h.h
date > q.c
bk ci $Q -ytest_cmt2 -i q.c
bk -R sfiles -C > $HERE/flist
bk commit $Q -ycmt4 -f$HERE/flist 
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo wrong pending result $P; bk pending; exit 1; fi
cat > X <<EOF
ChangeSet${BK_FS}ChangeSet${BK_FS}1.3${BK_FS}ChangeSet${BK_FS}1.4
src/h.h${BK_FS}src/h.h${BK_FS}1.2${BK_FS}src/h.h${BK_FS}1.3
src/q.c${BK_FS}src/q.c${BK_FS}1.0${BK_FS}src/q.c${BK_FS}1.1
EOF
bk undos X > CMP1
bk -R rset -hr1.3,1.4 > CMP2
diff -u CMP1 CMP2 
cmp -s CMP1 CMP2
if [ $? -ne 0 ]; then echo failed; cat CMP2; exit 1; fi
echo OK

echo $N Try to send a logging patch .................................$NL
cd $HERE/project
bk makepatch $Q -e1.0..1.2 > $HERE/patch
mkdir -p $HERE/proj_log
cd $HERE/proj_log
bk takepatch -aL < $HERE/patch
bk -r check -a || { echo failed; exit 1; }
cd $HERE/project
bk push $Q -e $HERE/proj_log
cd $HERE/proj_log
bk -r check -a || { echo failed; exit 1; }
echo OK

echo $N Make sure we reject logging patch in a regular repository ...$NL
bk clone $Q -r1.1 $HERE/project $HERE/copy
cd $HERE/copy
bk takepatch -aL < $HERE/patch || exit 1
while [ -f PENDING/2*[0-9] -o -f PENDING/lock ]
do	sleep 1
done
grep -q "can't apply a logging patch to a regular file" PENDING/BAD.*.log
if [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK

echo $N Make sure we reject regular patch in a logging repository ...$NL
cd $HERE/project
bk makepatch $Q -r1.0..1.2 > $HERE/patch
bk clone $Q -r1.1 $HERE/proj_log $HERE/proj_log2
cd $HERE/proj_log2
bk takepatch  -a < $HERE/patch 2> tk.out
if [ $? -eq 0 ]; then echo failed; exit 1; fi
grep -q "can't apply a regular patch to a logging file" tk.out
if [ $? -ne 0 ]; then echo faile; exit 1; fi
echo OK

echo $N Make sure we do not auto merge logging patch ................$NL
cd $HERE/proj_log; bk undo $Q -f -r1.2..
bk clone $Q -r1.2 $HERE/project $HERE/copy1
bk clone $Q -r1.2 $HERE/project $HERE/copy2
bk edit $Q $HERE/copy1/src/h.h
bk edit $Q $HERE/copy2/src/h.h
date >  $HERE/copy1/src/h.h
date >  $HERE/copy2/src/h.h
bk delta $Q -ycopy1-chg  $HERE/copy1/src/h.h
bk delta $Q -ycopy2-chg  $HERE/copy2/src/h.h
cd $HERE/copy1; bk commit $Q -ycopy1-cset
cd $HERE/copy2; bk commit $Q -ycopy2-cset
cd $HERE/copy1; bk push $Q -e $HERE/proj_log
cd $HERE/copy2
bk makepatch $Q -e1.3 > $HERE/patch
cd $HERE/proj_log
bk takepatch  $Q -a < $HERE/patch
cd $HERE/proj_log
bk -r check -a
echo OK

#echo $N Test for path conflict ......................................$NL
#cd $HERE/proj_log
#bk undo $Q -f -r1.2.1.1,1.3
#cd $HERE/copy1/src
#date >  new.c
#bk new $Q -ycopy1-new new.c
#bk commit $Q -ycopy1-new
#bk push $Q -e $HERE/proj_log
#cd $HERE/copy2/src
#date >  new.c
#bk new $Q -ycopy2-new new.c
#bk commit $Q -ycopy2-new
#bk makepatch $Q -e1.0.. > $HERE/patch
#cd $HERE/proj_log
#bk takepatch $Q < $HERE/patch
#bk resolve -d -t -c
#echo SKIPPED

echo $N Try to resolve into a tree with no write permission .........$NL
cd $HERE
rm -rf copy
bk clone $Q project copy
cd project/src
touch NEWFILE
bk new $Q NEWFILE
bk commit $Q -yNEWFILE 
cd $HERE/copy
chmod 555 src
bk pull $Q > OUT 2>&1
grep -q 'No write permission: src' OUT || {
	echo bad error message from pull
	cat OUT
	chmod +w src
	exit 1
}
chmod +w src
echo OK

echo $N Try a commit -Yfile .........................................$NL
cd $HERE/project
echo arg > foo
bk new $Q foo || exit 1
echo line1 > comment
echo line2 >> comment
bk commit $Q -Ycomment || exit 1
if [ ! -f comment ]; then echo dont delete file; exit 1; fi
bk prs -r+ -hd:COMMENTS: ChangeSet > C1
bk undos > C2 <<EOF
C line1
C line2
EOF
cmp -s C1 C2
if [ $? -ne 0 ]; then echo Failed to set correct comments.; exit 1; fi
echo OK

echo $N Try a commit -Ymissingfile ..................................$NL
cd $HERE/project
bk edit $Q foo || exit
echo arg2 >> foo
bk delta $Q -yjunk foo || exit 1
bk commit $Q -Ynocomment 2> /dev/null
if [ $? -eq 0 ]; then echo failed; exit 1; fi
bk pending > C
grep 'foo@1.2' C > /dev/null || exit 1
echo OK
