# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.


# Copyright (c) 1999 Andrew Chang?
# %K%

echo $N Create initial repository ...................................$NL
commercial project
bk admin -Z
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if bk _test ! -f SCCS/s.ChangeSet; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
echo OK

echo $N Create some data ............................................$NL
mkdir src
cd src
echo foo > foo.c
echo bar > bar.c
echo h > h.h
bk ci $Q -i foo.c bar.c h.h
if bk _test ! -f SCCS/s.foo.c; then echo failed to create history; exit 1; fi
echo OK
echo $N Check pending ...............................................$NL
P=`bk pending | wc -l`
if [ $P -ne 15 ]; then echo wrong pending result $P; bk pending; exit 1; fi
echo OK
echo $N Create a change set with a symbol with spaces in it .........$NL
bk commit $S -yCset --tag="Hi there this is a changeset"
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo failed to clear pending list; bk pending; exit 1; fi
bk -R get $S -p ChangeSet > TOT
bk -R get $S -pr"Hi there this is a changeset" ChangeSet > SYM
cmp -s TOT SYM
if [ $? != 0 ]
then	echo failed
	diff TOT SYM
	exit 1
fi
echo OK

echo $N Try to commit an empty cset .................................$NL
cd "$HERE/project"
bk edit $Q ChangeSet
bk commit $Q
# make sure "bk commit" did not change the mode of the ChangeSet file
writable ChangeSet || { echo failed; exit 1; }
echo OK

echo $N Try to commit via stdin .....................................$NL
cd "$HERE/project/src"
bk co $Q -l h.h
date > h.h
bk ci $Q -ytest_cmt1 h.h
date > t.c
bk ci $Q -ytest_cmt2 -i t.c
bk -R sfiles -pC | bk commit $Q -ycmt3 -
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo wrong pending result $P; bk pending; exit 1; fi
cat > X <<EOF
ChangeSet${BK_FS}ChangeSet${BK_FS}1.2${BK_FS}ChangeSet${BK_FS}1.3
src/h.h${BK_FS}src/h.h${BK_FS}1.1${BK_FS}src/h.h${BK_FS}1.2
src/t.c${BK_FS}src/t.c${BK_FS}1.0${BK_FS}src/t.c${BK_FS}1.1
EOF
bk undos X > CMP1
bk -R rset -hr1.2,1.3 > CMP2
cmp -s CMP1 CMP2
if [ $? -ne 0 ]; then echo failed; cat CMP2; exit 1; fi
echo OK

echo $N Try to commit via -l ........................................$NL
cd "$HERE/project/src"
bk co $Q -l h.h
echo new-stuff > h.h
bk ci $Q -ytest_cmt1 h.h
date > q.c
bk ci $Q -ytest_cmt2 -i q.c
bk -R sfiles -pC > "$HERE/flist"
bk commit $Q -ycmt4 -l"$HERE/flist" 
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo wrong pending result $P; bk pending; exit 1; fi
cat > X <<EOF
ChangeSet${BK_FS}ChangeSet${BK_FS}1.3${BK_FS}ChangeSet${BK_FS}1.4
src/h.h${BK_FS}src/h.h${BK_FS}1.2${BK_FS}src/h.h${BK_FS}1.3
src/q.c${BK_FS}src/q.c${BK_FS}1.0${BK_FS}src/q.c${BK_FS}1.1
EOF
bk undos X > CMP1
bk -R rset -hr1.3,1.4 > CMP2
bk diff -u CMP1 CMP2 
cmp -s CMP1 CMP2
if [ $? -ne 0 ]; then echo failed; cat CMP2; exit 1; fi
echo OK

echo $N Check that missing edited gfile does not abort takepatch ....$NL
cd "$HERE/project"
echo "foo" > aaa
bk new $Q aaa
bk commit $Q -y'add aaa' aaa
bk clone $Q "$HERE/project" "$HERE/proj_takepatch"
bk edit $Q aaa
echo "bar" >> aaa
bk ci $Q -y'add bar' aaa
bk commit $Q -y'add bar to aaa' aaa
bk makepatch $Q -r+ > "$HERE/patch"
cd "$HERE/proj_takepatch"
bk edit $Q aaa
rm aaa
bk takepatch -a < "$HERE/patch" || { echo takepatch failed >&2; exit 1; }
echo OK

#echo $N Test for path conflict ......................................$NL
#cd "$HERE/proj_log"
#bk undo $Q -f -r1.2.1.1,1.3
#cd "$HERE/copy1/src"
#date >  new.c
#bk new $Q -ycopy1-new new.c
#bk commit $Q -ycopy1-new
#bk push $Q -e "$HERE/proj_log"
#cd "$HERE/copy2/src"
#date >  new.c
#bk new $Q -ycopy2-new new.c
#bk commit $Q -ycopy2-new
#bk makepatch $Q -e.. > "$HERE/patch"
#cd "$HERE/proj_log"
#bk takepatch $Q < "$HERE/patch"
#bk resolve -d -c
#echo SKIPPED

echo $N Try to resolve into a tree with no write permission .........$NL
cd "$HERE"
rm -rf copy
bk clone $Q project copy
cd project/src
touch NEWFILE
bk new $Q NEWFILE
bk commit $Q -yNEWFILE 
cd "$HERE/copy"
chmod 555 src
bk pull $Q > OUT 2>&1
grep -q 'No write permission: src' OUT || {
	echo bad error message from pull
	cat OUT
	chmod +w src
	exit 1
}
chmod +w src
echo OK

echo $N Try a commit -Yfile .........................................$NL
cd "$HERE/project"
echo arg > foo
bk new $Q foo || exit 1
echo line1 > comment
echo line2 >> comment
bk commit $Q -Ycomment || exit 1
if [ ! -f comment ]; then echo dont delete file; exit 1; fi
bk prs -r+ -hd:COMMENTS: ChangeSet > C1
bk undos > C2 <<EOF
C line1
C line2
EOF
cmp -s C1 C2
if [ $? -ne 0 ]; then echo Failed to set correct comments.; exit 1; fi
echo OK

echo $N Try a commit -Ymissingfile ..................................$NL
cd "$HERE/project"
bk edit $Q foo || exit
echo arg2 >> foo
bk delta $Q -yjunk foo || exit 1
bk commit $Q -Ynocomment 2> /dev/null
if [ $? -eq 0 ]; then echo failed; exit 1; fi
bk pending > C
grep 'foo@1.2' C > /dev/null || exit 1
echo OK

cleanf() {
	cd F:/
	rm -fr OUT ERR project SCCS BitKeeper
	cd "$HERE"
}

echo $N Test for a repo in the root and at the root of a USB drive ..$NL
if [ "X$PLATFORM" = "XWIN32" -a -d f:/tmp ]; then
	cleanf
	cd F:/
	commercial project
	bk root > OUT || {
		echo failed good root
		cleanf
		exit 1
	}
	grep -q "F:/project" OUT || {
		echo failed good grep
		cleanf
		exit 1
	}
	mv BitKeeper SCCS ..
	cd ..
	bk root 2> ERR && {
		echo passed root at root
		cleanf
		exit 1
	}
	grep -q "cannot find package root" ERR || {
		echo failed bad grep
		cleanf
		exit 1
	}
	cleanf
	echo OK
else
	echo skipped
fi
