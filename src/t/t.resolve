# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Copyright (c) 2002 Wayne Scott
# %K%

test "$PLATFORM" = "WIN32" && USER=`bk getuser -r`

echo $N Test resolving file missing a newline .......................$NL
commercial proj
echo line 1 > file
bk new $Q file || exit 1
bk commit $Q -ystart || exit 1
cd $HERE
bk clone $Q proj copy
cd proj
bk edit $Q file
echo $NX new line without NL $NXL >> file
cp file ../file.bak
bk delta $Q -ynonl file || exit 1
bk commit $Q -ynew_remote || exit 1
cd $HERE/copy
bk edit $Q file
echo new line with NL >> file
bk delta $Q -ynl file || exit 1
bk commit $Q -ynew_local || exit 1
_BK_PREVENT_RESOLVE_RERUN=1 bk pull $Q 2> OUT && {
	echo should not pass
	exit 1
}
grep -q 'Conflicts during automerge of file' OUT || {
	echo pull should have had conflict
	bk cat file
	cat OUT
	exit 1
}
echo ur | bk resolve $Q -t 2>OUT || {
	echo resolve should work
	cat OUT
	exit 1
}
bk get $Q file || exit 1
cmp -s file ../file.bak || {
	echo file did not match remote
	exit 1
}
echo OK

echo $N Test exiting out a resolve early deleting files .............$NL
bk unpull -f $Q || exit 1
bk edit $Q file || exit 1
_BK_PREVENT_RESOLVE_RERUN=1 bk pull $Q 2> OUT && {
	echo should not pass
	exit 1
}
grep -q 'Conflicts during automerge of file' OUT || {
	echo pull should have had conflict
	exit 1
}
echo q | bk resolve $Q -t 2>OUT && {
	echo resolve should have failed
	exit 1
}
test -w file || {
	echo file should be writable
	exit 1
}
test -f SCCS/p.file || {
	echo file should be locked
	exit 1
}
echo OK

echo $N Test permission problems in resolve .........................$NL
cd $HERE/proj
mkdir dir1
echo ff > dir1/ff
mkdir dir2
echo gg > dir2/gg
echo "space me" > "dir2/space file"
bk new $Q dir1/ff dir2/gg "dir2/space file" || exit 1
bk commit $Q -ystart || exit 1
mkdir dir3
chmod -w dir3
bk -r check -ac || exit 1
cd ..
bk clone $Q proj copy2 || exit 1
cd copy2
bk edit $Q dir1/ff dir2/gg || exit 1
echo ff2 >> dir1/ff
echo gg2 >> dir2/gg
bk delta $Q -yappend dir1/ff dir2/gg || exit 1
mkdir dir3
mkdir dir3/dir33
echo hh > dir3/dir33/hh
bk new $Q dir3/dir33/hh || exit 1
bk commit $Q -yappend
bk push > OUT 2>&1
status=$?
chmod -R +w $HERE
test $status != 0 || {
	echo push shouldn\'t have worked
	cat OUT
	exit 1
}
grep 'No write permission: dir3' OUT > /dev/null || {
	echo wrong error message
	cat OUT
	exit 1
}
cd $HERE/proj
bk abort -f
bk -r check -acf || exit 1
echo OK

echo $N What if you don\'t have permisisons to delete a file..........$NL
chmod -w dir2/SCCS
cd $HERE/copy2
bk mv dir2/gg dir3/gg || exit 1
bk commit -ymv $Q || exit 1
bk push > OUT 2>&1
status=$?
chmod -R +w $HERE
test $status != 0 || {
	echo push shouldn\'t have worked
	cat OUT
	exit 1
}
grep 'No write permission: dir2' OUT > /dev/null || {
	echo wrong error message
	cat OUT
	exit 1
}
cd $HERE/proj
bk abort -f
bk -r check -acf || exit 1
echo OK

echon Test listing of files in conflict ...........................
cd $HERE
bk clone $Q proj copy3 || exit 1
for d in proj copy3; do
	cd $HERE/$d
	for f in file dir1/ff dir2/gg "dir2/space file" ; do
		bk edit $Q "$f"
		echo $d >> "$f"
		BK_USER=$d bk delta $Q -y"$d side" "$f" || exit 1
	done
	bk mv file file.$d
	BK_USER=$d bk commit -y"$d" $Q || exit 1
done
cd $HERE/copy3
bk pull -R $Q
tar cf TAR RESYNC
echo q | bk resolve -a -d -l 2> OUT && {
	echo resolve should have failed
	cat OUT
	exit 1
}
# List files in conflict
cat <<EOF > WANT
dir1/ff
dir2/gg
dir2/space file
file (renamed) LOCAL=file.copy3 REMOTE=file.proj
EOF
bk conflicts > GOT
cmpfiles WANT GOT
# test ordering of prs options: sfile gfile REMOTE LOCAL GCA
cd RESYNC > /dev/null
bk sfiles -U "$@" | bk prs -hnr+ \
-d'$if(:RREV:){:DPN:|:PN:|:LREV:|:RREV:|:GREV:|:RREV:|:PN:|:LREV:|:GREV:|:DPN:}' - | \
while IFS='|' read GF1 SF1 LR1 RR1 GR1 RR2 SF2 LR2 GR2 GF2
do	test "$GF1" = "$GF2" || { echo Failed gfile; exit 1; }
	test "$SF1" = "$SF2" || { echo Failed sfile; exit 1; }
	test "$LR1" = "$LR2" || { echo Failed local rev; exit 1; }
	test "$RR1" = "$RR2" || { echo Failed remote rev; exit 1; }
	test "$GR1" = "$GR2" || { echo Failed gca rev; exit 1; }
done
cd .. > /dev/null
echo OK

echon Test bk conflicts -v ........................................
cat <<EOF > WANT
dir1/ff has 1 conflict block
dir2/gg has 1 conflict block
dir2/space file has 1 conflict block
BitKeeper/RENAMES/1 has 1 conflict block
    GCA path:     file
    Local path:   file.copy3
    Remote path:  file.proj
EOF
bk conflicts -v > GOT
cmpfiles WANT GOT
echo OK

echon Test bk conflicts -vv .......................................
cat <<EOF > WANT
dir1/ff has 1 conflict block
   1 local lines by copy3/$USER
   1 remote lines by proj/$USER
dir2/gg has 1 conflict block
   1 local lines by copy3/$USER
   1 remote lines by proj/$USER
dir2/space file has 1 conflict block
   1 local lines by copy3/$USER
   1 remote lines by proj/$USER
BitKeeper/RENAMES/1 has 1 conflict block
   1 local lines by copy3/$USER
   1 remote lines by proj/$USER
    GCA path:     file
    Local path:   file.copy3
    Remote path:  file.proj
EOF
bk conflicts -vv > GOT
cmpfiles WANT GOT
echo OK

echon Testing skip command ........................................
cat <<EOF >WANT
dir1/ff
dir2/space file
EOF
# l - resolves file.copy3 rename conflict
# ul - resolves file.copy3 content conflict
# S - skips dir1/ff
# ul - resolves dir2/gg content conflict
# q - leaves 'dir2/space file' unresolved
bk resolve -l << EOF > OUT 2>&1
l
ul
this is the comment
.
S
ul
this is the comment
.
q
EOF
bk conflicts > GOT
cmpfiles WANT GOT
echo OK

echon Testing locking of RESYNC dir ...............................
bk lock -tfRESYNC/BitKeeper/tmp/resolve_lock > L &
bk lock -LfRESYNC/BitKeeper/tmp/resolve_lock > /dev/null
LOCKURL=`cat L`
bk undos << EOF > CMP1
Could not get lock on RESYNC directory.
EOF
bk resolve -q 2>&1 | head -1 > CMP2
bk _kill $LOCKURL
cmpfiles CMP1 CMP2
echo OK

echon Test selective resolve using includes .......................
rm -rf RESYNC
bk pull -R $Q
cat <<EOF > WANT
dir1/ff has 1 conflict block
dir2/gg has 1 conflict block
dir2/space file has 1 conflict block
file.proj has 1 conflict block
    GCA path:     file
    Local path:   file.copy3
    Remote path:  file.proj
EOF
bk conflicts -v > GOT
cmpfiles WANT GOT
# l - resolves file.copy3 rename conflict
# ul - resolves dir2/gg content conflict
bk resolve -l -i'*/gg' <<EOF > OUT 2>&1
l
ul
this is the comment
.
EOF
cat <<EOF > WANT
dir1/ff has 1 conflict block
dir2/space file has 1 conflict block
file.copy3 has 1 conflict block
EOF
bk conflicts -v > GOT
cmpfiles WANT GOT
grep -q 'Commands are:' OUT && {
	echo failed to exit resolver when it should have
	exit 1
}
echo OK

echon Test selective resolve using excludes .......................
rm -rf RESYNC
bk pull -R $Q
# l - resolves file.copy3 rename conflict
# ul - resolves dir2/gg content conflict
bk resolve -d -l -x'*/ff' -x'dir2/s*' -x'f*' <<EOF > OUT 2>&1
l
ul
this is the comment
.
EOF
cat <<EOF > WANT
dir1/ff has 1 conflict block
dir2/space file has 1 conflict block
file.copy3 has 1 conflict block
EOF
bk conflicts -v > GOT
cmpfiles WANT GOT
grep -q 'Commands are:' OUT && {
	echo failed to exit resolver when it should have
	exit 1
}
echo OK

echon Test selective resolve specifying a file that needs rename ..
rm -rf RESYNC
bk pull -R $Q
# l - resolves file.copy3 rename conflict
# ul - resolves file.copy3 content conflict
bk resolve -d -l -i'f*' <<EOF > OUT 2>&1
l
ul
this is the comment
.
EOF
cat <<EOF > WANT
dir1/ff has 1 conflict block
dir2/gg has 1 conflict block
dir2/space file has 1 conflict block
EOF
bk conflicts -v > GOT
cmpfiles WANT GOT
grep -q 'Commands are:' OUT && {
	echo failed to exit resolver when it should have
	exit 1
}
echo OK

# This test shows that the include is on the name of the file after the rename
echon Test selective resolve specifying the rename ................
rm -rf RESYNC
bk pull -R $Q
# m - resolves file.copy3 rename conflict to xyz
# ul - resolves xyz content conflict
bk resolve -d -l -i'xyz' <<EOF > OUT 2>&1
m
xyz
ul
this is the comment
.
EOF
cat <<EOF > WANT
dir1/ff has 1 conflict block
dir2/gg has 1 conflict block
dir2/space file has 1 conflict block
EOF
bk conflicts -v > GOT
cmpfiles WANT GOT
grep -q 'Commands are:' OUT && {
	echo failed to exit resolver when it should have
	exit 1
}
test -f RESYNC/SCCS/s.xyz || {
	failed to move to xyz
	exit 1
}
echo OK

echo $N Do a \'rr\' when given a create/gfile conflict ................$NL
cd $HERE
rm -rf copy2
bk clone $Q proj copy2 || exit 1
cd proj
echo hh > hh
bk new $Q hh
bk commit $Q -ynewhh || exit 1
cd $HERE/copy2
echo hj > hh
(echo rr; echo y) | bk pull > OUT 2>&1 || {
	echo failed
	cat OUT
	exit 1
}
grep -q '| 1 unresolved name conflict' OUT || {
	echo wrong message
	cat OUT
	exit 1
}
echo OK

echo $N Check vr when remote is on a branch .........................$NL
cd $HERE/proj
echo VERSION 1 > foo
bk new $Q foo
bk commit $Q -yfoo
cd ..
bk clone $Q proj vrcopy
cd proj
bk edit $Q foo
echo VERSION 2 > foo
bk delta $Q -y2 foo
bk commit $Q -yfoo
cd ../vrcopy
bk edit $Q foo
bk delta $Q -y2 foo  
bk commit $Q -yfoo
cd ../proj
bk pull $Q ../vrcopy  
cd ../vrcopy
bk edit $Q foo
echo VERSION 3 > foo
bk delta $Q -y2 foo
bk commit $Q -yfoo
cd ../proj
bk pull $Q -R ../vrcopy
bk resolve -t <<EOF > VR 2>&1
vr
q
EOF
# When failing, gave VERSION 2
grep -q "VERSION 3" VR || {
	echo Fail
	echo Expecting to contain the string "'VERSION 3'" and resolve gave
	cat VR
	exit 1
}
echo OK

echo $N Check pass1 to see if dups when no dup.......................$NL
cd $HERE
export CLOCK_DRIFT=1
commercial p1d
mkdir src
cat > src/foo <<EOF
line1
line2
line3
line4
line5
EOF
bk new $Q src/foo
# 3 long names
list="alkjlskdjflksjfdjdfskjdflsjfljfd
	aladflskdjflskjdikjsdfdlsjdadd
	polbnlknsdlkafljalfjallskdjskj"
# make 162 files with long names
for a in $list; do
	for b in $list; do
		for c in $list; do
			file=''
			dir=AB/$a/$b/$c
			mkdir -p $dir
			for d in $list; do
				file="$file $dir/a$d $dir/b$e$d"
			done
			touch $file
			bk new $Q $file
		done
	done
done
bk commit $Q -y'a whole lot of files'
cd ..
bk clone $Q p1d p1dtmp
cd p1dtmp
bk mv src/foo .foo
bk mv AB A
bk commit $Q -y'a whole lot of moving'
cd ../p1d
bk pull -qR ../p1dtmp
bk resolve $Q -234 2> ERR || {
	echo Fail
	cat ERR
	exit 1
}
echo OK

echo $N Make sure that a rename only conflict does partial check ....$NL
cd $HERE
commercial parent
touch start
bk new $Q start
bk commit $Q -ybaseline
bk clone $Q . ../child
bk mv start parent
bk commit $Q -yparent
cd ../child
touch parent
bk new $Q parent
bk commit $Q -ychild
bk pull $Q -R
BK_DEBUG_CMD=YES
export BK_DEBUG_CMD
(
echo rl
echo y
echo q
) | bk resolve -t >OUT 2>&1 || exit 1
unset BK_DEBUG_CMD
test -d RESYNC && {
	echo failed to complete resolve
	exit 1
}
grep -q 'SYSIO {bk} {check} {-c} {-}' OUT || {
	echo failed to run check
	cat OUT
	exit 1
}
echo OK

echo $N Make sure resolve does not rerun with conflicts and -s ......$NL
cd $HERE/proj
bk abort -f
cd $HERE
bk clone $Q proj conflict
for i in proj conflict
do
	cd $HERE/$i
	bk edit $Q foo
	echo $i >> foo
	bk delta $Q -y$i foo
	bk commit $Q -y$i 
done
cd $HERE/conflict
( echo '?'
  echo q
) | bk pull -s > OUT 2>&1
grep -q 'starting manual resolve process.' OUT && {
	echo Should not have restarted resolve
	cat OUT
	exit 1
}
echo OK

echo $N Make sure resolve reruns when there are conflicts ...........$NL
bk abort -f
( echo '?'
  echo q
) | bk pull > OUT 2>&1
grep -q 'starting manual resolve process.' OUT || {
	echo Did not restart resolve
	cat OUT
	exit 1
}
echo OK

echo $N Make sure resolve is not interactive with rename conflicts ..$NL
bk abort -f
for i in proj conflict
do
	cd $HERE/$i
	test $i = proj && bk mv dir1 dir1-proj
	bk mv foo foo-$i
	bk commit $Q -y$i 
done
cd $HERE/conflict
( echo '?'
  echo q
) | bk pull -s > OUT 2>&1
grep -q 'starting manual resolve process.' OUT && {
	echo Should not have restarted resolve
	cat OUT
	exit 1
}
echo OK

echo $N Make sure we can finish the resolve, both name and content ..$NL
( 
  echo '?'
  echo 'l'
  echo '?'
  echo q
) | bk resolve > OUT 2>&1
grep -q 'Local:  foo-conflict pathname is available locally' OUT &&
grep -q 'Remote: foo-proj pathname is available locally' OUT &&
grep -q 'added locally and remotely and must be merged.' OUT || {
	echo failed
	cat OUT
	exit 1
}
echo OK

echo $N Make sure xflags always automerge ...........................$NL
cd $HERE
bk clone $Q proj xflags
cd $HERE/proj
bk admin -fEXPAND1 foo-proj
bk commit $Q -yproj
cd $HERE/xflags
bk admin -fEOLN_NATIVE foo-proj
bk commit $Q -yxflags
bk pull -R $Q
( echo '?'
  echo q
) | bk resolve > OUT 2>&1
grep -q 'Added merged flags to both local and remote versions.' OUT || {
	echo Should have automerged xflags
	cat OUT
	exit 1
}
echo OK

echo $N Make sure resolve automerges modes when it can ..............$NL
cd $HERE/proj
date > mode
bk new $Q mode
bk chmod 0600 mode
test `bk prs -hr+ -nd:RWXMODE: mode` = -rw------- || {
	echo failed
	bk prs -hr+ -nd:RWXMODE: mode
	exit 1
}
bk commit $Q -yproj
cd $HERE
bk clone $Q proj mode
cd proj
bk chmod g+rw mode
test `bk prs -hr+ -nd:RWXMODE: mode` = -rw-rw---- || {
	echo failed
	bk prs -hr+ -nd:RWXMODE: mode
	exit 1
}
bk commit $Q -yproj
cd ../mode
bk edit $Q mode
echo whatever >> mode
bk delta $Q -ywhatever mode
bk commit $Q -ywhatever mode
( echo '?'
  echo q
) | bk pull -s > OUT 2>&1
grep -q 'mode conflict' OUT && {
	echo Should not have gone into interactive mode with -s
	cat OUT
	exit 1
}
test -d RESYNC && {
	echo did not finish resolve
	cat OUT
	exit 1
}
echo OK

echo $N Make sure resolve is not interactive with mode conflicts ....$NL
cd $HERE/proj
bk chmod 0777 mode
test `bk prs -hr+ -nd:RWXMODE: mode` = -rwxrwxrwx || {
	echo failed
	bk prs -hr+ -nd:RWXMODE: mode
	exit 1
}
bk commit $Q -yproj
cd $HERE/mode
bk chmod 0710 mode
test `bk prs -hr+ -nd:RWXMODE: mode` = -rwx--x--- || {
	echo failed
	bk prs -hr+ -nd:RWXMODE: mode
	exit 1
}
bk commit $Q -ymode
( echo '?'
  echo q
) | bk pull -s > OUT 2>&1
grep -q 'mode conflict' OUT && {
	echo Should not have gone into interactive mode with -s
	cat OUT
	exit 1
}
echo OK

cp -rp $HERE/mode $HERE/locktest
echo $N Make sure we can finish the resolve .........................$NL
( 
  echo '?'
  echo 'l'
  echo 'm'
  echo 'C'
  echo '?'
  echo q
) | bk resolve -a > OUT 2>&1
grep -q 'The file has conflicting changes to the modes.' OUT &&
grep -q 'changed mode to -rwx--x---' OUT &&
grep -q 'changed mode to -rwxrwxrwx' OUT &&
grep -q 'resolve complete.' OUT || {
	echo failed
	cat OUT
	exit 1
}
echo OK

echo $N Make sure that we get a lock in pass4 .......................$NL
cd $HERE/locktest
bk lock -tr > PORT &
bk lock -L
( 
  echo 'l'
  echo 'm'
  echo 'C'
  echo q
) | _BK_NO_LOCK_RETRY=YES bk resolve -a > OUT 2>&1
grep -q 'Waiting for write lock...' OUT || {
	echo failed
	cat OUT
	bk _kill `cat PORT`
	exit 1
}
bk _kill `cat PORT`
echo OK

echo $N Keep keywords in an sccs merge ..............................$NL
commercial project
echo '%K%' > foo
bk new $Q foo
bk commit $Q -yfoo
cd ..
bk clone $Q project copy
cd project
bk edit $Q foo
echo project >> foo
bk delta $Q -yfoo foo
bk commit $Q -yfoo
cd ../copy
bk edit $Q foo
echo copy >> foo
bk delta $Q -yfoo foo
bk commit $Q -yfoo
bk pull $Q -R
bk resolve -t << EOF > OUT 2> ERR
s
C
.
EOF
bk edit $Q foo
grep -q '^%K%$' foo || {
  echo Failed
  echo expected keywords
  cat foo
  exit 1
}
echo OK

echo $N Check vr and vl when filename has spaces ....................$NL
cd $HERE
commercial proj1
echo VERSION 1 > 'foo bar'
bk new $Q 'foo bar'
bk commit $Q -yfoo
cd ..
bk clone $Q proj1 copy1
cd proj1
bk edit $Q 'foo bar'
echo VERSION 2 > 'foo bar'
bk delta $Q -y2 'foo bar'
bk commit $Q -yfoo
cd ../copy1
bk edit $Q 'foo bar'
echo VERSION 3 > 'foo bar'
bk delta $Q -y2 'foo bar' 
bk commit $Q -yfoo
cd ../proj1
bk pull $Q -R ../copy1
bk resolve -t <<EOF > VR 2>&1
vr
q
EOF
grep -q "VERSION 3" VR || {
	echo Fail
	echo Expecting to contain the string "'VERSION 3'" and resolve gave
	cat VR
	exit 1
}
bk resolve -t <<EOF > VL 2>&1
vl
q
EOF
grep -q "VERSION 2" VL || {
	echo Fail
	echo Expecting to contain the string "'VERSION 2'" and resolve gave
	cat VL
	exit 1
}
echo OK

echo $N Try autofixing a hosed RESYNC directory......................$NL
cd $HERE
bk clone $Q proj copy4
cd proj/dir2
bk edit $Q 'space file'
echo "more stuff" >> 'space file'
bk delta $Q -ymore 'space file'
cd ../dir1-proj
bk edit $Q ff
echo "more stuff" >> ff
bk delta $Q -ymore ff
bk commit $Q -ymore
cd $HERE/copy4/dir2
bk edit $Q 'space file'
echo "conflict" >> 'space file'
bk delta $Q -yconflict 'space file'
cd ../dir1-proj
bk edit $Q ff
echo "conflict" >> ff
bk delta $Q -yconflict ff
bk commit $Q -yconflict
cd $HERE/copy4
bk pull $Q -R ../proj
# Create a repo with the same problem as if the user had used an old
# version of citool to commit a partial merge. See bug 2004-11-22-000
cd RESYNC/dir1-proj
bk get $Q -eM ff
cat > ff <<EOF
ff
proj
conflict
EOF
bk delta $Q -ymerge ff
rm -f SCCS/r.ff
cd ../dir2
bk get $Q -eM 'space file'
echo "resolved" >> 'space file'
rm -f 'SCCS/r.space file'
cd ..
bk get $Q -eM -g ChangeSet
bk commit $Q -R -YSCCS/c.ChangeSet
rm -f SCCS/r.ChangeSet
# Now we have a repo with the problem, let's see if resolve can fix it
# Fake some comments
echo "comments" > 'dir2/SCCS/c.space file'
cd ..
echo 'u' | bk resolve -t >OUT 2>ERR || {
	echo failed
	echo "Resolver failed"
	exit 1
}
grep -q 'Autofixing partial merge' ERR || {
	echo failed
	echo "Did not autofix"
	exit 1
}
# now make sure the top cset in the real tree is the merge
TIP=`bk changes -r+ -d'$if(:MERGE:){:KEY:}'`
test "x$TIP" = "x" && {
	echo failed
	echo "Tip is not a merge"
	exit 1
}
grep -q "$TIP" BitKeeper/etc/csets-in || {
	echo failed
	echo "Did not put TIP in csets-in"
	exit 1
}
echo OK

echo $N Automerge a trigger after automerging gone ..................$NL
cd $HERE
commercial trigger-master
T=BitKeeper/triggers/pre-commit.test
mkdir -p BitKeeper/triggers
cat - <<'EOF' > "$T"
#!/bin/sh

echo I am in the trigger

echo add merge line after this
EOF
bk new $Q "$T"
touch foo
bk new $Q foo
bk prs -r+ -hnd:ROOTKEY: foo | bk -R gone - 2>ERR || exit 1
rm -f foo SCCS/?.foo
bk commit $Q -ytrig
cd ..
bk clone $Q trigger-master trigger-copy
cd trigger-master
bk edit $Q "$T"
cat - <<'EOF' > "$T"
#!/bin/sh

echo I am in the trigger
echo Really, that is the case

echo add merge line after this
EOF
bk delta $Q -yedit "$T"
touch foo
bk new $Q foo
bk prs -r+ -hnd:ROOTKEY: foo | bk -R gone - 2>ERR || exit 1
rm -f foo SCCS/?.foo
bk commit $Q -ytrig
cd ../trigger-copy
bk edit $Q "$T"
echo "echo new last line" >> "$T"
bk delta $Q -yedit "$T"
touch foo
bk new $Q foo
bk prs -r+ -hnd:ROOTKEY: foo | bk -R gone - 2>ERR || exit 1
rm -f foo SCCS/?.foo
bk commit $Q -ytrig
bk pull $Q 2>ERR || {
	echo failed
	cat ERR
	exit 1
}
echo OK
