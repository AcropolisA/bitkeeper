# Copyright (c) 1999 Larry McVoy
# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# All tests start from SAVE tarball which has two repositories with just
# the basics in it.
#
# 1) M


if [ X$Q = X ]
then	L=-l
else	L=
fi

# Create a repository with 5 files in it.  The files contain
# 1, 2, 3, 4, 5 and start out as A, B, C, D, E
echo $N Create initial repository ...................................$NL
no_logging project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -f SCCS/s.ChangeSet ]; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
touch BitKeeper/etc/SCCS/x.marked
echo OK
echo $N Create 5 files with 1,2,3,4,5 as contents ...................$NL
echo 1 > A
echo 2 > B
echo 3 > C
echo 4 > D
echo 5 > E
bk ci $Q -i A B C D E
if [ ! -f SCCS/s.A ]; then echo failed to create history; exit 1; fi
bk commit $S -a -y"This is a \"Change Set\""
echo OK
cores
bk -r check -a
echo $N Clone and save a tarball of the two repositories ............$NL
cd $HERE
bk clone $Q project copy
tar cf SAVE project copy
echo OK

# Add keys to the cset file by creating a file and change one key.
echo $N Check corrupted key in the ChangeSet file w/ new file .......$NL
cd $HERE
rm -rf project copy
tar xf SAVE
cd project
ls > LS
bk new $Q LS
bk commit $Q -ywhatever
KEY=`bk prs -hr+ -d:KEY: LS`
MONTH=`bk prs -hr+ -d:Dm: LS`
BADKEY=`echo "$KEY" | sed s/$MONTH/00/`
mv SCCS/s.ChangeSet SCCS/s-ChangeSet
sed "s/$KEY/$BADKEY/" < SCCS/s-ChangeSet > X
bk undos X > SCCS/s.ChangeSet
bk admin -z ChangeSet
bk checksum -f ChangeSet 2>/dev/null
cd $HERE/copy
bk pull -t $Q $HERE/project 2>/dev/null
if [ -d RESYNC ]; then echo failed to abort the takepatch; exit 1; fi
echo OK

echo $N Check for removed file in RESYNC dir ........................$NL
cd $HERE
rm -rf project copy
tar xf SAVE
cd project
ls > LS
bk new $Q LS
bk commit $Q -ywhatever
cd ../copy
bk resync $Q $HERE/project
cd $HERE
tar cf copy.tar copy
cd copy
rm RESYNC/SCCS/s.LS
bk resolve -t $Q 2>ERRORS
if [ $? -eq 0 ]; then echo failed to exit with an error; exit 1; fi
if [ ! -d RESYNC ]; then echo failed to leave RESYNC; exit 1; fi
grep -q 'Missing file (chk3) bk@free.bk' ERRORS || {
	echo Bad error message
	cat ERRORS
	exit 1
}
echo OK

echo $N Check for corrupted file in RESYNC dir ......................$NL
cd $HERE
rm -rf copy
tar xf copy.tar
cd copy
chmod +w RESYNC/SCCS/s.LS
echo foo >> RESYNC/SCCS/s.LS
chmod -w RESYNC/SCCS/s.LS
bk resolve -t $Q 2>ERRORS
if [ $? -eq 0 ]; then echo failed to exit with an error; exit 1; fi
if [ ! -d RESYNC ]; then echo failed to leave RESYNC; exit 1; fi
grep -q 'bad file checksum, corrupted file' ERRORS
if [ $? != 0 ]
then	echo Bad error message
	cat ERRORS
	exit 1
fi
echo OK

# XXX - need these
#
# a) do the resolve, go to apply it, and hit a b.file
# b) same thing with a create, make sure it deletes that one
# c) remove the b.file and run resolve again, should work
# d) same thing as a, except force an edit and make mods in repo
# e) same things as d, except chmod -w a directory that needs to +w
