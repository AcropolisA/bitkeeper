# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.


# Copyright (c) 2000 Larry McVoy
# %K%

#
# This test is not portable to WIN32;
# In the test, if we redirect stdin, we will lost it (stdin) after we spawn
# the cygwin shell.
# The shell escape feature itself seems to work, however. We just cannot
# test it in a test script on WIN32.
#
if [ X$PLATFORM = X"WIN32" ]
then
	echo "This test is not supported on WIN32"
	exit 0;
fi

HERE=`bk pwd`
echo $N Create initial repository ...................................$NL
no_logging project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -f SCCS/s.ChangeSet ]; then echo failed to make ChangeSet; exit 1; fi
echo OK
echo $N Create some data ............................................$NL
cat > file <<EOF
1
2
3
4
5
6
7
8
9
EOF
bk ci $Q -i file
if [ ! -f SCCS/s.file ]; then echo failed to create history; exit 1; fi
cp /bin/sh binary
chmod +w binary
bk new $Q -b binary
bk prs -hr+ binary | grep -q binary || {
	echo bad encoding
	bk prs -hr+ binary
	exit 1
}
touch BitKeeper/etc/SCCS/x.marked
bk commit $Q -ywhatever 
echo OK
echo $N Clone it, modify it in both, and resync it ..................$NL
cd $HERE
bk clone $Q project copy
for i in copy project
do	cd $HERE/$i
	bk get -e -g $Q file
	bk get -kp $Q file | sed -e s/2/2-$i/ -e s/3/3-$i/ > file
	bk delta $Q -y$i
	bk commit -y$i $Q
done
cd $HERE/copy
bk resync $Q
cd ..
tar cf TAR copy
cd copy
echo OK
echo $N Make sure shell escapes to an interactive shell work ........$NL
# XXX WIN32 note: the following construct does not work on WIN32
# If we redirect stdin, we will lost it after we spawn the cygwin shell
# Must be some type of fd conflict...
( echo '!'
  echo echo ESCAPE_FROM_NEW_YORK
  echo exit
  echo q ) | bk resolve $Q > OUT 2>/dev/null
grep -q ESCAPE_FROM_NEW_YORK OUT || { 
	echo failed to escape
	cat OUT
	exit 1
}
echo OK

echo $N Make sure shell escapes to run a command work ...............$NL
cd ..
rm -rf copy
tar xf TAR
cd copy
( echo '!diff $BK_LOCAL $BK_REMOTE'
  echo q ) | bk resolve $Q > OUT 2>/dev/null
cat > DIFFS <<EOF
2,3c2,3
< 2-copy
< 3-copy
---
> 2-project
> 3-project
EOF
cmp -s DIFFS OUT || {
	echo failed to run diffs on local/remote files
	exit 1
}
echo OK

echo $N Modify the binary in both, resync it, check merge ...........$NL
cd $HERE
rm -rf */RESYNC */PENDING
bk edit $Q copy/binary project/binary
cp -f /bin/ls copy/binary
cp -f /bin/rm project/binary
for i in copy project
do	cd $HERE/$i
	chmod +w binary
	bk delta $Q -y$i
	bk commit -y$i $Q
done
cd $HERE/copy
bk resync $Q
cd ..
tar cf TAR copy
cd copy
echo OK

echo $N Make sure ul works ..........................................$NL
cd $HERE
rm -rf copy
tar xf TAR
cd copy
# First one is for the binary and the second one is for the file.
( echo ''
  echo ul
  echo ul
  echo q ) | bk resolve $Q -t -ywhatever > OUT 2>&1
test -d RESYNC && {
	echo failed to complete resolve
	cat OUT
	exit 1
}
bk cat binary | cmp - /bin/ls || {
	echo failed to use local version of binary
	exit 1
}
bk cat file | grep -q copy || {
	echo failed to use local version of file
	bk cat file
	exit 1
}
echo OK

echo $N Make sure ur works ..........................................$NL
cd $HERE
rm -rf copy
tar xf TAR
cd copy
# First one is for the binary and the second one is for the file.
( echo ''
  echo ur
  echo ur
  echo q ) | bk resolve $Q -t -ywhatever > OUT 2>&1
test -d RESYNC && {
	echo failed to complete resolve
	cat OUT
	exit 1
}
bk cat binary | cmp - /bin/rm || {
	echo failed to use remote version
	exit 1
}
bk cat file | grep -q project || {
	echo failed to use remote version of file
	bk cat file
	exit 1
}
echo OK

echo $N Make sure shell escapes to use local works ..................$NL
cd $HERE
rm -rf copy
tar xf TAR
cd copy
( echo '!cp $BK_LOCAL $BK_MERGE'
  echo C
  echo '!cp $BK_LOCAL $BK_MERGE'
  echo C
  echo q ) | bk resolve $Q -t -ywhatever > OUT 2>&1
test -d RESYNC && {
	echo failed to complete resolve
	exit 1
}
bk cat binary | cmp - /bin/ls || {
	echo failed to use local version
	exit 1
}
bk cat file | grep -q copy || {
	echo failed to use local version of file
	bk cat file
	exit 1
}
echo OK

echo $N Make sure shell escapes to use remote works .................$NL
cd $HERE
rm -rf copy
tar xf TAR
cd copy
( echo '!cp $BK_REMOTE $BK_MERGE'
  echo C
  echo '!cp $BK_REMOTE $BK_MERGE'
  echo C
  echo q ) | bk resolve $Q -t -ywhatever > OUT 2>&1
test -d RESYNC && {
	echo failed to complete resolve
	exit 1
}
bk cat binary | cmp - /bin/rm || {
	echo failed to use remote version
	exit 1
}
bk cat file | grep -q project || {
	echo failed to use remote version of file
	bk cat file
	exit 1
}
echo OK

echo $N Make sure we can force text resolution ......................$NL
cd $HERE
rm -rf copy
tar xf TAR
cd copy
# First one is for the binary and the second one is for the file.
( echo t
  echo ur
  echo ur
  echo q ) | bk resolve $Q -t -ywhatever > OUT 2>&1
test -d RESYNC && {
	echo failed to complete resolve
	cat OUT
	exit 1
}
bk cat binary | cmp - /bin/rm || {
	echo failed to use remote version
	exit 1
}
bk cat file | grep -q project || {
	echo failed to use remote version of file
	bk cat file
	exit 1
}
echo OK
