# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Copyright (c) 1999 Larry McVoy
# %K%

HERE=`pwd`
mkdir stripdel || exit 1
cd stripdel || exit 1
bk cset -i -s .
rm -rf FILE SCCS
R=1
for D in '87/05/28 23:49:57' '97/05/28 23:49:57' '97/05/30 01:34:11' '97/06/23 01:33:45+06:30' '98/01/30 17:45:17-05:00'
do	cat > INITX <<EOF
D 1.$R $D $USER 0 0 0/0/0
c This is revision 1.$R of $D
c This the second comment of 1.$R
P this/is/the/pathname.$R
------------------------------------------------
EOF
	# We must be careful not to leave a locked file behind at the
	# end of the loop.  clean will complain because the recorded
	# and actual pathnames don't match.
	if [ $R -ne 1 ]
	then	bk co $Q -l FILE
	fi
	echo 1.$R >> FILE
	if [ $R -eq 1 ]
	then	bk delta $Q -i -IINITX FILE
	else	bk delta $Q -IINITX FILE
	fi
	R=`expr $R + 1`
done
bk co  $Q -l -r1.3 FILE
echo "added in 1.3.1.1" >> FILE
bk ci $Q -y FILE
bk co $Q -l -r1.3.1 FILE
echo "added in 1.3.1.2" >> FILE
bk ci $Q -y FILE
echo $N Check stripdel !TOT .........................................$NL
cat > X << EOF
stripdel: revision 1.4 not at tip of branch in SCCS/s.FILE.
EOF
bk undos X > CMP1
bk stripdel -r1.4 FILE 2> CMP2
cmp -s CMP1 CMP2
if [ $? -ne 0 ]; then echo Failed.; diff CMP1 CMP2; exit 1; fi
echo OK
echo $N Check stripdel !TOB .........................................$NL
cat > X << EOF
stripdel: revision 1.3.1.1 not at tip of branch in SCCS/s.FILE.
EOF
bk undos X > CMP1
bk stripdel -r1.3.1.1 FILE  2> CMP2
cmp -s CMP1 CMP2
if [ $? -ne 0 ]; then echo Failed.; diff CMP1 CMP2; exit 1; fi
echo OK
echo $N Check stripdel TOT ..........................................$NL
bk stripdel $Q -r1.5 FILE
grep -q "^.d D 1.5" SCCS/s.FILE 
if [ $? -eq 0 ]; then echo Failed to remove delta table entry.; exit 1; fi
grep -q '^1.5$' SCCS/s.FILE 
if [ $? -eq 0 ]; then echo Failed to remove delta body entry.; exit 1; fi
echo OK
echo $N Check stripdel TOB ..........................................$NL
bk stripdel $Q -r1.3.1.1,1.3.1.2 FILE
grep -q '^.d D 1.3.1.[12]' SCCS/s.FILE 
if [ $? -eq 0 ]; then echo Failed to remove delta table entry.; exit 1; fi
grep -q '^added in 1.3.1.[12]' SCCS/s.FILE 
if [ $? -eq 0 ]; then echo Failed to remove delta body entry.; exit 1; fi
echo OK
# Make a graph with a cset merged twice, and those merged
echo $N Create a repository with two files ..........................$NL
cd $HERE
rm -fr stripdel proj copy1 copy2 left right
echo "logging: none" > $HERE/c
bk setup -f -n'BitKeeper Test repository' -c$HERE/c proj
cd proj
touch foo bar
bk new $Q foo bar
bk commit $Q -Sfirst -ynewfoo
if [ $? -ne 0 ]; then echo failed commit; exit 1; fi
echo OK
echo $N Clone and make deltas in each proj and copy1 ................$NL
cd $HERE
bk clone $Q proj copy1
cd proj
bk edit $Q foo
echo left > foo
bk delta $Q -ytrunk foo
bk commit $Q -ytrunk
cd $HERE/copy1
bk edit $Q foo
bk delta $Q -ycopy1 foo
bk commit $Q -ycopy1
if [ $? -ne 0 ]; then echo failed commit; exit 1; fi
echo OK
echo $N Clone and make deltas in each copy1 and copy2 ...............$NL
cd $HERE
bk clone $Q copy1 copy2
cd copy1
bk edit $Q bar
echo right > bar
bk delta $Q -ytrunkcopy1 bar
bk commit $Q -ytrunkcopy1
cd $HERE/copy2
bk edit $Q foo
bk delta $Q -ytrunkcopy2 foo
bk commit $Q -ytrunkcopy2
if [ $? -ne 0 ]; then echo failed commit; exit 1; fi
echo OK
echo $N "Merge copy2 -> copy1, copy2 -> proj, copy1 -> proj ..........$NL"
cd $HERE/copy1
bk pull -t $Q $HERE/copy2
bk admin $Q -Sright ChangeSet
cd $HERE/proj
bk pull -t $Q $HERE/copy2
bk admin $Q -Sleft ChangeSet
bk pull -t $Q $HERE/copy1
if [ $? -ne 0 ]; then echo failed pull; exit 1; fi
echo OK
echo $N Check stripdel managing tree with twice merged cset -1- .....$NL
cd $HERE
bk clone $Q -rright proj right
cd right
bk get $Q foo bar
echo right > CMPBAR
echo $N $NL > CMPFOO
cmp -s foo CMPFOO
if [ $? -ne 0 ]; then echo failed foo diff; exit 1; fi
cmp -s bar CMPBAR
if [ $? -ne 0 ]; then echo failed bar diff; exit 1; fi
echo OK
echo $N Check stripdel managing tree with twice merged cset -2- .....$NL
cd $HERE
bk clone $Q -rleft proj left
cd left
bk get $Q foo bar
echo left > CMPFOO
echo $N $NL > CMPBAR
cmp -s foo CMPFOO
if [ $? -ne 0 ]; then echo failed foo diff; exit 1; fi
cmp -s bar CMPBAR
if [ $? -ne 0 ]; then echo failed bar diff; exit 1; fi
echo OK
