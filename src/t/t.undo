# This file is part of the BitKeeper Regression test suite.
# All of the files in this directory are Copyright (c) 2000 BitMover, Inc.
# and are not licensed under the terms of the BKL (BitKeeper License).
# Standard copyright law applies.
# 
# Redistribution in modified form is prohibited with one exception:
#    proposed modifications may be sent back to dev@bitmover.com for
#    possible inclusion in future releases.  Sending such modifications
#    constitutes your permission for BitMover, Inc. to distribute  the
#    modifications under any license.

# Copyright (c) 1999 Andrew Chang
# %K%

echo $N Create initial repository ...................................$NL
commercial project
if [ ! -d BitKeeper/etc ]; then echo failed to make BitKeeper/etc; exit 1; fi
if [ ! -f SCCS/s.ChangeSet ]; then echo failed to make ChangeSet; exit 1; fi
P=`bk pending | wc -l`
if [ $P -ne 0 ]; then echo files are pending; bk pending; exit 1; fi
echo OK

echo $N Check undo to rev 1.2 .......................................$NL
mkdir src
cd "$HERE/project/src"
echo foo > foo.c
bk ci $Q -i foo.c
bk commit $S -y"This is \"Change Set\" A"
bk clone $Q "$HERE/project" "$HERE/copy1"
bk mv foo.c new_foo.c
echo bar >> bar.c
bk ci $Q -i bar.c
bk commit $S -y"This is a \"Change Set\" B"
bk clone $Q "$HERE/project" "$HERE/copy2"
cd "$HERE/copy2/src"
bk undo -fqr1.3
if [ ! -f SCCS/s.foo.c ]
then
	echo failed
	exit 1
fi
if [ -f SCCS/s.new_foo.c ]
then
	echo failed
	exit 1
fi
if [ -f SCCS/s.bar.c ]
then
	echo failed
	exit 1
fi
bk diff -r "$HERE/copy1/src" "$HERE/copy2/src"
if [ $? != 0 ]
then
	echo failed
	exit
fi
echo OK

echo $N Check undo with edited file .................................$NL
bk co $Q -l foo.c
echo new-data > foo.c
bk undo -fr+ > undo.out 2>&1 && {
	echo failed
	cat undo.out
	exit 1
}
grep -q "Cannot clean src/foo.c, undo aborted" undo.out || {
	echo failed2
	cat undo.out
	exit 1
}
echo OK
bk unedit foo.c

echo $N Check undo of circular renames ..............................$NL
echo bar > bar.c
echo woo > woo.c
bk ci $Q -i bar.c
bk ci $Q -i woo.c
bk commit $S -y"new file"
bk mv foo.c tmp.c
bk mv bar.c foo.c
bk mv woo.c bar.c
bk mv tmp.c woo.c
bk commit $S -y"circular rename"
bk get $Q -p bar.c | grep -q woo
if [ $? -ne 0 ]; then echo failed; exit 1; fi
bk undo $Q -fr+
bk get $Q -p bar.c | grep -q bar
if [ $? -ne 0 ]; then echo failed; exit 1; fi
echo OK

echo $N Check dangling tag undo .....................................$NL
cd "$HERE"
commercial tag
ls > file
bk new $Q file
bk commit -SRELEASE -ywhatever $Q
bk edit -q file
bk delta $Q -fywhatever file
bk commit -ywhatever $Q
bk tag $Q RELEASE
bk tag $Q -r1.2 RELEASE
bk undo $Q -fr1.3
grep -q 'R 1.2' SCCS/s.ChangeSet && {
	echo failed to remove the dangling tag
	exit 1
}
echo OK

echo $N Try and undo a merge changeset ..............................$NL
cd "$HERE"
commercial merge
ls > file
bk new $Q file
bk commit -ywhatever $Q
cd ..
bk clone $Q merge merge-clone
for i in merge merge-clone
do	cd "$HERE"/$i
	bk edit -q file
	bk delta $Q -fy$i file
	bk commit -y$i $Q
done
cd "$HERE/merge-clone"
bk pull $Q || exit 1
bk undo -sfr+ > OUT && {
	echo undo should have failed
	cat OUT
	exit 1
}
bk prs -r1.4 ChangeSet > OUT || {
	echo undo did remove 1.4
	exit 1
}
echo OK

echo $N Undo a rename where renumber needs to run before names ......$NL
cd "$HERE"
commercial rename
echo a > a
echo b > b
bk new $Q a b
bk commit -Sc1 -yc1 $Q || exit 1
cd ..
bk clone $Q rename rename2
cd rename
bk edit $Q a 
echo a >> a
bk delta $Q -yd1 a 
bk commit -Sc2 -yc2 $Q
cd ../rename2
bk mv a t || exit 1
bk mv b a || exit 1
bk mv t b || exit 1
bk commit -Sc3 -yc3 $Q || exit 1
bk pull $Q || exit 1
bk undo $Q -f -ac3 || exit 1
echo OK

echo $N Undo should not touch files when it fails ...................$NL
cd "$HERE/project/src"
bk get $Q new_foo.c
bk undo $Q -r1.2 >OUT && {
	echo should have generated an error
	exit 1
}
test -f new_foo.c || {
	echo a failed undo should not have deleted any files
	exit 1
}
echo OK

echo $N Undo should not delete existing RESYNC directory ............$NL
cd "$HERE/project"
mkdir RESYNC
bk undo $Q -sfr+ > ERROUT 2>&1 && {
	echo should have generated an error
	exit 1
}
test -s ERROUT || {
	echo should have output explanation
	exit 1
}
test -d RESYNC || {
	echo undo deleted existing RESYNC
	exit 1
}
rmdir RESYNC
echo OK

unset _BK_DEVELOPER
echo $N checkout:get should resurrect deleted files after undo ......$NL
cd "$HERE"
rm -rf project
commercial project
bk edit $Q BitKeeper/etc/config || exit 1
echo "checkout: get" >> BitKeeper/etc/config
echo "partial_check: yes" >> BitKeeper/etc/config
bk ci $Q -y'Added checkout:get' BitKeeper/etc/config
bk commit $Q -y'Added checkout:get' || exit 1
echo foo > foo
bk new $Q foo || exit 1
bk commit $Q -y'Added foo' || exit 1
bk rm foo || exit 1
bk commit $Q -y'Removed foo' || exit 1
bk clean BitKeeper/deleted || exit 1
bk -r check -ac || exit 1
bk undo $Q -fa1.3 || exit 1
test -f foo || {
	echo failed
	exit 1
}
echo OK

