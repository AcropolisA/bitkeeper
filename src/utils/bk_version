#!/bin/sh

# This is BitMover's way of coming up with a platform identifier.  If
# you run bk version you'll see the output of this command.  We find
# it useful and maybe you will as well.
#
# We start with the GNU config.guess script that digs out versions
# like i686-pc-linux and then we dig out libc information and convert 
# that to something like x86-glibc27-linux.  That's the main value-add
# of this script, it gives you a string that is libc specific in most
# cases.  I'm sort of surprised the GNU config.guess doesn't have an
# option to do this, maybe it will some day.
#
# Some of the choices we made here may not be right for you.  We're a
# software vendor and the results of this script reflect what we want
# our customers to do.  For example, we print out very specific information
# about linux so they can match their libc exactly.  Ditto for freebsd.
# That's because those platforms are funky about compatibility.  On the
# other hand, we compile on old versions of solaris and they are very
# good about compatibility so we strip the OS release number there.
#
# The point is that you may want to tweak this a bit, your needs may be
# different than ours.
#
# The non-gnu stuff is copyright (c) 1999-2009 BitMover, Inc. and is not
# GPL-ed because these parts are reasonably separable (see GNU GPL Section 2).
# The BitMover part is everything after "^SHAR_EOF" and is available under
# the BSD license, have the big fun.  If you are the license police and
# want us to say that you can have it under the GPL or whatever, that's
# fine, just ask and it's 99.9% certain we'll give you what you want.

sed 's/^X//' << 'SHAR_EOF' > /tmp/gnu-os$$ &&
#! /bin/sh
# Attempt to guess a canonical system name.
#   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
#   Free Software Foundation, Inc.
X
timestamp='2001-11-26'
X
# This file is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# As a special exception to the GNU General Public License, if you
# distribute this file as part of a program that contains a
# configuration script generated by Autoconf, you may include it under
# the same distribution terms that you use for the rest of that program.
X
# Originally written by Per Bothner <bothner@cygnus.com>.
# Please send patches to <config-patches@gnu.org>.  Submit a context
# diff and a properly formatted ChangeLog entry.
#
# This script attempts to guess a canonical system name similar to
# config.sub.  If it succeeds, it prints the system name on stdout, and
# exits with 0.  Otherwise, it exits with 1.
#
# The plan is that this can be called by configure scripts if you
# don't specify an explicit build system type.
X
me=`echo "$0" | sed -e 's,.*/,,'`
X
usage="\
Usage: $0 [OPTION]
X
Output the configuration name of the system \`$me' is run on.
X
Operation modes:
X  -h, --help         print this help, then exit
X  -t, --time-stamp   print date of last modification, then exit
X  -v, --version      print version number, then exit
X
Report bugs and patches to <config-patches@gnu.org>."
X
version="\
GNU config.guess ($timestamp)
X
Originally written by Per Bothner.
Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
Free Software Foundation, Inc.
X
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
X
help="
Try \`$me --help' for more information."
X
# Parse command line
while test $# -gt 0 ; do
X  case $1 in
X    --time-stamp | --time* | -t )
X       echo "$timestamp" ; exit 0 ;;
X    --version | -v )
X       echo "$version" ; exit 0 ;;
X    --help | --h* | -h )
X       echo "$usage"; exit 0 ;;
X    -- )     # Stop option processing
X       shift; break ;;
X    - )	# Use stdin as input.
X       break ;;
X    -* )
X       echo "$me: invalid option $1$help" >&2
X       exit 1 ;;
X    * )
X       break ;;
X  esac
done
X
if test $# != 0; then
X  echo "$me: too many arguments$help" >&2
X  exit 1
fi
X
X
dummy=dummy-$$
trap 'rm -f $dummy.c $dummy.o $dummy.rel $dummy; exit 1' 1 2 15
X
# CC_FOR_BUILD -- compiler used by this script.
# Historically, `CC_FOR_BUILD' used to be named `HOST_CC'. We still
# use `HOST_CC' if defined, but it is deprecated.
X
set_cc_for_build='case $CC_FOR_BUILD,$HOST_CC,$CC in
X ,,)    echo "int dummy(){}" > $dummy.c ;
X	for c in cc gcc c89 ; do
X	  ($c $dummy.c -c -o $dummy.o) >/dev/null 2>&1 ;
X	  if test $? = 0 ; then
X	     CC_FOR_BUILD="$c"; break ;
X	  fi ;
X	done ;
X	rm -f $dummy.c $dummy.o $dummy.rel ;
X	if test x"$CC_FOR_BUILD" = x ; then
X	  CC_FOR_BUILD=no_compiler_found ;
X	fi
X	;;
X ,,*)   CC_FOR_BUILD=$CC ;;
X ,*,*)  CC_FOR_BUILD=$HOST_CC ;;
esac'
X
# This is needed to find uname on a Pyramid OSx when run in the BSD universe.
# (ghazi@noc.rutgers.edu 1994-08-24)
if (test -f /.attbin/uname) >/dev/null 2>&1 ; then
X	PATH=$PATH:/.attbin ; export PATH
fi
X
UNAME_MACHINE=`(uname -m) 2>/dev/null` || UNAME_MACHINE=unknown
UNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown
UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown
UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown
X
# Note: order is significant - the case branches are not exclusive.
X
case "${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}" in
X    *:NetBSD:*:*)
X	# NetBSD (nbsd) targets should (where applicable) match one or
X	# more of the tupples: *-*-netbsdelf*, *-*-netbsdaout*,
X	# *-*-netbsdecoff* and *-*-netbsd*.  For targets that recently
X	# switched to ELF, *-*-netbsd* would select the old
X	# object file format.  This provides both forward
X	# compatibility and a consistent mechanism for selecting the
X	# object file format.
X	# Determine the machine/vendor (is the vendor relevant).
X	case "${UNAME_MACHINE}" in
X	    amiga) machine=m68k-unknown ;;
X	    arm32) machine=arm-unknown ;;
X	    atari*) machine=m68k-atari ;;
X	    sun3*) machine=m68k-sun ;;
X	    mac68k) machine=m68k-apple ;;
X	    macppc) machine=powerpc-apple ;;
X	    hp3[0-9][05]) machine=m68k-hp ;;
X	    ibmrt|romp-ibm) machine=romp-ibm ;;
X	    sparc*) machine=`uname -p`-unknown ;;
X	    *) machine=${UNAME_MACHINE}-unknown ;;
X	esac
X	# The Operating System including object format, if it has switched
X	# to ELF recently, or will in the future.
X	case "${UNAME_MACHINE}" in
X	    i386|sparc|amiga|arm*|hp300|mvme68k|vax|atari|luna68k|mac68k|news68k|next68k|pc532|sun3*|x68k)
X		eval $set_cc_for_build
X		if echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \
X			| grep __ELF__ >/dev/null
X		then
X		    # Once all utilities can be ECOFF (netbsdecoff) or a.out (netbsdaout).
X		    # Return netbsd for either.  FIX?
X		    os=netbsd
X		else
X		    os=netbsdelf
X		fi
X		;;
X	    *)
X	        os=netbsd
X		;;
X	esac
X	# The OS release
X	release=`echo ${UNAME_RELEASE}|sed -e 's/[-_].*/\./'`
X	# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:
X	# contains redundant information, the shorter form:
X	# CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.
X	echo "${machine}-${os}${release}"
X	exit 0 ;;
X    amiga:OpenBSD:*:*)
X	echo m68k-unknown-openbsd${UNAME_RELEASE}
X	exit 0 ;;
X    arc:OpenBSD:*:*)
X	echo mipsel-unknown-openbsd${UNAME_RELEASE}
X	exit 0 ;;
X    hp300:OpenBSD:*:*)
X	echo m68k-unknown-openbsd${UNAME_RELEASE}
X	exit 0 ;;
X    mac68k:OpenBSD:*:*)
X	echo m68k-unknown-openbsd${UNAME_RELEASE}
X	exit 0 ;;
X    macppc:OpenBSD:*:*)
X	echo powerpc-unknown-openbsd${UNAME_RELEASE}
X	exit 0 ;;
X    mvme68k:OpenBSD:*:*)
X	echo m68k-unknown-openbsd${UNAME_RELEASE}
X	exit 0 ;;
X    mvme88k:OpenBSD:*:*)
X	echo m88k-unknown-openbsd${UNAME_RELEASE}
X	exit 0 ;;
X    mvmeppc:OpenBSD:*:*)
X	echo powerpc-unknown-openbsd${UNAME_RELEASE}
X	exit 0 ;;
X    pmax:OpenBSD:*:*)
X	echo mipsel-unknown-openbsd${UNAME_RELEASE}
X	exit 0 ;;
X    sgi:OpenBSD:*:*)
X	echo mipseb-unknown-openbsd${UNAME_RELEASE}
X	exit 0 ;;
X    sun3:OpenBSD:*:*)
X	echo m68k-unknown-openbsd${UNAME_RELEASE}
X	exit 0 ;;
X    wgrisc:OpenBSD:*:*)
X	echo mipsel-unknown-openbsd${UNAME_RELEASE}
X	exit 0 ;;
X    *:OpenBSD:*:*)
X	echo ${UNAME_MACHINE}-unknown-openbsd${UNAME_RELEASE}
X	exit 0 ;;
X    alpha:OSF1:*:*)
X	if test $UNAME_RELEASE = "V4.0"; then
X		UNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`
X	fi
X	# A Vn.n version is a released version.
X	# A Tn.n version is a released field test version.
X	# A Xn.n version is an unreleased experimental baselevel.
X	# 1.2 uses "1.2" for uname -r.
X	cat <<EOF >$dummy.s
X	.data
\$Lformat:
X	.byte 37,100,45,37,120,10,0	# "%d-%x\n"
X
X	.text
X	.globl main
X	.align 4
X	.ent main
main:
X	.frame \$30,16,\$26,0
X	ldgp \$29,0(\$27)
X	.prologue 1
X	.long 0x47e03d80 # implver \$0
X	lda \$2,-1
X	.long 0x47e20c21 # amask \$2,\$1
X	lda \$16,\$Lformat
X	mov \$0,\$17
X	not \$1,\$18
X	jsr \$26,printf
X	ldgp \$29,0(\$26)
X	mov 0,\$16
X	jsr \$26,exit
X	.end main
EOF
X	eval $set_cc_for_build
X	$CC_FOR_BUILD $dummy.s -o $dummy 2>/dev/null
X	if test "$?" = 0 ; then
X		case `./$dummy` in
X			0-0)
X				UNAME_MACHINE="alpha"
X				;;
X			1-0)
X				UNAME_MACHINE="alphaev5"
X				;;
X			1-1)
X				UNAME_MACHINE="alphaev56"
X				;;
X			1-101)
X				UNAME_MACHINE="alphapca56"
X				;;
X			2-303)
X				UNAME_MACHINE="alphaev6"
X				;;
X			2-307)
X				UNAME_MACHINE="alphaev67"
X				;;
X			2-1307)
X				UNAME_MACHINE="alphaev68"
X				;;
X		esac
X	fi
X	rm -f $dummy.s $dummy
X	echo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} | sed -e 's/^[VTX]//' | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`
X	exit 0 ;;
X    Alpha\ *:Windows_NT*:*)
X	# How do we know it's Interix rather than the generic POSIX subsystem?
X	# Should we change UNAME_MACHINE based on the output of uname instead
X	# of the specific Alpha model?
X	echo alpha-pc-interix
X	exit 0 ;;
X    21064:Windows_NT:50:3)
X	echo alpha-dec-winnt3.5
X	exit 0 ;;
X    Amiga*:UNIX_System_V:4.0:*)
X	echo m68k-unknown-sysv4
X	exit 0;;
X    *:[Aa]miga[Oo][Ss]:*:*)
X	echo ${UNAME_MACHINE}-unknown-amigaos
X	exit 0 ;;
X    *:OS/390:*:*)
X	echo i370-ibm-openedition
X	exit 0 ;;
X    arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)
X	echo arm-acorn-riscix${UNAME_RELEASE}
X	exit 0;;
X    SR2?01:HI-UX/MPP:*:* | SR8000:HI-UX/MPP:*:*)
X	echo hppa1.1-hitachi-hiuxmpp
X	exit 0;;
X    Pyramid*:OSx*:*:* | MIS*:OSx*:*:* | MIS*:SMP_DC-OSx*:*:*)
X	# akee@wpdis03.wpafb.af.mil (Earle F. Ake) contributed MIS and NILE.
X	if test "`(/bin/universe) 2>/dev/null`" = att ; then
X		echo pyramid-pyramid-sysv3
X	else
X		echo pyramid-pyramid-bsd
X	fi
X	exit 0 ;;
X    NILE*:*:*:dcosx)
X	echo pyramid-pyramid-svr4
X	exit 0 ;;
X    sun4H:SunOS:5.*:*)
X	echo sparc-hal-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`
X	exit 0 ;;
X    sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)
X	echo sparc-sun-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`
X	exit 0 ;;
X    i86pc:SunOS:5.*:*)
X	echo i386-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`
X	exit 0 ;;
X    sun4*:SunOS:6*:*)
X	# According to config.sub, this is the proper way to canonicalize
X	# SunOS6.  Hard to guess exactly what SunOS6 will be like, but
X	# it's likely to be more like Solaris than SunOS4.
X	echo sparc-sun-solaris3`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`
X	exit 0 ;;
X    sun4*:SunOS:*:*)
X	case "`/usr/bin/arch -k`" in
X	    Series*|S4*)
X		UNAME_RELEASE=`uname -v`
X		;;
X	esac
X	# Japanese Language versions have a version number like `4.1.3-JL'.
X	echo sparc-sun-sunos`echo ${UNAME_RELEASE}|sed -e 's/-/_/'`
X	exit 0 ;;
X    sun3*:SunOS:*:*)
X	echo m68k-sun-sunos${UNAME_RELEASE}
X	exit 0 ;;
X    sun*:*:4.2BSD:*)
X	UNAME_RELEASE=`(head -1 /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`
X	test "x${UNAME_RELEASE}" = "x" && UNAME_RELEASE=3
X	case "`/bin/arch`" in
X	    sun3)
X		echo m68k-sun-sunos${UNAME_RELEASE}
X		;;
X	    sun4)
X		echo sparc-sun-sunos${UNAME_RELEASE}
X		;;
X	esac
X	exit 0 ;;
X    aushp:SunOS:*:*)
X	echo sparc-auspex-sunos${UNAME_RELEASE}
X	exit 0 ;;
X    # The situation for MiNT is a little confusing.  The machine name
X    # can be virtually everything (everything which is not
X    # "atarist" or "atariste" at least should have a processor
X    # > m68000).  The system name ranges from "MiNT" over "FreeMiNT"
X    # to the lowercase version "mint" (or "freemint").  Finally
X    # the system name "TOS" denotes a system which is actually not
X    # MiNT.  But MiNT is downward compatible to TOS, so this should
X    # be no problem.
X    atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)
X        echo m68k-atari-mint${UNAME_RELEASE}
X	exit 0 ;;
X    atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)
X	echo m68k-atari-mint${UNAME_RELEASE}
X        exit 0 ;;
X    *falcon*:*MiNT:*:* | *falcon*:*mint:*:* | *falcon*:*TOS:*:*)
X        echo m68k-atari-mint${UNAME_RELEASE}
X	exit 0 ;;
X    milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)
X        echo m68k-milan-mint${UNAME_RELEASE}
X        exit 0 ;;
X    hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)
X        echo m68k-hades-mint${UNAME_RELEASE}
X        exit 0 ;;
X    *:*MiNT:*:* | *:*mint:*:* | *:*TOS:*:*)
X        echo m68k-unknown-mint${UNAME_RELEASE}
X        exit 0 ;;
X    powerpc:machten:*:*)
X	echo powerpc-apple-machten${UNAME_RELEASE}
X	exit 0 ;;
X    RISC*:Mach:*:*)
X	echo mips-dec-mach_bsd4.3
X	exit 0 ;;
X    RISC*:ULTRIX:*:*)
X	echo mips-dec-ultrix${UNAME_RELEASE}
X	exit 0 ;;
X    VAX*:ULTRIX*:*:*)
X	echo vax-dec-ultrix${UNAME_RELEASE}
X	exit 0 ;;
X    2020:CLIX:*:* | 2430:CLIX:*:*)
X	echo clipper-intergraph-clix${UNAME_RELEASE}
X	exit 0 ;;
X    mips:*:*:UMIPS | mips:*:*:RISCos)
X	eval $set_cc_for_build
X	sed 's/^	//' << EOF >$dummy.c
#ifdef __cplusplus
#include <stdio.h>  /* for printf() prototype */
X	int main (int argc, char *argv[]) {
#else
X	int main (argc, argv) int argc; char *argv[]; {
#endif
X	#if defined (host_mips) && defined (MIPSEB)
X	#if defined (SYSTYPE_SYSV)
X	  printf ("mips-mips-riscos%ssysv\n", argv[1]); exit (0);
X	#endif
X	#if defined (SYSTYPE_SVR4)
X	  printf ("mips-mips-riscos%ssvr4\n", argv[1]); exit (0);
X	#endif
X	#if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)
X	  printf ("mips-mips-riscos%sbsd\n", argv[1]); exit (0);
X	#endif
X	#endif
X	  exit (-1);
X	}
EOF
X	$CC_FOR_BUILD $dummy.c -o $dummy \
X	  && ./$dummy `echo "${UNAME_RELEASE}" | sed -n 's/\([0-9]*\).*/\1/p'` \
X	  && rm -f $dummy.c $dummy && exit 0
X	rm -f $dummy.c $dummy
X	echo mips-mips-riscos${UNAME_RELEASE}
X	exit 0 ;;
X    Motorola:PowerMAX_OS:*:*)
X	echo powerpc-motorola-powermax
X	exit 0 ;;
X    Night_Hawk:Power_UNIX:*:*)
X	echo powerpc-harris-powerunix
X	exit 0 ;;
X    m88k:CX/UX:7*:*)
X	echo m88k-harris-cxux7
X	exit 0 ;;
X    m88k:*:4*:R4*)
X	echo m88k-motorola-sysv4
X	exit 0 ;;
X    m88k:*:3*:R3*)
X	echo m88k-motorola-sysv3
X	exit 0 ;;
X    AViiON:dgux:*:*)
X        # DG/UX returns AViiON for all architectures
X        UNAME_PROCESSOR=`/usr/bin/uname -p`
X	if [ $UNAME_PROCESSOR = mc88100 ] || [ $UNAME_PROCESSOR = mc88110 ]
X	then
X	    if [ ${TARGET_BINARY_INTERFACE}x = m88kdguxelfx ] || \
X	       [ ${TARGET_BINARY_INTERFACE}x = x ]
X	    then
X		echo m88k-dg-dgux${UNAME_RELEASE}
X	    else
X		echo m88k-dg-dguxbcs${UNAME_RELEASE}
X	    fi
X	else
X	    echo i586-dg-dgux${UNAME_RELEASE}
X	fi
X 	exit 0 ;;
X    M88*:DolphinOS:*:*)	# DolphinOS (SVR3)
X	echo m88k-dolphin-sysv3
X	exit 0 ;;
X    M88*:*:R3*:*)
X	# Delta 88k system running SVR3
X	echo m88k-motorola-sysv3
X	exit 0 ;;
X    XD88*:*:*:*) # Tektronix XD88 system running UTekV (SVR3)
X	echo m88k-tektronix-sysv3
X	exit 0 ;;
X    Tek43[0-9][0-9]:UTek:*:*) # Tektronix 4300 system running UTek (BSD)
X	echo m68k-tektronix-bsd
X	exit 0 ;;
X    *:IRIX*:*:*)
X	echo mips-sgi-irix`echo ${UNAME_RELEASE}|sed -e 's/-/_/g'`
X	exit 0 ;;
X    ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.
X	echo romp-ibm-aix      # uname -m gives an 8 hex-code CPU id
X	exit 0 ;;              # Note that: echo "'`uname -s`'" gives 'AIX '
X    i*86:AIX:*:*)
X	echo i386-ibm-aix
X	exit 0 ;;
X    ia64:AIX:*:*)
X	if [ -x /usr/bin/oslevel ] ; then
X		IBM_REV=`/usr/bin/oslevel`
X	else
X		IBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}
X	fi
X	echo ${UNAME_MACHINE}-ibm-aix${IBM_REV}
X	exit 0 ;;
X    *:AIX:2:3)
X	if grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then
X		eval $set_cc_for_build
X		sed 's/^		//' << EOF >$dummy.c
X		#include <sys/systemcfg.h>
X
X		main()
X			{
X			if (!__power_pc())
X				exit(1);
X			puts("powerpc-ibm-aix3.2.5");
X			exit(0);
X			}
EOF
X		$CC_FOR_BUILD $dummy.c -o $dummy && ./$dummy && rm -f $dummy.c $dummy && exit 0
X		rm -f $dummy.c $dummy
X		echo rs6000-ibm-aix3.2.5
X	elif grep bos324 /usr/include/stdio.h >/dev/null 2>&1; then
X		echo rs6000-ibm-aix3.2.4
X	else
X		echo rs6000-ibm-aix3.2
X	fi
X	exit 0 ;;
X    *:AIX:*:[45])
X	IBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | head -1 | awk '{ print $1 }'`
X	if /usr/sbin/lsattr -El ${IBM_CPU_ID} | grep ' POWER' >/dev/null 2>&1; then
X		IBM_ARCH=rs6000
X	else
X		IBM_ARCH=powerpc
X	fi
X	if [ -x /usr/bin/oslevel ] ; then
X		IBM_REV=`/usr/bin/oslevel`
X	else
X		IBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}
X	fi
X	echo ${IBM_ARCH}-ibm-aix${IBM_REV}
X	exit 0 ;;
X    *:AIX:*:*)
X	echo rs6000-ibm-aix
X	exit 0 ;;
X    ibmrt:4.4BSD:*|romp-ibm:BSD:*)
X	echo romp-ibm-bsd4.4
X	exit 0 ;;
X    ibmrt:*BSD:*|romp-ibm:BSD:*)            # covers RT/PC BSD and
X	echo romp-ibm-bsd${UNAME_RELEASE}   # 4.3 with uname added to
X	exit 0 ;;                           # report: romp-ibm BSD 4.3
X    *:BOSX:*:*)
X	echo rs6000-bull-bosx
X	exit 0 ;;
X    DPX/2?00:B.O.S.:*:*)
X	echo m68k-bull-sysv3
X	exit 0 ;;
X    9000/[34]??:4.3bsd:1.*:*)
X	echo m68k-hp-bsd
X	exit 0 ;;
X    hp300:4.4BSD:*:* | 9000/[34]??:4.3bsd:2.*:*)
X	echo m68k-hp-bsd4.4
X	exit 0 ;;
X    9000/[34678]??:HP-UX:*:*)
X	HPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`
X	case "${UNAME_MACHINE}" in
X	    9000/31? )            HP_ARCH=m68000 ;;
X	    9000/[34]?? )         HP_ARCH=m68k ;;
X	    9000/[678][0-9][0-9])
X		if [ -x /usr/bin/getconf ]; then
X		    sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`
X                    sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`
X                    case "${sc_cpu_version}" in
X                      523) HP_ARCH="hppa1.0" ;; # CPU_PA_RISC1_0
X                      528) HP_ARCH="hppa1.1" ;; # CPU_PA_RISC1_1
X                      532)                      # CPU_PA_RISC2_0
X                        case "${sc_kernel_bits}" in
X                          32) HP_ARCH="hppa2.0n" ;;
X                          64) HP_ARCH="hppa2.0w" ;;
X			  '') HP_ARCH="hppa2.0" ;;   # HP-UX 10.20
X                        esac ;;
X                    esac
X		fi
X		if [ "${HP_ARCH}" = "" ]; then
X		    eval $set_cc_for_build
X		    sed 's/^              //' << EOF >$dummy.c
X
X              #define _HPUX_SOURCE
X              #include <stdlib.h>
X              #include <unistd.h>
X
X              int main ()
X              {
X              #if defined(_SC_KERNEL_BITS)
X                  long bits = sysconf(_SC_KERNEL_BITS);
X              #endif
X                  long cpu  = sysconf (_SC_CPU_VERSION);
X
X                  switch (cpu)
X              	{
X              	case CPU_PA_RISC1_0: puts ("hppa1.0"); break;
X              	case CPU_PA_RISC1_1: puts ("hppa1.1"); break;
X              	case CPU_PA_RISC2_0:
X              #if defined(_SC_KERNEL_BITS)
X              	    switch (bits)
X              		{
X              		case 64: puts ("hppa2.0w"); break;
X              		case 32: puts ("hppa2.0n"); break;
X              		default: puts ("hppa2.0"); break;
X              		} break;
X              #else  /* !defined(_SC_KERNEL_BITS) */
X              	    puts ("hppa2.0"); break;
X              #endif
X              	default: puts ("hppa1.0"); break;
X              	}
X                  exit (0);
X              }
EOF
X		    (CCOPTS= $CC_FOR_BUILD $dummy.c -o $dummy 2>/dev/null) && HP_ARCH=`./$dummy`
X		    if test -z "$HP_ARCH"; then HP_ARCH=hppa; fi
X		    rm -f $dummy.c $dummy
X		fi ;;
X	esac
X	echo ${HP_ARCH}-hp-hpux${HPUX_REV}
X	exit 0 ;;
X    ia64:HP-UX:*:*)
X	HPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`
X	echo ia64-hp-hpux${HPUX_REV}
X	exit 0 ;;
X    3050*:HI-UX:*:*)
X	eval $set_cc_for_build
X	sed 's/^	//' << EOF >$dummy.c
X	#include <unistd.h>
X	int
X	main ()
X	{
X	  long cpu = sysconf (_SC_CPU_VERSION);
X	  /* The order matters, because CPU_IS_HP_MC68K erroneously returns
X	     true for CPU_PA_RISC1_0.  CPU_IS_PA_RISC returns correct
X	     results, however.  */
X	  if (CPU_IS_PA_RISC (cpu))
X	    {
X	      switch (cpu)
X		{
X		  case CPU_PA_RISC1_0: puts ("hppa1.0-hitachi-hiuxwe2"); break;
X		  case CPU_PA_RISC1_1: puts ("hppa1.1-hitachi-hiuxwe2"); break;
X		  case CPU_PA_RISC2_0: puts ("hppa2.0-hitachi-hiuxwe2"); break;
X		  default: puts ("hppa-hitachi-hiuxwe2"); break;
X		}
X	    }
X	  else if (CPU_IS_HP_MC68K (cpu))
X	    puts ("m68k-hitachi-hiuxwe2");
X	  else puts ("unknown-hitachi-hiuxwe2");
X	  exit (0);
X	}
EOF
X	$CC_FOR_BUILD $dummy.c -o $dummy && ./$dummy && rm -f $dummy.c $dummy && exit 0
X	rm -f $dummy.c $dummy
X	echo unknown-hitachi-hiuxwe2
X	exit 0 ;;
X    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:* )
X	echo hppa1.1-hp-bsd
X	exit 0 ;;
X    9000/8??:4.3bsd:*:*)
X	echo hppa1.0-hp-bsd
X	exit 0 ;;
X    *9??*:MPE/iX:*:* | *3000*:MPE/iX:*:*)
X	echo hppa1.0-hp-mpeix
X	exit 0 ;;
X    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:* )
X	echo hppa1.1-hp-osf
X	exit 0 ;;
X    hp8??:OSF1:*:*)
X	echo hppa1.0-hp-osf
X	exit 0 ;;
X    i*86:OSF1:*:*)
X	if [ -x /usr/sbin/sysversion ] ; then
X	    echo ${UNAME_MACHINE}-unknown-osf1mk
X	else
X	    echo ${UNAME_MACHINE}-unknown-osf1
X	fi
X	exit 0 ;;
X    parisc*:Lites*:*:*)
X	echo hppa1.1-hp-lites
X	exit 0 ;;
X    C1*:ConvexOS:*:* | convex:ConvexOS:C1*:*)
X	echo c1-convex-bsd
X        exit 0 ;;
X    C2*:ConvexOS:*:* | convex:ConvexOS:C2*:*)
X	if getsysinfo -f scalar_acc
X	then echo c32-convex-bsd
X	else echo c2-convex-bsd
X	fi
X        exit 0 ;;
X    C34*:ConvexOS:*:* | convex:ConvexOS:C34*:*)
X	echo c34-convex-bsd
X        exit 0 ;;
X    C38*:ConvexOS:*:* | convex:ConvexOS:C38*:*)
X	echo c38-convex-bsd
X        exit 0 ;;
X    C4*:ConvexOS:*:* | convex:ConvexOS:C4*:*)
X	echo c4-convex-bsd
X        exit 0 ;;
X    CRAY*X-MP:*:*:*)
X	echo xmp-cray-unicos
X        exit 0 ;;
X    CRAY*Y-MP:*:*:*)
X	echo ymp-cray-unicos${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
X	exit 0 ;;
X    CRAY*[A-Z]90:*:*:*)
X	echo ${UNAME_MACHINE}-cray-unicos${UNAME_RELEASE} \
X	| sed -e 's/CRAY.*\([A-Z]90\)/\1/' \
X	      -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \
X	      -e 's/\.[^.]*$/.X/'
X	exit 0 ;;
X    CRAY*TS:*:*:*)
X	echo t90-cray-unicos${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
X	exit 0 ;;
X    CRAY*T3D:*:*:*)
X	echo alpha-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
X	exit 0 ;;
X    CRAY*T3E:*:*:*)
X	echo alphaev5-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
X	exit 0 ;;
X    CRAY*SV1:*:*:*)
X	echo sv1-cray-unicos${UNAME_RELEASE} | sed -e 's/\.[^.]*$/.X/'
X	exit 0 ;;
X    CRAY-2:*:*:*)
X	echo cray2-cray-unicos
X        exit 0 ;;
X    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)
X	FUJITSU_PROC=`uname -m | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`
X        FUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\///'`
X        FUJITSU_REL=`echo ${UNAME_RELEASE} | sed -e 's/ /_/'`
X        echo "${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}"
X        exit 0 ;;
X    i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\ Embedded/OS:*:*)
X	echo ${UNAME_MACHINE}-pc-bsdi${UNAME_RELEASE}
X	exit 0 ;;
X    sparc*:BSD/OS:*:*)
X	echo sparc-unknown-bsdi${UNAME_RELEASE}
X	exit 0 ;;
X    *:BSD/OS:*:*)
X	echo ${UNAME_MACHINE}-unknown-bsdi${UNAME_RELEASE}
X	exit 0 ;;
X    *:FreeBSD:*:*)
X	echo ${UNAME_MACHINE}-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`
X	exit 0 ;;
X    i*:CYGWIN*:*)
X	echo ${UNAME_MACHINE}-pc-cygwin
X	exit 0 ;;
X    i*:MINGW*:*)
X	echo ${UNAME_MACHINE}-pc-mingw32
X	exit 0 ;;
X    i*:PW*:*)
X	echo ${UNAME_MACHINE}-pc-pw32
X	exit 0 ;;
X    i*:Windows_NT*:* | Pentium*:Windows_NT*:*)
X	# How do we know it's Interix rather than the generic POSIX subsystem?
X	# It also conflicts with pre-2.0 versions of AT&T UWIN. Should we
X	# UNAME_MACHINE based on the output of uname instead of i386?
X	echo i386-pc-interix
X	exit 0 ;;
X    i*:UWIN*:*)
X	echo ${UNAME_MACHINE}-pc-uwin
X	exit 0 ;;
X    p*:CYGWIN*:*)
X	echo powerpcle-unknown-cygwin
X	exit 0 ;;
X    prep*:SunOS:5.*:*)
X	echo powerpcle-unknown-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`
X	exit 0 ;;
X    *:GNU:*:*)
X	echo `echo ${UNAME_MACHINE}|sed -e 's,[-/].*$,,'`-unknown`echo ${UNAME_RELEASE}|sed -e 's,/.*$,,'`
X	exit 0 ;;
X    i*86:Minix:*:*)
X	echo ${UNAME_MACHINE}-pc-minix
X	exit 0 ;;
X    arm*:Linux:*:*)
X	echo ${UNAME_MACHINE}-unknown-linux
X	exit 0 ;;
X    ia64:Linux:*:*)
X	echo ${UNAME_MACHINE}-unknown-linux
X	exit 0 ;;
X    m68*:Linux:*:*)
X	echo ${UNAME_MACHINE}-unknown-linux
X	exit 0 ;;
X    mips:Linux:*:*)
X	grep -q byteorder /proc/cpuinfo && {
X		case "`grep byteorder /proc/cpuinfo`" in
X		  *big*)	echo mips-unknown-linux && exit 0 ;;
X		  *little*)	echo mipsel-unknown-linux && exit 0 ;;
X		esac
X	}
X	;;
X    ppc:Linux:*:*)
X	echo powerpc-unknown-linux
X	exit 0 ;;
X    ppc64:Linux:*:*)
X	echo powerpc64-unknown-linux
X	exit 0 ;;
X    alpha:Linux:*:*)
X	case `sed -n '/^cpu model/s/^.*: \(.*\)/\1/p' < /proc/cpuinfo` in
X	  EV5)   UNAME_MACHINE=alphaev5 ;;
X	  EV56)  UNAME_MACHINE=alphaev56 ;;
X	  PCA56) UNAME_MACHINE=alphapca56 ;;
X	  PCA57) UNAME_MACHINE=alphapca56 ;;
X	  EV6)   UNAME_MACHINE=alphaev6 ;;
X	  EV67)  UNAME_MACHINE=alphaev67 ;;
X	  EV68*) UNAME_MACHINE=alphaev68 ;;
X        esac
X	objdump --private-headers /bin/sh | grep ld.so.1 >/dev/null
X	if test "$?" = 0 ; then LIBC="libc1" ; else LIBC="" ; fi
X	echo ${UNAME_MACHINE}-unknown-linux${LIBC}
X	exit 0 ;;
X    parisc:Linux:*:* | hppa:Linux:*:*)
X	# Look for CPU level
X	case `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in
X	  PA7*) echo hppa1.1-unknown-linux ;;
X	  PA8*) echo hppa2.0-unknown-linux ;;
X	  *)    echo hppa-unknown-linux ;;
X	esac
X	exit 0 ;;
X    parisc64:Linux:*:* | hppa64:Linux:*:*)
X	echo hppa64-unknown-linux
X	exit 0 ;;
X    s390:Linux:*:* | s390x:Linux:*:*)
X	echo ${UNAME_MACHINE}-ibm-linux
X	exit 0 ;;
X    sh*:Linux:*:*)
X	echo ${UNAME_MACHINE}-unknown-linux
X	exit 0 ;;
X    sparc:Linux:*:* | sparc64:Linux:*:*)
X	echo ${UNAME_MACHINE}-unknown-linux
X	exit 0 ;;
X    x86_64:Linux:*:*)
X	echo x86_64-unknown-linux
X	exit 0 ;;
X    i*86:Linux:*:*)
X	# The BFD linker knows what the default object file format is, so
X	# first see if it will tell us. cd to the root directory to prevent
X	# problems with other programs or directories called `ld' in the path.
X	ld_supported_targets=`cd /; ld --help 2>&1 \
X			 | sed -ne '/supported targets:/!d
X				    s/[ 	][ 	]*/ /g
X				    s/.*supported targets: *//
X				    s/ .*//
X				    p'`
X        case "$ld_supported_targets" in
X	  elf32-i386)
X		TENTATIVE="${UNAME_MACHINE}-pc-linux"
X		;;
X	  a.out-i386-linux)
X		echo "${UNAME_MACHINE}-pc-linuxaout"
X		exit 0 ;;		
X	  coff-i386)
X		echo "${UNAME_MACHINE}-pc-linuxcoff"
X		exit 0 ;;
X	  "")
X		# Either a pre-BFD a.out linker (linuxoldld) or
X		# one that does not give us useful --help.
X		echo "${UNAME_MACHINE}-pc-linuxoldld"
X		exit 0 ;;
X	esac
X	# Determine whether the default compiler is a.out or elf
X	eval $set_cc_for_build
X	cat >$dummy.c <<EOF
#include <features.h>
#ifdef __cplusplus
#include <stdio.h>  /* for printf() prototype */
X	int main (int argc, char *argv[]) {
#else
X	int main (argc, argv) int argc; char *argv[]; {
#endif
#ifdef __ELF__
# ifdef __GLIBC__
#  if __GLIBC__ >= 2
X    printf ("%s-pc-linux\n", argv[1]);
#  else
X    printf ("%s-pc-linuxlibc1\n", argv[1]);
#  endif
# else
X   printf ("%s-pc-linuxlibc1\n", argv[1]);
# endif
#else
X  printf ("%s-pc-linuxaout\n", argv[1]);
#endif
X  return 0;
}
EOF
X	$CC_FOR_BUILD $dummy.c -o $dummy 2>/dev/null && ./$dummy "${UNAME_MACHINE}" && rm -f $dummy.c $dummy && exit 0
X	rm -f $dummy.c $dummy
X	test x"${TENTATIVE}" != x && echo "${TENTATIVE}" && exit 0
X	;;
X    i*86:DYNIX/ptx:4*:*)
X	# ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.
X	# earlier versions are messed up and put the nodename in both
X	# sysname and nodename.
X	echo i386-sequent-sysv4
X	exit 0 ;;
X    i*86:UNIX_SV:4.2MP:2.*)
X        # Unixware is an offshoot of SVR4, but it has its own version
X        # number series starting with 2...
X        # I am not positive that other SVR4 systems won't match this,
X	# I just have to hope.  -- rms.
X        # Use sysv4.2uw... so that sysv4* matches it.
X	echo ${UNAME_MACHINE}-pc-sysv4.2uw${UNAME_VERSION}
X	exit 0 ;;
X    i*86:*:4.*:* | i*86:SYSTEM_V:4.*:*)
X	UNAME_REL=`echo ${UNAME_RELEASE} | sed 's/\/MP$//'`
X	if grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then
X		echo ${UNAME_MACHINE}-univel-sysv${UNAME_REL}
X	else
X		echo ${UNAME_MACHINE}-pc-sysv${UNAME_REL}
X	fi
X	exit 0 ;;
X    i*86:*:5:[78]*)
X	case `/bin/uname -X | grep "^Machine"` in
X	    *486*)	     UNAME_MACHINE=i486 ;;
X	    *Pentium)	     UNAME_MACHINE=i586 ;;
X	    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;
X	esac
X	echo ${UNAME_MACHINE}-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}
X	exit 0 ;;
X    i*86:*:3.2:*)
X	if test -f /usr/options/cb.name; then
X		UNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`
X		echo ${UNAME_MACHINE}-pc-isc$UNAME_REL
X	elif /bin/uname -X 2>/dev/null >/dev/null ; then
X		UNAME_REL=`(/bin/uname -X|egrep Release|sed -e 's/.*= //')`
X		(/bin/uname -X|egrep i80486 >/dev/null) && UNAME_MACHINE=i486
X		(/bin/uname -X|egrep '^Machine.*Pentium' >/dev/null) \
X			&& UNAME_MACHINE=i586
X		(/bin/uname -X|egrep '^Machine.*Pent ?II' >/dev/null) \
X			&& UNAME_MACHINE=i686
X		(/bin/uname -X|egrep '^Machine.*Pentium Pro' >/dev/null) \
X			&& UNAME_MACHINE=i686
X		echo ${UNAME_MACHINE}-pc-sco$UNAME_REL
X	else
X		echo ${UNAME_MACHINE}-pc-sysv32
X	fi
X	exit 0 ;;
X    i*86:*DOS:*:*)
X	echo ${UNAME_MACHINE}-pc-msdosdjgpp
X	exit 0 ;;
X    pc:*:*:*)
X	# Left here for compatibility:
X        # uname -m prints for DJGPP always 'pc', but it prints nothing about
X        # the processor, so we play safe by assuming i386.
X	echo i386-pc-msdosdjgpp
X        exit 0 ;;
X    Intel:Mach:3*:*)
X	echo i386-pc-mach3
X	exit 0 ;;
X    paragon:*:*:*)
X	echo i860-intel-osf1
X	exit 0 ;;
X    i860:*:4.*:*) # i860-SVR4
X	if grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then
X	  echo i860-stardent-sysv${UNAME_RELEASE} # Stardent Vistra i860-SVR4
X	else # Add other i860-SVR4 vendors below as they are discovered.
X	  echo i860-unknown-sysv${UNAME_RELEASE}  # Unknown i860-SVR4
X	fi
X	exit 0 ;;
X    mini*:CTIX:SYS*5:*)
X	# "miniframe"
X	echo m68010-convergent-sysv
X	exit 0 ;;
X    M68*:*:R3V[567]*:*)
X	test -r /sysV68 && echo 'm68k-motorola-sysv' && exit 0 ;;
X    3[34]??:*:4.0:3.0 | 3[34]??A:*:4.0:3.0 | 3[34]??,*:*:4.0:3.0 | 3[34]??/*:*:4.0:3.0 | 4850:*:4.0:3.0 | SKA40:*:4.0:3.0)
X	OS_REL=''
X	test -r /etc/.relid \
X	&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \([0-9][0-9]\).*/\1/p' < /etc/.relid`
X	/bin/uname -p 2>/dev/null | grep 86 >/dev/null \
X	  && echo i486-ncr-sysv4.3${OS_REL} && exit 0
X	/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \
X	  && echo i586-ncr-sysv4.3${OS_REL} && exit 0 ;;
X    3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)
X        /bin/uname -p 2>/dev/null | grep 86 >/dev/null \
X          && echo i486-ncr-sysv4 && exit 0 ;;
X    m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:*)
X	echo m68k-unknown-lynxos${UNAME_RELEASE}
X	exit 0 ;;
X    mc68030:UNIX_System_V:4.*:*)
X	echo m68k-atari-sysv4
X	exit 0 ;;
X    i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.0*:*)
X	echo i386-unknown-lynxos${UNAME_RELEASE}
X	exit 0 ;;
X    TSUNAMI:LynxOS:2.*:*)
X	echo sparc-unknown-lynxos${UNAME_RELEASE}
X	exit 0 ;;
X    rs6000:LynxOS:2.*:*)
X	echo rs6000-unknown-lynxos${UNAME_RELEASE}
X	exit 0 ;;
X    PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.0*:*)
X	echo powerpc-unknown-lynxos${UNAME_RELEASE}
X	exit 0 ;;
X    SM[BE]S:UNIX_SV:*:*)
X	echo mips-dde-sysv${UNAME_RELEASE}
X	exit 0 ;;
X    RM*:ReliantUNIX-*:*:*)
X	echo mips-sni-sysv4
X	exit 0 ;;
X    RM*:SINIX-*:*:*)
X	echo mips-sni-sysv4
X	exit 0 ;;
X    *:SINIX-*:*:*)
X	if uname -p 2>/dev/null >/dev/null ; then
X		UNAME_MACHINE=`(uname -p) 2>/dev/null`
X		echo ${UNAME_MACHINE}-sni-sysv4
X	else
X		echo ns32k-sni-sysv
X	fi
X	exit 0 ;;
X    PENTIUM:*:4.0*:*) # Unisys `ClearPath HMP IX 4000' SVR4/MP effort
X                      # says <Richard.M.Bartel@ccMail.Census.GOV>
X        echo i586-unisys-sysv4
X        exit 0 ;;
X    *:UNIX_System_V:4*:FTX*)
X	# From Gerald Hewes <hewes@openmarket.com>.
X	# How about differentiating between stratus architectures? -djm
X	echo hppa1.1-stratus-sysv4
X	exit 0 ;;
X    *:*:*:FTX*)
X	# From seanf@swdc.stratus.com.
X	echo i860-stratus-sysv4
X	exit 0 ;;
X    *:VOS:*:*)
X	# From Paul.Green@stratus.com.
X	echo hppa1.1-stratus-vos
X	exit 0 ;;
X    mc68*:A/UX:*:*)
X	echo m68k-apple-aux${UNAME_RELEASE}
X	exit 0 ;;
X    news*:NEWS-OS:6*:*)
X	echo mips-sony-newsos6
X	exit 0 ;;
X    R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)
X	if [ -d /usr/nec ]; then
X	        echo mips-nec-sysv${UNAME_RELEASE}
X	else
X	        echo mips-unknown-sysv${UNAME_RELEASE}
X	fi
X        exit 0 ;;
X    BeBox:BeOS:*:*)	# BeOS running on hardware made by Be, PPC only.
X	echo powerpc-be-beos
X	exit 0 ;;
X    BeMac:BeOS:*:*)	# BeOS running on Mac or Mac clone, PPC only.
X	echo powerpc-apple-beos
X	exit 0 ;;
X    BePC:BeOS:*:*)	# BeOS running on Intel PC compatible.
X	echo i586-pc-beos
X	exit 0 ;;
X    SX-4:SUPER-UX:*:*)
X	echo sx4-nec-superux${UNAME_RELEASE}
X	exit 0 ;;
X    SX-5:SUPER-UX:*:*)
X	echo sx5-nec-superux${UNAME_RELEASE}
X	exit 0 ;;
X    Power*:Rhapsody:*:*)
X	echo powerpc-apple-rhapsody${UNAME_RELEASE}
X	exit 0 ;;
X    *:Rhapsody:*:*)
X	echo ${UNAME_MACHINE}-apple-rhapsody${UNAME_RELEASE}
X	exit 0 ;;
X    *:Darwin:*:*)
X	echo `uname -p`-apple-darwin${UNAME_RELEASE}
X	exit 0 ;;
X    *:procnto*:*:* | *:QNX:[0123456789]*:*)
X	if test "${UNAME_MACHINE}" = "x86pc"; then
X		UNAME_MACHINE=pc
X	fi
X	echo `uname -p`-${UNAME_MACHINE}-nto-qnx
X	exit 0 ;;
X    *:QNX:*:4*)
X	echo i386-pc-qnx
X	exit 0 ;;
X    NSR-[GKLNPTVW]:NONSTOP_KERNEL:*:*)
X	echo nsr-tandem-nsk${UNAME_RELEASE}
X	exit 0 ;;
X    *:NonStop-UX:*:*)
X	echo mips-compaq-nonstopux
X	exit 0 ;;
X    BS2000:POSIX*:*:*)
X	echo bs2000-siemens-sysv
X	exit 0 ;;
X    DS/*:UNIX_System_V:*:*)
X	echo ${UNAME_MACHINE}-${UNAME_SYSTEM}-${UNAME_RELEASE}
X	exit 0 ;;
X    *:Plan9:*:*)
X	# "uname -m" is not consistent, so use $cputype instead. 386
X	# is converted to i386 for consistency with other x86
X	# operating systems.
X	if test "$cputype" = "386"; then
X	    UNAME_MACHINE=i386
X	else
X	    UNAME_MACHINE="$cputype"
X	fi
X	echo ${UNAME_MACHINE}-unknown-plan9
X	exit 0 ;;
X    i*86:OS/2:*:*)
X	# If we were able to find `uname', then EMX Unix compatibility
X	# is probably installed.
X	echo ${UNAME_MACHINE}-pc-os2-emx
X	exit 0 ;;
X    *:TOPS-10:*:*)
X	echo pdp10-unknown-tops10
X	exit 0 ;;
X    *:TENEX:*:*)
X	echo pdp10-unknown-tenex
X	exit 0 ;;
X    KS10:TOPS-20:*:* | KL10:TOPS-20:*:* | TYPE4:TOPS-20:*:*)
X	echo pdp10-dec-tops20
X	exit 0 ;;
X    XKL-1:TOPS-20:*:* | TYPE5:TOPS-20:*:*)
X	echo pdp10-xkl-tops20
X	exit 0 ;;
X    *:TOPS-20:*:*)
X	echo pdp10-unknown-tops20
X	exit 0 ;;
X    *:ITS:*:*)
X	echo pdp10-unknown-its
X	exit 0 ;;
X    i*86:XTS-300:*:STOP)
X	echo ${UNAME_MACHINE}-unknown-stop
X	exit 0 ;;
X    i*86:atheos:*:*)
X	echo ${UNAME_MACHINE}-unknown-atheos
X	exit 0 ;;
esac
X
#echo '(No uname command or uname output not recognized.)' 1>&2
#echo "${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}" 1>&2
X
eval $set_cc_for_build
cat >$dummy.c <<EOF
#ifdef _SEQUENT_
# include <sys/types.h>
# include <sys/utsname.h>
#endif
main ()
{
#if defined (sony)
#if defined (MIPSEB)
X  /* BFD wants "bsd" instead of "newsos".  Perhaps BFD should be changed,
X     I don't know....  */
X  printf ("mips-sony-bsd\n"); exit (0);
#else
#include <sys/param.h>
X  printf ("m68k-sony-newsos%s\n",
#ifdef NEWSOS4
X          "4"
#else
X	  ""
#endif
X         ); exit (0);
#endif
#endif
X
#if defined (__arm) && defined (__acorn) && defined (__unix)
X  printf ("arm-acorn-riscix"); exit (0);
#endif
X
#if defined (hp300) && !defined (hpux)
X  printf ("m68k-hp-bsd\n"); exit (0);
#endif
X
#if defined (NeXT)
#if !defined (__ARCHITECTURE__)
#define __ARCHITECTURE__ "m68k"
#endif
X  int version;
X  version=`(hostinfo | sed -n 's/.*NeXT Mach \([0-9]*\).*/\1/p') 2>/dev/null`;
X  if (version < 4)
X    printf ("%s-next-nextstep%d\n", __ARCHITECTURE__, version);
X  else
X    printf ("%s-next-openstep%d\n", __ARCHITECTURE__, version);
X  exit (0);
#endif
X
#if defined (MULTIMAX) || defined (n16)
#if defined (UMAXV)
X  printf ("ns32k-encore-sysv\n"); exit (0);
#else
#if defined (CMU)
X  printf ("ns32k-encore-mach\n"); exit (0);
#else
X  printf ("ns32k-encore-bsd\n"); exit (0);
#endif
#endif
#endif
X
#if defined (__386BSD__)
X  printf ("i386-pc-bsd\n"); exit (0);
#endif
X
#if defined (sequent)
#if defined (i386)
X  printf ("i386-sequent-dynix\n"); exit (0);
#endif
#if defined (ns32000)
X  printf ("ns32k-sequent-dynix\n"); exit (0);
#endif
#endif
X
#if defined (_SEQUENT_)
X    struct utsname un;
X
X    uname(&un);
X
X    if (strncmp(un.version, "V2", 2) == 0) {
X	printf ("i386-sequent-ptx2\n"); exit (0);
X    }
X    if (strncmp(un.version, "V1", 2) == 0) { /* XXX is V1 correct? */
X	printf ("i386-sequent-ptx1\n"); exit (0);
X    }
X    printf ("i386-sequent-ptx\n"); exit (0);
X
#endif
X
#if defined (vax)
# if !defined (ultrix)
#  include <sys/param.h>
#  if defined (BSD)
#   if BSD == 43
X      printf ("vax-dec-bsd4.3\n"); exit (0);
#   else
#    if BSD == 199006
X      printf ("vax-dec-bsd4.3reno\n"); exit (0);
#    else
X      printf ("vax-dec-bsd\n"); exit (0);
#    endif
#   endif
#  else
X    printf ("vax-dec-bsd\n"); exit (0);
#  endif
# else
X    printf ("vax-dec-ultrix\n"); exit (0);
# endif
#endif
X
#if defined (alliant) && defined (i860)
X  printf ("i860-alliant-bsd\n"); exit (0);
#endif
X
X  exit (1);
}
EOF
X
$CC_FOR_BUILD $dummy.c -o $dummy 2>/dev/null && ./$dummy && rm -f $dummy.c $dummy && exit 0
rm -f $dummy.c $dummy
X
# Apollos put the system type in the environment.
X
test -d /usr/apollo && { echo ${ISP}-apollo-${SYSTYPE}; exit 0; }
X
# Convex versions that predate uname can use getsysinfo(1)
X
if [ -x /usr/convex/getsysinfo ]
then
X    case `getsysinfo -f cpu_type` in
X    c1*)
X	echo c1-convex-bsd
X	exit 0 ;;
X    c2*)
X	if getsysinfo -f scalar_acc
X	then echo c32-convex-bsd
X	else echo c2-convex-bsd
X	fi
X	exit 0 ;;
X    c34*)
X	echo c34-convex-bsd
X	exit 0 ;;
X    c38*)
X	echo c38-convex-bsd
X	exit 0 ;;
X    c4*)
X	echo c4-convex-bsd
X	exit 0 ;;
X    esac
fi
X
cat >&2 <<EOF
$0: unable to guess system type
X
This script, last modified $timestamp, has failed to recognize
the operating system you are using. It is advised that you
download the most up to date version of the config scripts from
X
X    ftp://ftp.gnu.org/pub/gnu/config/
X
If the version you run ($0) is already up to date, please
send the following data and any information you think might be
pertinent to <config-patches@gnu.org> in order to provide the needed
information to handle your system.
X
config.guess timestamp = $timestamp
X
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`
X
/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null`
X
hostinfo               = `(hostinfo) 2>/dev/null`
/bin/universe          = `(/bin/universe) 2>/dev/null`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null`
/bin/arch              = `(/bin/arch) 2>/dev/null`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`
X
UNAME_MACHINE = ${UNAME_MACHINE}
UNAME_RELEASE = ${UNAME_RELEASE}
UNAME_SYSTEM  = ${UNAME_SYSTEM}
UNAME_VERSION = ${UNAME_VERSION}
EOF
X
exit 1
X
# Local variables:
# eval: (add-hook 'write-file-hooks 'time-stamp)
# time-stamp-start: "timestamp='"
# time-stamp-format: "%:y-%02m-%02d"
# time-stamp-end: "'"
# End:
SHAR_EOF


# Order of the sed expressions is important.
# We remove the OS version numbers in many cases because they just cause
# questions.  Exceptions are where we maintain several versions.
OS=`sh /tmp/gnu-os$$ | 
    sed -e 's/i[3456789]86-/x86-/' \
	-e 's/-[a-zA-Z0-9]*-/-/' \
	-e s/_BETA_1274425944// \
	-e s/hppa64/hppa/ \
	-e s/hppa2.0/hppa/ \
	-e s/powerpc-darwin.*/powerpc-macosx/ \
	-e s/x86-darwin.*/x86-macosx/ \
	-e s/sparc64-/sparc-/ \
	-e s/openbsd.../openbsd/ \
	-e s/netbsdelf/netbsd/ \
	-e s/netbsd.*/netbsd/ \
	-e s/freebsd2.*/freebsd2/ \
	-e s/freebsd3.*/freebsd3/ \
	-e s/freebsd4.*/freebsd4/ \
	-e s/freebsd5.*/freebsd5/ \
	-e s/freebsd6.*/freebsd6/ \
	-e s/freebsd7.*/freebsd7/ \
	-e s/hppaw/hppa/ \
	-e s/hpux11.*/hpux11/ \
	-e s/hpux10.*/hpux10/ \
	-e s/mips-irix6.5/mips-irix/ \
	-e s/powerpc-aix.*/powerpc-aix/ \
	-e s/x86-sco.*/sco/ \
	-e s/solaris2.*/solaris/ \
	-e s/alphaev56/alpha/ \
	-e s/osf5.1/tru64/ \
	-e s/cygwin/win32/ \
	-e s/mingw32/win32/ \
	-e s/armv4l/arm/ \
	-e 's/\./_/g'`

rm -f /tmp/gnu-os$$

case $OS in
    *linux*)
	test -z "$BK_STATIC" || {
		echo $OS | sed s/linux/static-linux/
		exit 0
	}
	if [ -d /lib64 ]
	then	LIBC=`echo /lib64/libc-*`
	else	LIBC=`echo /lib/libc-*`
	fi
	case "$LIBC" in
	    *libc-3.4*)
		echo $OS | sed s/linux/glibc34-linux/;;
	    *libc-3.3*)
		echo $OS | sed s/linux/glibc33-linux/;;
	    *libc-3.2*)
		echo $OS | sed s/linux/glibc32-linux/;;
	    *libc-3.1*)
		echo $OS | sed s/linux/glibc31-linux/;;
	    *libc-3.0*)
		echo $OS | sed s/linux/glibc30-linux/;;
	    *libc-2.9*)
		echo $OS | sed s/linux/glibc29-linux/;;
	    *libc-2.8*)
		echo $OS | sed s/linux/glibc28-linux/;;
	    *libc-2.7*)
		echo $OS | sed s/linux/glibc27-linux/;;
	    *libc-2.6*)
		echo $OS | sed s/linux/glibc26-linux/;;
	    *libc-2.5*)
		echo $OS | sed s/linux/glibc25-linux/;;
	    *libc-2.4*)
		echo $OS | sed s/linux/glibc24-linux/;;
	    *libc-2.3*)
		echo $OS | sed s/linux/glibc23-linux/;;
	    *libc-2.2*)
		echo $OS | sed s/linux/glibc22-linux/;;
	    *libc-2.1*)
		echo $OS | sed s/linux/glibc21-linux/;;
	    *libc-2.0*)
		echo $OS | sed s/linux/glibc20-linux/;;
	    *)
		echo $OS | sed s/linux/unknown-linux/;;
	esac
	exit 0
	;;

    "")
	# Hail Mary, full of grace.  Try to get something.
	OS=`uname -m | sed 's/i[3456789]86/x86/'`-`uname -s``uname -r`
	;;
esac
test -z "$BK_STATIC" || OS="static-$OS"
echo $OS
